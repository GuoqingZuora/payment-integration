{
  "gateway_type": "Stripe",
  "gateway_version": "2",
  "display_name": "Stripe v2",
  "gateway_revision": 98,
  "status": "Draft",
  "request_language": "Raw",
  "card_types": [
    "Visa",
    "MasterCard",
    "AmericanExpress",
    "Discover",
    "Diners",
    "JCB"
  ],
  "idempotency_support": {
    "key_spec": "UUIDv4",
    "retry_window_opened_at": 300,
    "retry_window_closed_at": 144000
  },
  "mit_support_list": [
    {
      "payment_method_type": "CreditCard",
      "brand": "Visa",
      "profile_types": ["Recurring"]
    },
    {
      "payment_method_type": "CreditCard",
      "brand": "Mastercard",
      "profile_types": ["Recurring"]
    },
    {
      "payment_method_type": "CreditCard",
      "brand": "AmericanExpress",
      "profile_types": ["Recurring"]
    },
    {
      "payment_method_type": "CreditCard",
      "brand": "Discover",
      "profile_types": ["Recurring"]
    },
    {
      "payment_method_type": "CreditCard",
      "brand": "Diners",
      "profile_types": ["Recurring"]
    },
    {
      "payment_method_type": "CreditCard",
      "brand": "JCB",
      "profile_types": ["Recurring"]
    }
  ],
  "moto_support_list": [
    {
      "payment_method_type": "CreditCard",
      "allow_create_scp": true
    }
  ],
  "global_fields":[
    {
      "field_name": "Header-Content-Type",
      "field_value_expression": "application/x-www-form-urlencoded; charset=UTF-8"
    },
    {
      "field_name": "Header-Authorization",
      "field_value_expression": "Bearer #{if}($StringUtils.isNotBlank($OAuth2Token))$!OAuth2Token#{else}$!SecretKey#{end}"
    },
    {
      "field_name": "Header-Stripe-Version",
      "field_value_expression": "2019-05-16"
    },
    {
      "field_name": "Header-Stripe-Version-2020",
      "field_value_expression": "2020-08-27"
    },
    {
      "field_name": "Feature-SkipVerificationMethod-Enabled",
      "field_value_expression": "$StringUtils.defaultIfBlank(${Feature-SkipVerificationMethod-Enabled}, 'false')"
    },
    {
      "field_name": "Feature-ACHTokenizationSupport-Enabled",
      "field_value_expression": "$StringUtils.defaultIfBlank(${Feature-ACHTokenizationSupport-Enabled}, 'false')"
    },
    {
      "field_name": "Feature-AuthNtiSupport-Enabled",
      "field_value_expression": "$StringUtils.defaultIfBlank(${Feature-AuthNtiSupport-Enabled}, 'false')"
    },
    {
      "field_name": "Bank-Transfer-Type-Map",
      "field_value_expression": "
      #{set}($bankTransferTypeMap = {
      \"SEPA\":\"sepa_debit\",
    \"DirectDebitUK\" : \"bacs_debit\",
    \"PAD\" : \"acss_debit\"
    })"
    },
    {
      "field_name": "Block-Error-Handler",
      "field_value_expression": "
      #[[
      #{set}($inputResponseBody = $blockInputs[0])
      #{set}($inputResponseCode = $blockInputs[1])

      #{set}( $zuoraResponseCode = 'Failed' )
      #{set}( $gatewayResponseCode = $inputResponseCode )

      ## deal with 4xx error
      #{if}($StringUtils.startsWith($inputResponseCode, '4'))
      #{if}($StringUtils.equalsAny($inputResponseCode, '409', '429')
      || ($StringUtils.isNotBlank(${Framework-Idempotent-Retry-Times})
      && $ZUtility.parseStringToInt(${Framework-Idempotent-Retry-Times}) > 0
      && $StringUtils.equals($inputResponseCode, '401'))
      )
      #{set}( $zuoraResponseCode = 'Unknown' )
      #{end}

      #{set}( $errorResponseDoc = $ZUtility.parseJsonDocument($inputResponseBody) )

      ## extract error type and code
      #{set}( $stripeChargeId = $errorResponseDoc.valueOf('//error/charge') )
      #{set}( $stripeErrorType = $errorResponseDoc.valueOf('//error/type') )
      #{set}( $stripeErrorCode = $errorResponseDoc.valueOf('//error/code') )
      #{set}( $stripeDeclineCode = $errorResponseDoc.valueOf('//error/decline_code') )
      #{set}( $stripeErrorMsg = $errorResponseDoc.valueOf('//error/message') )

      #{set}( $stripeErrorMsgPrefix = $stripeErrorType )
      #{if}($StringUtils.isNotBlank($stripeErrorCode))
      #{set}( $stripeErrorMsgPrefix = \"$stripeErrorMsgPrefix/$stripeErrorCode\" )
      #{if}($StringUtils.isNotBlank($stripeDeclineCode))
      #{set}( $stripeErrorMsgPrefix = \"$stripeErrorMsgPrefix/$stripeDeclineCode\" )
      #{end}
      #{end}

      #{set}( $gatewayResponseMessage = \"[$stripeErrorMsgPrefix] $stripeErrorMsg\" )
      #{set}( $gatewayReferenceId = $stripeChargeId )
      ## deal with 5xx error
      #{elseif}($inputResponseCode && ($inputResponseCode.length() == 3) && $StringUtils.startsWith($inputResponseCode, '5'))
      #{set}( $zuoraResponseCode = 'Unknown' )
      #{else}
      #{set}( $gatewayResponseMessage = 'Something is wrong on Stripe end.' )
      #{end}
    ]]#
  "
},
{
"field_name": "Block-Last-Payment-Error-Handler",
"field_value_expression": "
#[[
#{set}($inputResponseBody = $blockInputs[0])
#{set}($inputResponseCode = $blockInputs[1])

#{set}( $zuoraResponseCode = 'Failed' )
#{set}( $gatewayResponseCode = $inputResponseCode )

## deal with 4xx error
#{if}($StringUtils.startsWith($inputResponseCode, '4'))
#{set}( $errorResponseDoc = $ZUtility.parseJsonDocument($inputResponseBody) )

## extract error type and code
#{set}( $stripeChargeId = $errorResponseDoc.valueOf('//error/payment_intent/last_payment_error/charge') )
#{set}( $stripeErrorType = $errorResponseDoc.valueOf('//error/payment_intent/last_payment_error/type') )
#{set}( $stripeErrorCode = $errorResponseDoc.valueOf('//error/payment_intent/last_payment_error/code') )
#{set}( $stripeDeclineCode = $errorResponseDoc.valueOf('//error/payment_intent/last_payment_error/decline_code') )
#{set}( $stripeErrorMsg = $errorResponseDoc.valueOf('//error/payment_intent/last_payment_error/message') )

#{set}( $stripeErrorMsgPrefix = $stripeErrorType )
#{if}($StringUtils.isNotBlank($stripeErrorCode))
#{set}( $stripeErrorMsgPrefix = \"$stripeErrorMsgPrefix/$stripeErrorCode\" )
#{if}($StringUtils.isNotBlank($stripeDeclineCode))
#{set}( $stripeErrorMsgPrefix = \"$stripeErrorMsgPrefix/$stripeDeclineCode\" )
#{end}
#{end}

#{set}( $gatewayResponseMessage = \"[$stripeErrorMsgPrefix] $stripeErrorMsg\" )
#{set}( $gatewayReferenceId = $stripeChargeId )
#{else} ## deal with 5xx error
#{set}( $gatewayResponseMessage = 'Something is wrong on Stripe end.' )
#{end}
]]#
"
},
{
"field_name": "Block-Normalize-Amount",
"field_value_expression": "
#[[
#{set}($inputAmount = $blockInputs[0])
#{set}($inputCurrency = $blockInputs[1])

## check https://stripe.com/docs/currencies#presentment-currencies for all zero dicimal currencies.
#{set}( $macroZeroDecimalCurrencyList = ['BIF', 'CLP', 'DJF', 'GNF', 'JPY', 'KMF', 'KRW', 'MGA', 'PYG', 'RWF', 'UGX', 'VND', 'VUV', 'XAF', 'XOF', 'XPF'])
#{if}($macroZeroDecimalCurrencyList.contains($!inputCurrency))
#{set}( $macroReturn = $inputAmount )
#{else}
#{set}( $macroReturn = $ZUtility.multiplyByHundred($!inputAmount))
#{end}
]]#
"
},
{
"field_name": "Block-Payment-Metadata",
"field_value_expression": "
#[[
## set metadata
#{set}( $macroMetadataReturn = {
} )
#{if}($StringUtils.isNotBlank($!PaymentNumber))
## {set}( $macroMetadataReturn = { 'metadata[zpayment_number]':$!PaymentNumber} )
#{set}( $macroMetadataReturn['metadata[zpayment_number]'] = $!PaymentNumber )
#{end}

#{set}( $macroMetadataInput = {} )

#{if}($!PaymentMetadata && !$!PaymentMetadata.isEmpty())
$macroMetadataInput.putAll($!PaymentMetadata)

#foreach( $key in $macroMetadataInput.keySet() )
#{set}($macroMetadataReturnKey = \"metadata[$key]\" )
#{set}($macroMetadataReturn[$macroMetadataReturnKey] = $macroMetadataInput.get($key) )
#end
#{end}
]]#
"
},
{
"field_name": "Block-Construct-Card-PaymentMethodData",
"field_value_expression": "
#[[
#{set}( $macroReturn = {
'payment_method_data[type]' : 'card',
'payment_method_data[card][number]' : $!CreditCardNumber,
'payment_method_data[card][exp_month]' : $!CreditCardExpirationMonth,
'payment_method_data[card][exp_year]' : $!CreditCardExpirationYear
} )

## set RadarSessionId
#{if}($StringUtils.isNotBlank($!RadarSessionId))
#{set}( $macroReturn['payment_method_data[radar_options][session]'] = $!RadarSessionId )
#{end}

## set card holder name
#{if}($StringUtils.isNotBlank($!CreditCardHolderName))
#{set}( $macroReturn['payment_method_data[billing_details][name]'] = $!CreditCardHolderName )
#{end}

## set card security code
#{if}($StringUtils.isNotBlank($!CreditCardSecurityCode))
#{set}( $macroReturn['payment_method_data[card][cvc]'] = $!CreditCardSecurityCode )
#{end}

## set billing country
#{set}( $macroTwoCharCountryCode = $ZUtility.get2DigitCountryCode($!CreditCardCountry) )
#{if} ($StringUtils.isBlank($macroTwoCharCountryCode))
#{set}( $macroBillToCountry = $!CreditCardCountry )
#{else}
#{set}( $macroBillToCountry = $macroTwoCharCountryCode )
#{end}
#{if}($StringUtils.isNotBlank($macroBillToCountry))
#{set}( $macroReturn['payment_method_data[billing_details][address][country]'] = $macroBillToCountry )
#{end}

## set billing state
#{set}( $macroTwoCharStateCode = $ZUtility.get2LetterStateCode($CreditCardCountry, $CreditCardState) )
#{if} ($StringUtils.isBlank($macroTwoCharStateCode))
#{set}( $macroBillToState = $!CreditCardState )
#{else}
#{set}( $macroBillToState = $macroTwoCharStateCode )
#{end}
#{if}($StringUtils.isNotBlank($macroBillToState))
#{set}( $macroReturn['payment_method_data[billing_details][address][state]'] = $macroBillToState )
#{end}

## set billing city
#{if}($StringUtils.isNotBlank($CreditCardCity))
#{set}( $macroReturn['payment_method_data[billing_details][address][city]'] = $!CreditCardCity )
#{end}

## set billing address1
#{if}($StringUtils.isNotBlank($CreditCardAddress1))
#{set}( $macroReturn['payment_method_data[billing_details][address][line1]'] = $!CreditCardAddress1 )
#{end}

## set billing address2
#{if}($StringUtils.isNotBlank($CreditCardAddress2))
#{set}( $macroReturn['payment_method_data[billing_details][address][line2]'] = $!CreditCardAddress2 )
#{end}

## set billing postal code
#{if}($StringUtils.isNotBlank($CreditCardPostalCode))
#{set}( $macroReturn['payment_method_data[billing_details][address][postal_code]'] = $!CreditCardPostalCode )
#{end}

## set billing email
#{if} ($StringUtils.isNotBlank($Email))
#{set}( $macroBillToEmail = $Email )
#{elseif} ($StringUtils.isNotEmpty($DefaultBillToEmail))
#{set}( $macroBillToEmail = $DefaultBillToEmail )
#{end}
#{if} ($StringUtils.isNotBlank($macroBillToEmail))
#{set}( $macroReturn['payment_method_data[billing_details][email]'] = $macroBillToEmail )
#{end}

## set billing phone
#{if}($StringUtils.isNotBlank($Phone))
#{set}( $macroReturn['payment_method_data[billing_details][phone]'] = $!Phone )
#{end}
]]#
"
},
{
"field_name": "Block-Construct-Card-ApplePayOrGooglePayData",
"field_value_expression": "
#[[
#{set}( $macroReturn = {
'payment_method_types[]' : 'card',
'payment_method_data[type]' : 'card',
'payment_method_data[card][exp_month]' : $!CreditCardExpirationMonth,
'payment_method_data[card][exp_year]' : $!CreditCardExpirationYear,
'payment_method_data[card][last4]' : $StringUtils.right($!CreditCardNumber, 4),
'payment_method_data[card][network_token][number]' : $!CreditCardNumber,
'payment_method_data[card][network_token][exp_month]' : $!CreditCardExpirationMonth,
'payment_method_data[card][network_token][exp_year]' : $!CreditCardExpirationYear
} )

## set tokenization method
#{if}($StringUtils.contains($CreditCardType,'Apple'))
#{set}( $macroReturn['payment_method_data[card][network_token][tokenization_method]'] = 'apple_pay' )
#{else}
#{set}( $macroReturn['payment_method_data[card][network_token][tokenization_method]'] = 'google_pay_dpan' )
#{end}
## set cryptogram
#{if}($StringUtils.isNotBlank($!CreditCardSecurityCode))
#{set}( $macroReturn['payment_method_options[card][network_token][cryptogram]'] = $!CreditCardSecurityCode )
#{end}
]]#
"
},
{
"field_name": "Block-Construct-Ideal-Mandate-Data-Map",
"field_value_expression": "
#[[
## set up mandate data
#{if}( $StringUtils.isNotBlank($!$gwOptions_ipAddress) )
#{set}( $mandateIPAddress = $!$gwOptions_ipAddress )
#{elseif}( $StringUtils.isNotBlank($!IPAddress) )
#{set}( $mandateIPAddress = $!IPAddress)
#{elseif}( $StringUtils.isNotBlank($!browser_IpAddress) )
#{set}( $mandateIPAddress = $!browser_IpAddress )
#{end}

#{if}( $StringUtils.isNotBlank($!gwOptions_UserAgent) )
#{set}( $mandateUserAgent = $ZUtility.decodeBase64($!gwOptions_UserAgent) )
#{elseif}( $StringUtils.isNotBlank($!browser_UserAgent) )
#{set}( $mandateUserAgent = $!browser_UserAgent )
#{end}

#{if}( $StringUtils.isNotBlank($ZUtility.getMilliSecTime()) )
#{set}( $mandateAcceptedAt = $ZUtility.round($ZUtility.divide($ZUtility.getMilliSecTime(), '1000'), 0) )
#{end}

#{set}( $macroIdealMandateReturn = {} )

#{set}( $macroIdealMandateReturn['mandate_data[customer_acceptance][type]'] = 'online' )

#{if}( $StringUtils.isNotBlank($mandateIPAddress) )
#{set}( $macroIdealMandateReturn['mandate_data[customer_acceptance][online][ip_address]'] = $mandateIPAddress )
#{end}
#{if}( $StringUtils.isNotBlank($mandateUserAgent) )
#{set}( $macroIdealMandateReturn['mandate_data[customer_acceptance][online][user_agent]'] = $mandateUserAgent )
#{end}
#{if}( $StringUtils.isNotBlank($mandateAcceptedAt) )
#{set}( $macroIdealMandateReturn['mandate_data[customer_acceptance][accepted_at]'] = $mandateAcceptedAt )
#{end}
]]#
"
},
{
"field_name": "Block-Construct-Card-Mandate-Param",
"field_value_expression": "
#[[
#{set}( $macroRuntime = {} )
## normalize mandate amount
#{if}($StringUtils.isBlank($gwOptions_CardMandateAmount))
#{set}( $gwOptions_CardMandateAmount = '5000' )
#{end}
#{set}($blockInputs = [$gwOptions_CardMandateAmount, $!threeDs_currency])
#evaluate(${Block-Normalize-Amount})
#{set}( $macroRuntime['mandateAmount'] = $macroReturn )

#{set}( $macroReturn = {} )

## set mandate reference
#{if}($StringUtils.isBlank($gwOptions_CardMandateReference))
#{set}( $macroReturn['payment_method_options[card][mandate_options][reference]'] = $ZUtility.getUUID(64) )
#{else}
#{set}( $macroReturn['payment_method_options[card][mandate_options][reference]'] = $gwOptions_CardMandateReference )
#{end}
## set mandate description
#{if}($StringUtils.isNotBlank($gwOptions_CardMandateDescription))
#{set}( $macroReturn['payment_method_options[card][mandate_options][description]'] = $gwOptions_CardMandateDescription )
#{end}
## set mandate amount type
#{if}($StringUtils.isBlank($gwOptions_CardMandateAmountType))
#{set}( $macroReturn['payment_method_options[card][mandate_options][amount_type]'] = 'maximum' )
#{else}
#{set}( $macroReturn['payment_method_options[card][mandate_options][amount_type]'] = $gwOptions_CardMandateAmountType )
#{end}
## set mandate amount
#{set}( $macroReturn['payment_method_options[card][mandate_options][amount]'] = $macroRuntime['mandateAmount'] )

## set mandate start date
#{if}($StringUtils.isBlank($gwOptions_CardMandateStartDate))
#{set}( $macroRuntime['mandateStartDateEpoch'] = $ZUtility.getNowInEpochTime() )
#{else}
#{set}( $macroRuntime['mandateStartDateEpoch'] = $ZUtility.convertToEpochTime($gwOptions_CardMandateStartDate) )
#{end}
#{set}( $macroReturn['payment_method_options[card][mandate_options][start_date]'] = \"${macroRuntime.mandateStartDateEpoch}\" )
## set mandate end date
#{if}($StringUtils.isBlank($gwOptions_CardMandateEndDate))
#{set}( $macroRuntime['mandateEndDateEpoch'] = $ZUtility.addYearsToEpochTime(${macroRuntime.mandateStartDateEpoch}, 20) )
#{else}
#{set}( $macroRuntime['mandateEndDateEpoch'] = $ZUtility.convertToEpochTime($gwOptions_CardMandateEndDate) )
#{end}
#{set}( $macroReturn['payment_method_options[card][mandate_options][end_date]'] = \"${macroRuntime.mandateEndDateEpoch}\" )
## set mandate interval
#{if}($StringUtils.isBlank($gwOptions_CardMandateInterval))
#{set}( $macroRuntime['mandateInterval'] = 'sporadic' )
#{else}
#{set}( $macroRuntime['mandateInterval'] = $gwOptions_CardMandateInterval )
#{end}
#{set}( $macroReturn['payment_method_options[card][mandate_options][interval]'] = $macroRuntime['mandateInterval'] )
## set mandate interval count
#{if}(!$StringUtils.equals('sporadic', $macroRuntime['mandateInterval']))
#{if}($StringUtils.isBlank($gwOptions_CardMandateIntervalCount))
#{set}( $macroReturn['payment_method_options[card][mandate_options][interval_count]'] = '1' )
#{else}
#{set}( $macroReturn['payment_method_options[card][mandate_options][interval_count]'] = $gwOptions_CardMandateIntervalCount )
#{end}
#{end}
## set mandate supported types
#{if}($StringUtils.isNotBlank($gwOptions_CardMandateSupportedTypes))
#{set}( $macroReturn['payment_method_options[card][mandate_options][supported_types][]'] = $gwOptions_CardMandateSupportedTypes )
#{end}
]]#
"
},
{
"field_name": "Block-Construct-Card-NonRefRefundData",
"field_value_expression": "
#[[
#{set}( $macroReturn = {
'source[object]' : 'card',
'source[number]' : $!CreditCardNumber,
'source[exp_month]' : $!CreditCardExpirationMonth,
'source[exp_year]' : $!CreditCardExpirationYear
} )

## set card holder name
#{if}($StringUtils.isNotBlank($!CreditCardHolderName))
#{set}( $macroReturn['source[owner][name]'] = $!CreditCardHolderName )
#{end}

## set billing country
#{set}( $macroTwoCharCountryCode = $ZUtility.get2DigitCountryCode($!CreditCardCountry) )
#{if} ($StringUtils.isBlank($macroTwoCharCountryCode))
#{set}( $macroBillToCountry = $!CreditCardCountry )
#{else}
#{set}( $macroBillToCountry = $macroTwoCharCountryCode )
#{end}
#{if}($StringUtils.isNotBlank($macroBillToCountry))
#{set}( $macroReturn['source[owner][address][country]'] = $macroBillToCountry )
#{end}

## set billing state
#{set}( $macroTwoCharStateCode = $ZUtility.get2LetterStateCode($CreditCardCountry, $CreditCardState) )
#{if} ($StringUtils.isBlank($macroTwoCharStateCode))
#{set}( $macroBillToState = $!CreditCardState )
#{else}
#{set}( $macroBillToState = $macroTwoCharStateCode )
#{end}
#{if}($StringUtils.isNotBlank($macroBillToState))
#{set}( $macroReturn['source[owner][address][state]'] = $macroBillToState )
#{end}

## set billing city
#{if}($StringUtils.isNotBlank($CreditCardCity))
#{set}( $macroReturn['source[owner][address][city]'] = $!CreditCardCity )
#{end}

## set billing address1
#{if}($StringUtils.isNotBlank($CreditCardAddress1))
#{set}( $macroReturn['source[owner][address][line1]'] = $!CreditCardAddress1 )
#{end}

## set billing address2
#{if}($StringUtils.isNotBlank($CreditCardAddress2))
#{set}( $macroReturn['source[owner][address][line2]'] = $!CreditCardAddress2 )
#{end}

## set billing postal code
#{if}($StringUtils.isNotBlank($CreditCardPostalCode))
#{set}( $macroReturn['source[owner][address][postal_code]'] = $!CreditCardPostalCode )
#{end}

## set billing email
#{if} ($StringUtils.isNotBlank($Email))
#{set}( $macroBillToEmail = $Email )
#{elseif} ($StringUtils.isNotEmpty($DefaultBillToEmail))
#{set}( $macroBillToEmail = $DefaultBillToEmail )
#{end}
#{if} ($StringUtils.isNotBlank($macroBillToEmail))
#{set}( $macroReturn['source[owner][email]'] = $macroBillToEmail )
#{end}
#{if}($StringUtils.isNotBlank($!Phone))
#{set}( $macroReturn['source[owner][phone]'] = $!Phone )
#{end}
]]#
"
},
{
"field_name": "Block-Construct-SEPA-PaymentMethodData",
"field_value_expression": "
#[[
## set billing address line1
#{set}( $macroStreet = '' )
#{if}($StringUtils.isNotBlank($!StreetNumber))
#{set}( $macroStreet = $!StreetNumber )
#{end}
#{if}($StringUtils.isNotBlank($!StreetName))
#{set}( $macroStreet = $macroStreet + ' ' + $!StreetName )
#{end}

#{set}( $macroReturn = {
'payment_method_data[type]': 'sepa_debit',
'payment_method_data[sepa_debit][iban]': $!BankTransferAccountNumber,
'payment_method_data[billing_details][name]': $!BankTransferAccountName,
'payment_method_data[billing_details][email]': $!Email,
'payment_method_data[billing_details][address][line1]': $macroStreet.trim(),
'payment_method_data[billing_details][address][country]': $!ZUtility.get2DigitCountryCode($!Country)
} )

## set RadarSessionId
#{if}($StringUtils.isNotBlank($!RadarSessionId))
#{set}( $macroReturn['payment_method_data[radar_options][session]'] = $!RadarSessionId )
#{end}

]]#
"
},
{
"field_name": "Block-Construct-BACS-PaymentMethodData",
"field_value_expression": "
#[[
#{set}( $macroReturn = {
'payment_method_data[type]': 'bacs_debit',
'payment_method_data[bacs_debit][account_number]': $!BankTransferAccountNumber,
'payment_method_data[bacs_debit][sort_code]': $!BankCode,
'payment_method_data[billing_details][name]': $!BankTransferAccountName,
'payment_method_data[billing_details][email]': $!Email,
'payment_method_data[billing_details][address][line1]': $street.trim(),
'payment_method_data[billing_details][address][city]': $!City,
'payment_method_data[billing_details][address][country]': $!ZUtility.get2DigitCountryCode($!Country),
'payment_method_data[billing_details][address][postal_code]': $!PostalCode
} )

## set RadarSessionId
#{if}($StringUtils.isNotBlank($!RadarSessionId))
#{set}( $macroReturn['payment_method_data[radar_options][session]'] = $!RadarSessionId )
#{end}

]]#
"
},
{
"field_name": "Block-Construct-PAD-PaymentMethodData",
"field_value_expression": "
#[[
#{set}( $macroReturn = {
'payment_method_data[type]': 'acss_debit',
'payment_method_data[acss_debit][account_number]': $!BankTransferAccountNumber,
'payment_method_data[acss_debit][institution_number]': $!BankBranchCode,
'payment_method_data[acss_debit][transit_number]': $!BankCode,
'payment_method_data[billing_details][name]': $!BankTransferAccountName,
'payment_method_data[billing_details][email]': $!Email,
'payment_method_options[acss_debit][mandate_options][payment_schedule]': 'sporadic',
'payment_method_options[acss_debit][currency]': $!Currency.toLowerCase(),
'payment_method_options[acss_debit][mandate_options][transaction_type]': 'personal'
} )

## set RadarSessionId
#{if}($StringUtils.isNotBlank($!RadarSessionId))
#{set}( $macroReturn['payment_method_data[radar_options][session]'] = $!RadarSessionId )
#{end}

#if($StringUtils.equalsIgnoreCase($Feature-SkipVerificationMethod-Enabled, 'true'))
#{set}( $macroReturn['payment_method_options[acss_debit][verification_method]'] = 'skip' )
#{end}

]]#
"
},
{
"field_name": "Block-Create-Mask-Request-Map",
"field_value_expression": "
#[[
#{set}( $macroReturn = {} )
$macroReturn.putAll($blockInputs[0])

## mask credit card number
#{if}($StringUtils.isNotBlank($macroReturn['payment_method_data[card][number]']))
#{set}( $macroReturn['payment_method_data[card][number]'] = $ZUtility.maskCreditCardNumber($macroReturn['payment_method_data[card][number]']) )
#{end}

## mask credit card security code
#{if}($StringUtils.isNotBlank($macroReturn['payment_method_data[card][cvc]']))
#{set}( $macroReturn['payment_method_data[card][cvc]'] = '***' )
#{end}

## mask card number for applepay/ googlepay
#{if}($StringUtils.isNotBlank($macroReturn['payment_method_data[card][network_token][number]']))
#{set}( $macroReturn['payment_method_data[card][network_token][number]'] = $ZUtility.maskCreditCardNumber($macroReturn['payment_method_data[card][network_token][number]']) )
#{end}

## mask cryptogram
#{if}($StringUtils.isNotBlank($macroReturn['payment_method_options[card][network_token][cryptogram]']))
#{set}( $macroReturn['payment_method_options[card][network_token][cryptogram]'] = '***' )
#{end}

## mask token id
#{if}($StringUtils.isNotBlank($macroReturn['payment_method']))
#{set}( $macroReturn['payment_method'] = $ZUtility.maskTokenId($macroReturn['payment_method']) )
#{end}

## mask payment ip address
#{if}($StringUtils.isNotBlank($macroReturn['payment_method_data[ip]']))
#{set}( $macroReturn['payment_method_data[ip]'] = $ZUtility.mask($macroReturn['payment_method_data[ip]']) )
#{end}

## mask mandate ip address
#{if}($StringUtils.isNotBlank($macroReturn['mandate_data[customer_acceptance][online][ip_address]']))
#{set}( $macroReturn['mandate_data[customer_acceptance][online][ip_address]'] = $ZUtility.mask($macroReturn['mandate_data[customer_acceptance][online][ip_address]']) )
#{end}

#{if}($StringUtils.isNotBlank($macroReturn['payment_method_data[acss_debit][account_number]']))
#{set}( $macroReturn['payment_method_data[acss_debit][account_number]'] = $ZUtility.mask($macroReturn['payment_method_data[acss_debit][account_number]']) )
#{end}
]]#
"
},
{
"field_name": "Block-Create-Mask-Request-Map-CCRef",
"field_value_expression": "
#[[
#{set}( $macroReturn = {} )
$macroReturn.putAll($blockInputs[0])

## remove payment_method_data
#{if}($StringUtils.isNotBlank($macroReturn['payment_method_data[card][number]']))
#{set}( $macroReturn['payment_method_data[card][number]'] = '****************')
#{end}
#{if}($StringUtils.isNotBlank($macroReturn['payment_method_data[card][exp_year]']))
#{set}( $macroReturn['payment_method_data[card][exp_year]'] = '****')
#{end}
#{if}($StringUtils.isNotBlank($macroReturn['payment_method_data[card][cvc]']))
#{set}( $macroReturn['payment_method_data[card][cvc]'] = '****')
#{end}
#{if}($StringUtils.isNotBlank($macroReturn['payment_method_data[card][exp_month]']))
#{set}( $macroReturn['payment_method_data[card][exp_month]'] = '**')
#{end}

## remove billing_details
#{if}($StringUtils.isNotBlank($macroReturn['payment_method_data[billing_details][name]']))
#{set}( $macroReturn['payment_method_data[billing_details][name]'] = '****')
#{end}
#{if}($StringUtils.isNotBlank($macroReturn['payment_method_data[billing_details][address][country]']))
#{set}( $macroReturn['payment_method_data[billing_details][address][country]'] = '****')
#{end}
#{if}($StringUtils.isNotBlank($macroReturn['payment_method_data[billing_details][address][state]']))
#{set}( $macroReturn['payment_method_data[billing_details][address][state]'] = '****')
#{end}
#{if}($StringUtils.isNotBlank($macroReturn['payment_method_data[billing_details][address][city]']))
#{set}( $macroReturn['payment_method_data[billing_details][address][city]'] = '****')
#{end}
#{if}($StringUtils.isNotBlank($macroReturn['payment_method_data[billing_details][address][line1]']))
#{set}( $macroReturn['payment_method_data[billing_details][address][line1]'] = '****')
#{end}
#{if}($StringUtils.isNotBlank($macroReturn['payment_method_data[billing_details][address][line2]']))
#{set}( $macroReturn['payment_method_data[billing_details][address][line2]'] = '****')
#{end}
#{if}($StringUtils.isNotBlank($macroReturn['payment_method_data[billing_details][address][postal_code]']))
#{set}( $macroReturn['payment_method_data[billing_details][address][postal_code]'] = '****')
#{end}
#{if}($StringUtils.isNotBlank($macroReturn['payment_method_data[billing_details][email]']))
#{set}( $macroReturn['payment_method_data[billing_details][email]'] = '****')
#{end}

## mask token id
#{if}($StringUtils.isNotBlank($macroReturn['payment_method']))
#{set}( $macroReturn['payment_method'] = $ZUtility.maskTokenId($macroReturn['payment_method']) )
#{end}

## mask payment ip address
#{if}($StringUtils.isNotBlank($macroReturn['payment_method_data[ip]']))
#{set}( $macroReturn['payment_method_data[ip]'] = $ZUtility.mask($macroReturn['payment_method_data[ip]']) )
#{end}

## mask mandate ip address
#{if}($StringUtils.isNotBlank($macroReturn['mandate_data[customer_acceptance][online][ip_address]']))
#{set}( $macroReturn['mandate_data[customer_acceptance][online][ip_address]'] = $ZUtility.mask($macroReturn['mandate_data[customer_acceptance][online][ip_address]']) )
#{end}
]]#
"
},
{
"field_name": "Block-Add-IPAddress",
"field_value_expression": "
#[[
## grab ip address value
#{if}($StringUtils.isNotBlank($!IPAddress))
#{set}( $blockIPAddress = $!IPAddress)
#{elseif}($!EnableIPCapture && $!EnableIPCapture.equals(\"on\") && $StringUtils.isNotBlank($!browser_IpAddress))
#{set}( $blockIPAddress = $!browser_IpAddress)
#{end}

## set ip address value
#{if}($blockIPAddress && $StringUtils.isNotBlank($blockIPAddress))
#{set}( $macroReturn = {
'payment_method_data[ip]': $!blockIPAddress
} )
#{else}
#{set}( $macroReturn = {} )
#{end}
]]#
"
},
{
"field_name": "Block-Create-Mask-Request-Map-Card-NonRefRefund",
"field_value_expression": "
#[[
#{set}( $macroReturn = {} )
$macroReturn.putAll($blockInputs[0])

## mask credit card number
#{if}($StringUtils.isNotBlank($macroReturn['source[number]']))
#{set}( $macroReturn['source[number]'] = $ZUtility.maskCreditCardNumber($macroReturn['source[number]']) )
#{end}
]]#
"
},
{
"field_name": "Block-Construct-Level3-Data",
"field_value_expression": "
#[[
## check for line items
#{if}($!ContextItemList && !$!ContextItemList.isEmpty())

## create macroReturn
#{set}( $macroReturn = {
'level3[merchant_reference]' : $!PaymentNumber
} )

## set customer_reference
#{if}($StringUtils.isNotBlank($!AccountNumber))
#{set}( $macroReturn[\"level3[customer_reference]\"] = $ZUtility.restrictLength($!AccountNumber, 25) )
#{else}#{end}

## set up partial payment variables
#{set}( $Long = 0 )
#{set}( $lineItemIndex = 0 )
#{set}( $lineItemTotal = 0 )
#{set}( $creditTotal = 0 )

#{set}( $zeroDecimalCurrencyList = ['BIF', 'CLP', 'DJF', 'GNF', 'JPY', 'KMF', 'KRW', 'MGA', 'PYG', 'RWF', 'UGX', 'VND', 'VUV', 'XAF', 'XOF', 'XPF'] )

#{if}($!ContextItemList.size() >= 200)
#{set}( $over200ItemLimit = true )
#{set}( $condensedUnitCost = 0 )
#{set}( $condensedTaxAmount = 0 )
#{set}( $condensedDiscountAmount = 0 )
#{else}#{end}

## loop over line items
#{foreach}($Item in $!ContextItemList)

#{set}( $isCredit = false )
#{set}( $lineItemProration = 0 )

#{set}( $lineItemAmountWithoutTax = 0 )
#{set}( $quantity = 0 )
#{set}( $unitCost = 0 )
#{set}( $taxAmount = 0 )
#{set}( $discountAmount = 0 )

## set Long-based variables

#{if}($StringUtils.isNotBlank($Item.get(\"InvoiceDetailAmntWithoutTax\")))
#{if}($zeroDecimalCurrencyList.contains($Currency))
#{set}( $lineItemAmountWithoutTax = $ZUtility.parseStringToLong($ZUtility.round($Item.get(\"InvoiceDetailAmntWithoutTax\"), 0)) )
#{else}
#{set}( $lineItemAmountWithoutTax = $ZUtility.parseStringToLong($ZUtility.round($ZUtility.multiplyByHundred($Item.get(\"InvoiceDetailAmntWithoutTax\")), 0)) )
#{end}
#{end}

#{if}($StringUtils.isNotBlank($Item.get(\"InvoiceDetailQuantity\")))
#{set}( $quantity = $ZUtility.parseStringToLong($ZUtility.round($Item.get(\"InvoiceDetailQuantity\"), 0)) )
#{end}

#{if}($StringUtils.isNotBlank($Item.get(\"InvoiceDetailUnitCost\")))
#{if}($zeroDecimalCurrencyList.contains($Currency))
#{set}( $unitCost = $ZUtility.parseStringToLong($ZUtility.round($Item.get(\"InvoiceDetailUnitCost\"), 0)) )
#{else}
#{set}( $unitCost = $ZUtility.parseStringToLong($ZUtility.round($ZUtility.multiplyByHundred($Item.get(\"InvoiceDetailUnitCost\")), 0)) )
#{end}
#{end}

#{if}($StringUtils.isNotBlank($Item.get(\"InvoiceDetailTaxAmnt\")))
#{if}($zeroDecimalCurrencyList.contains($Currency))
#{set}( $taxAmount = $ZUtility.parseStringToLong($ZUtility.round($Item.get(\"InvoiceDetailTaxAmnt\"), 0)) )
#{else}
#{set}( $taxAmount = $ZUtility.parseStringToLong($ZUtility.round($ZUtility.multiplyByHundred($Item.get(\"InvoiceDetailTaxAmnt\")), 0)) )
#{end}
#{end}

#{if}($StringUtils.isNotBlank($Item.get(\"InvoiceDetailDiscountAmntAbs\")))
#{if}($zeroDecimalCurrencyList.contains($Currency))
#{set}( $discountAmount = $ZUtility.parseStringToLong($ZUtility.round($Item.get(\"InvoiceDetailDiscountAmntAbs\"), 0)) )
#{else}
#{set}( $discountAmount = $ZUtility.parseStringToLong($ZUtility.round($ZUtility.multiplyByHundred($Item.get(\"InvoiceDetailDiscountAmntAbs\")), 0)) )
#{end}
#{end}

## if line item is a credit
#{if}($lineItemAmountWithoutTax && ($lineItemAmountWithoutTax < 0))
#{set}( $isCredit = true )
#{set}( $creditAmount = $lineItemAmountWithoutTax )
#{if}($taxAmount)
#{set}( $creditTax = $taxAmount )
#{else}
#{set}( $creditTax = 0 )
#{end}
#{if}($discountAmount)
#{set}( $creditDiscount = $discountAmount )
#{else}
#{set}( $creditDiscount = 0 )
#{end}
#{set}( $creditTotal = $creditTotal + $creditAmount + $creditTax + $creditDiscount )
## if line item is an actual line item
#{else}
## set string-based variables

## set product_code
#{if}($StringUtils.isNotBlank($Item.get(\"RatePlanChargeProductCode\")))
#{set}( $macroReturn[\"level3[line_items][$lineItemIndex][product_code]\"] = $ZUtility.restrictLength($Item.get(\"RatePlanChargeProductCode\"), 12) )
#{else}
#{set}( $macroReturn[\"level3[line_items][$lineItemIndex][product_code]\"] = $ZUtility.restrictLength($Item.get(\"InvoiceDetailSku\"), 12) )
#{end}

## set product_description (same as product_code if blank)
#{if}($StringUtils.isNotBlank($Item.get(\"InvoiceDetailDescription\")))
#{set}( $macroReturn[\"level3[line_items][$lineItemIndex][product_description]\"] = $ZUtility.restrictLength($Item.get(\"InvoiceDetailDescription\"), 25) )
#{elseif}($StringUtils.isNotBlank($Item.get(\"InvoiceDetailSkuName\")))
#{set}( $macroReturn[\"level3[line_items][$lineItemIndex][product_description]\"] = $ZUtility.restrictLength($Item.get(\"InvoiceDetailSkuName\"), 25) )
#{elseif}($StringUtils.isNotBlank($Item.get(\"RatePlanChargeProductCode\")))
#{set}( $macroReturn[\"level3[line_items][$lineItemIndex][product_description]\"] = $ZUtility.restrictLength($Item.get(\"RatePlanChargeProductCode\"), 25) )
#{else}
#{set}( $macroReturn[\"level3[line_items][$lineItemIndex][product_description]\"] = $ZUtility.restrictLength($Item.get(\"InvoiceDetailSku\"), 25) )
#{end}

## set quantity
#{if}($StringUtils.isNotBlank($Item.get(\"InvoiceDetailQuantity\")))
#{set}( $lineItemQuantity = $ZUtility.parseStringToLong($ZUtility.round($Item.get(\"InvoiceDetailQuantity\"), 0)) )
#{set}( $macroReturn[\"level3[line_items][$lineItemIndex][quantity]\"] = $ZUtility.round($Item.get(\"InvoiceDetailQuantity\"), 0) )
#{else}#{end}

## set unit_cost
#{if}($unitCost && $quantity && ($quantity > 1))
#{set}( $lineItemUnitCost = $unitCost )
#{set}( $macroReturn[\"level3[line_items][$lineItemIndex][unit_cost]\"] = $ZUtility.round($ZUtility.toDecimal(\"$unitCost\").abs().toString(), 0) )
#{elseif}($lineItemAmountWithoutTax)
#{set}( $lineItemUnitCost = $lineItemAmountWithoutTax )
#{set}( $macroReturn[\"level3[line_items][$lineItemIndex][unit_cost]\"] = $ZUtility.round($ZUtility.toDecimal(\"$lineItemAmountWithoutTax\").abs().toString(), 0) )
#{else}#{end}

## COLSUS-85
#{if}($zeroDecimalCurrencyList.contains($Currency))
#{set}( $amountWithoutTax = $ZUtility.parseStringToLong($Item.get(\"InvoiceDetailAmntWithoutTax\")) )
#{if}( $lineItemQuantity * $Item.get(\"InvoiceDetailUnitCost\") != $amountWithoutTax)
#{set}( $macroReturn[\"level3[line_items][$lineItemIndex][quantity]\"] = \"1\" )
#{set}( $macroReturn[\"level3[line_items][$lineItemIndex][unit_cost]\"] = \"$amountWithoutTax\" )
#{end}
#{else}
#{set}( $amountWithoutTax = $ZUtility.parseStringToLong($ZUtility.multiplyByHundred($Item.get(\"InvoiceDetailAmntWithoutTax\"))) )
#{if}( $lineItemQuantity * $unitCost != $amountWithoutTax)
#{set}( $macroReturn[\"level3[line_items][$lineItemIndex][quantity]\"] = \"1\" )
#{set}( $macroReturn[\"level3[line_items][$lineItemIndex][unit_cost]\"] = \"$amountWithoutTax\" )
#{end}
#{end}

## set tax_amount
#{if}($taxAmount)
#{set}( $lineItemTaxAmount = $taxAmount )
#{set}( $macroReturn[\"level3[line_items][$lineItemIndex][tax_amount]\"] = $ZUtility.round($ZUtility.toDecimal(\"$taxAmount\").abs().toString(), 0) )
#{else}#{end}

## set discount_amount
#{if}($discountAmount)
#{if}($lineItemProration != 0)
#{set}( $discountAmount = $discountAmount - $ZUtility.parseStringToLong($ZUtility.round($ZUtility.toDecimal(\"$lineItemProration\").abs().toString(), 0)) )
#{else}#{end}
#{set}( $lineItemDiscountAmount = $discountAmount )
#{set}( $macroReturn[\"level3[line_items][$lineItemIndex][discount_amount]\"] = \"$lineItemDiscountAmount\" )
#{else}
#{end}

## increment partial payment variables
#{if}($isCredit == false)
#{set}( $lineItemIndex = $lineItemIndex + 1 )
#{set}( $lineItemTotal = $lineItemTotal + $lineItemAmountWithoutTax + $lineItemTaxAmount - $lineItemDiscountAmount) )
#{else}#{end}
#{end}

## increment condensed variables
#{if}($over200ItemLimit)
#{set}( $condensedUnitCost = $condensedUnitCost + $lineItemAmountWithoutTax )
#{set}( $condensedTaxAmount = $condensedTaxAmount + $lineItemTaxAmount )
#{set}( $condensedDiscountAmount = $condensedDiscountAmount + $lineItemDiscountAmount )
#{else}#{end}
#{end}

## reset values for 200+ line item request
#{if}($over200ItemLimit)
## create macroReturn
#{set}( $macroReturn = {
'level3[merchant_reference]' : $!PaymentNumber
} )

## set customer_reference
#{if}($StringUtils.isNotBlank($!AccountNumber))
#{set}( $macroReturn[\"level3[customer_reference]\"] = $ZUtility.restrictLength($!AccountNumber, 25) )
#{else}#{end}

## set condensed values
#{set}( $macroReturn[\"metadata[level_three_error]\"] = \"Invoice item list exceeded two hundred items\" )
#{set}( $macroReturn[\"level3[line_items][0][product_code]\"] = \"Compacted L3\" )
#{set}( $macroReturn[\"level3[line_items][0][product_description]\"] = \"Compacted L3 itemization\" )
#{set}( $macroReturn[\"level3[line_items][0][unit_cost]\"] = \"$condensedUnitCost\" )
#{set}( $macroReturn[\"level3[line_items][0][quantity]\"] = \"1\" )
#{set}( $macroReturn[\"level3[line_items][0][tax_amount]\"] = \"$condensedTaxAmount\" )
#{set}( $macroReturn[\"level3[line_items][0][discount_amount]\"] = \"$condensedDiscountAmount\" )
#{set}( $lineItemIndex = 1 )
#{else}#{end}

## create credit proration item
#{if}($creditTotal < 0)
#{set}( $creditTotal = $ZUtility.parseStringToLong($ZUtility.round($ZUtility.toDecimal(\"$creditTotal\").abs().toString(), 0)) )
#{set}( $macroReturn[\"level3[line_items][$lineItemIndex][product_code]\"] = \"Credit\" )
#{set}( $macroReturn[\"level3[line_items][$lineItemIndex][product_description]\"] = \"Proration credit\" )
#{set}( $macroReturn[\"level3[line_items][$lineItemIndex][unit_cost]\"] = \"0\" )
#{set}( $macroReturn[\"level3[line_items][$lineItemIndex][quantity]\"] = \"1\" )
#{set}( $macroReturn[\"level3[line_items][$lineItemIndex][tax_amount]\"] = \"0\" )
#{set}( $macroReturn[\"level3[line_items][$lineItemIndex][discount_amount]\"] = \"$creditTotal\" )
#{set}( $lineItemIndex = $lineItemIndex + 1 )
#{else}#{end}

## check if partial payment
#{if}($zeroDecimalCurrencyList.contains($Currency))
#{set}($adjustedPaymentAmount = $ZUtility.parseStringToLong($PaymentAmount) )
#{else}
#{set}($adjustedPaymentAmount = $ZUtility.parseStringToLong($ZUtility.multiplyByHundred($PaymentAmount)) )
#{end}
#{set}( $partialPaymentAmount = $lineItemTotal - $creditTotal - $adjustedPaymentAmount )
#{if}( $partialPaymentAmount > 0 )
#{set}( $macroReturn[\"level3[line_items][$lineItemIndex][product_code]\"] = \"Partial\" )
#{set}( $macroReturn[\"level3[line_items][$lineItemIndex][product_description]\"] = \"Partial payment difference\" )
#{set}( $macroReturn[\"level3[line_items][$lineItemIndex][unit_cost]\"] = \"0\" )
#{set}( $macroReturn[\"level3[line_items][$lineItemIndex][quantity]\"] = \"1\" )
#{set}( $macroReturn[\"level3[line_items][$lineItemIndex][tax_amount]\"] = \"0\" )
#{set}( $macroReturn[\"level3[line_items][$lineItemIndex][discount_amount]\"] = \"$partialPaymentAmount\" )
#{elseif}( $partialPaymentAmount < 0 )
#{set}( $macroReturn[\"level3[line_items][$lineItemIndex][product_code]\"] = \"Overpayment\" )
#{set}( $macroReturn[\"level3[line_items][$lineItemIndex][product_description]\"] = \"Overpayment difference\" )
#{set}( $macroReturn[\"level3[line_items][$lineItemIndex][unit_cost]\"] = $ZUtility.round($ZUtility.toDecimal(\"$partialPaymentAmount\").abs().toString(), 0) )
#{set}( $macroReturn[\"level3[line_items][$lineItemIndex][quantity]\"] = \"1\" )
#{set}( $macroReturn[\"level3[line_items][$lineItemIndex][tax_amount]\"] = \"0\" )
#{set}( $macroReturn[\"level3[line_items][$lineItemIndex][discount_amount]\"] = \"0\" )
#{else}#{end}
#{else}
#{set}( $macroReturn = {} )
#{end}
]]#
"
},
{
"field_name": "Feature-IgnoreMandateIdInPaymentRunAboveINR15K-Enabled",
"field_value_expression": "$StringUtils.defaultIfBlank(${Feature-IgnoreMandateIdInPaymentRunAboveINR15K-Enabled}, 'false')"
},
{
"field_name": "CustomInvoiceField",
"field_value_expression": "$StringUtils.defaultIfBlank(${Feature-CustomInvoiceField-Value}, 'invoice_number')"
}
],
"attributes": [
{
"display_order": 1,
"name": "SecretKey",
"tip_label": "PaymentGateway.Stripe.SecretKey.tipLabel",
"file_suffix": null,
"gw_block_type": "Credential",
"picklist_label_values": null,
"label": "PaymentGateway.Stripe.SecretKey.label",
"hidden": false,
"is_required": false,
"read_only": true,
"need_encryption": true,
"default_value": null,
"tip_description": "PaymentGateway.Stripe.SecretKey.tipDescription",
"system_config_key": null,
"max_field_length": 256,
"min_field_length": -1,
"gw_field_type": "Text",
"data_source": null
},
{
"display_order": 2,
"name": "PublishableKey",
"tip_label": "PaymentGateway.Stripe.PublishableKey.tipLabel",
"file_suffix": null,
"gw_block_type": "Credential",
"picklist_label_values": null,
"label": "PaymentGateway.Stripe.PublishableKey.label",
"hidden": false,
"is_required": false,
"read_only": true,
"need_encryption": false,
"default_value": null,
"tip_description": "PaymentGateway.Stripe.PublishableKey.tipDescription",
"system_config_key": null,
"max_field_length": 256,
"min_field_length": -1,
"gw_field_type": "Text",
"data_source": null
},
{
"display_order": 3,
"name": "OAuth2Token",
"label": "PaymentGateway.Stripe.OAuthToken.label",
"gw_field_type": "DropDown",
"gw_block_type": "Credential",
"tip_label": "PaymentGateway.Stripe.OAuthToken.tipLabel",
"tip_description": "PaymentGateway.Stripe.OAuthToken.tipDescription",
"hidden": false,
"is_required": true,
"need_encryption": false,
"gw_data_source":"OAuth2Token"
},
{
"display_order": 4,
"name": "EnableL3",
"tip_label": "PaymentGateway.Stripe.tipLabel",
"file_suffix": null,
"gw_block_type": "Rules",
"picklist_label_values": null,
"label": "PaymentGateway.Stripe.EnableL3.label",
"hidden": false,
"is_required": false,
"need_encryption": false,
"default_value": null,
"tip_description": "PaymentGateway.Stripe.EnableL3.tipDescription",
"system_config_key": null,
"max_field_length": null,
"min_field_length": null,
"gw_field_type": "CheckBox",
"data_source": null
},
{
"display_order": 5,
"name": "L3Downgrade",
"tip_label": "PaymentGateway.Stripe.tipLabel",
"file_suffix": null,
"gw_block_type": "Rules",
"picklist_label_values": null,
"label": "Downgrade failed L3 payment attempts",
"hidden": false,
"is_required": false,
"need_encryption": false,
"default_value": null,
"tip_description": "When L3 processing is enabled and L3 downgrading is enabled, if the payment attempt fails with L3 data, an immediate payment attempt will be made without the L3 data.",
"system_config_key": null,
"max_field_length": null,
"min_field_length": null,
"gw_field_type": "CheckBox",
"data_source": null
},
{
"display_order": 6,
"name": "CustomFieldProductCode",
"tip_label": "PaymentGateway.Stripe.tipLabel",
"file_suffix": null,
"gw_block_type": "Rules",
"picklist_label_values": null,
"label": "PaymentGateway.Stripe.CustomFieldProductCode.label",
"hidden": false,
"is_required": false,
"need_encryption": false,
"is_custom_attribute": true,
"custom_object": "RatePlanComponent",
"context_field_name": "RatePlanChargeProductCode",
"default_value": null,
"tip_description": "PaymentGateway.Stripe.CustomFieldProductCode.tipDescription",
"system_config_key": null,
"max_field_length": 255,
"min_field_length": 0,
"gw_field_type": "Text",
"data_source": null
},
{
"display_order": 7,
"name": "EnableIPCapture",
"tip_label": "PaymentGateway.Stripe.tipLabel",
"file_suffix": null,
"gw_block_type": "Rules",
"picklist_label_values": null,
"label": "PaymentGateway.EnableIPCapture.label",
"hidden": false,
"is_required": false,
"need_encryption": false,
"default_value": null,
"tip_description": "PaymentGateway.EnableIPCapture.tipDescription",
"system_config_key": null,
"max_field_length": null,
"min_field_length": null,
"gw_field_type": "CheckBox",
"data_source": null
},
{
"display_order": 8,
"name": "DisableRadarRules",
"tip_label": "PaymentGateway.Stripe.tipLabel",
"file_suffix": null,
"gw_block_type": "Rules",
"picklist_label_values": null,
"label": "PaymentGateway.Stripe.DisableRadarRules.label",
"hidden": false,
"is_required": false,
"need_encryption": false,
"default_value": null,
"tip_description": "PaymentGateway.Stripe.DisableRadarRules.tipDescription",
"system_config_key": null,
"max_field_length": null,
"min_field_length": null,
"gw_field_type": "CheckBox",
"data_source": null
},
{
"display_order": 9,
"name": "allow_additional_metadata",
"tip_label": null,
"file_suffix": null,
"gw_block_type": "Metadata",
"picklist_label_values": null,
"label": null,
"hidden": true,
"is_required": false,
"need_encryption": false,
"default_value": "49,40,500",
"tip_description": "",
"system_config_key": null,
"max_field_length": null,
"min_field_length": null,
"gw_field_type": "Text",
"data_source": null
},
{
"display_order": 10,
"name": "PaymentDescription",
"tip_label": "PaymentGateway.Stripe.tipLabel",
"file_suffix": null,
"gw_block_type": "Rules",
"picklist_label_values": null,
"label": "PaymentGateway.Stripe.PaymentDescription.label",
"hidden": false,
"is_required": false,
"need_encryption": false,
"default_value": null,
"tip_description": "PaymentGateway.Stripe.PaymentDescription.tipDescription",
"system_config_key": null,
"max_field_length": 1000,
"min_field_length": 0,
"gw_field_type": "Text",
"data_source": null
}
],
"operations": [
{
"payment_method_type": "CreditCard",
"operation_type": "Validate",
"transactions": [
{
"transaction_name": "checkIfItIsNetworkToken",
"transaction_type": "InternalProcessing",
"connector_type": "Test",
"transaction_request_fields": [
{
"temporary": true,
"field_name": "isApplePay",
"field_value_expression": "#{if}($StringUtils.startsWith($CreditCardType, 'Apple'))true#{else}false#{end}"
},
{
"temporary": true,
"field_name": "isGooglePay",
"field_value_expression": "#{if}($StringUtils.startsWith($CreditCardType, 'Google'))true#{else}false#{end}"
}
],
"request_to_log": "Check isApplePay or isGooglePay",
"transaction_response_fields": [],
"response_fsm_event_expression": "#{if}($StringUtils.equals($isApplePay, 'true') || ($StringUtils.equals($isGooglePay, 'true') && $StringUtils.equalsIgnoreCase($gwOptions_googlePayAuthMethod, 'CRYPTOGRAM_3DS')))Success#{else}Error#{end}"
},
{
"transaction_name":"isStandaloneAuthCheck",
"transaction_type":"InternalProcessing",
"connector_type":"Test",
"transaction_request_fields": [],
"request_to_log":"StandaloneAuth = $!StandaloneAuth and DefaultAuthAmount= $!DefaultAuthAmount",
"transaction_response_fields": [],
"response_fsm_event_expression": "#{if}($StringUtils.equalsIgnoreCase($StandaloneAuth, 'true'))Success#{else}Error#{end}"
},
{
"transaction_name": "CreateAndConfirmSetupIntent",
"connector_type": "HTTPs",
"transaction_request_fields": [
{
"temporary": true,
"field_name": "_",
"field_value_expression": "
## The SetupIntent Request Map
#{set}( $setupIntentRequestMap = {
'usage' : 'off_session',
'confirm' : 'true',
'expand[]' : 'latest_attempt'
} )

## construct card payment method data
#evaluate(${Block-Construct-Card-PaymentMethodData})
$setupIntentRequestMap.putAll($macroReturn)

## set moto flag
#{if}($StringUtils.equals($ZuoraECommerceIndicator, 'MOTO'))
#{set}( $setupIntentRequestMap['payment_method_options[card][moto]'] = 'true' )
#{end}

#evaluate(${Block-Add-IPAddress})
#{if}(!$macroReturn.isEmpty())
$setupIntentRequestMap.putAll($macroReturn)
#{else}#{end}

#evaluate(${Block-Payment-Metadata})
$setupIntentRequestMap.putAll($macroMetadataReturn)

#{set}( $requestBody = $ZUtility.encodeUrlParameters($setupIntentRequestMap) )

#{set}($blockInputs = [$setupIntentRequestMap])
#evaluate(${Block-Create-Mask-Request-Map})
#{set}( $maskedRequestBody = $ZUtility.encodeUrlParameters($macroReturn) )
"
},
{
"field_name": "URL",
"field_value_expression": "https://api.stripe.com/v1/setup_intents"
},
{
"field_name": "METHOD",
"field_value_expression": "POST"
},
{
"field_name": "Authorization",
"field_value_expression": "${Header-Authorization}"
},
{
"field_name": "Content-Type",
"field_value_expression": "${Header-Content-Type}"
},
{
"field_name": "Stripe-Version",
"field_value_expression": "${Header-Stripe-Version}"
},
{
"field_name": "REQUEST_BODY",
"field_value_expression": "${requestBody}"
}
],
"request_to_log": "Request = [${maskedRequestBody}; URL = $!URL]",
"transaction_response_fields": [
{
"field_name": "_",
"field_value_expression": "
## Create masked response body
#{if} (!$StringUtils.equals($last_status_code, '200'))
#{set}( $maskedResponseBody = $last_message_body )
#{else}
## mask message body
#{set}( $maskedResponseBody = $last_message_body )
#{end}

#{if} (!$StringUtils.equals($last_status_code, '200'))
#{set}($blockInputs = [$last_message_body, $last_status_code])
#evaluate(${Block-Error-Handler})
#{stop}
#{else}
#{set}( $gatewayResponseCode = '200' )
#{set}( $gatewayResponseMessage = 'Approved' )
#{end}

## Parse Response JSON Document
#{set}( $createSiResponseDoc = $ZUtility.parseJsonDocument($last_message_body) )

#{set}( $setupIntentId = $createSiResponseDoc.valueOf('/JsonRoot/id') )
#{set}( $setupIntentClientSecret = $createSiResponseDoc.valueOf('/JsonRoot/client_secret') )
#{set}( $setupIntentNextActionType = $createSiResponseDoc.valueOf('/JsonRoot/next_action/type') )
#{set}( $setupIntentStatus = $createSiResponseDoc.valueOf('/JsonRoot/status') )

#{set}( $dsTransactionId = $createSiResponseDoc.valueOf('//latest_attempt/payment_method_details/card/ds_transaction_id') )
#{set}( $networkTransactionId = $createSiResponseDoc.valueOf('//latest_attempt/payment_method_details/card/network_transaction_id') )

#{if} ($StringUtils.equals($setupIntentStatus, 'succeeded'))
#{set}( $zuoraResponseCode = 'Approved' )
#{elseif}($StringUtils.equals($setupIntentStatus, 'requires_action'))
#{set}( $zuoraResponseCode = 'Failed' )

## Simulate a gateway error code when authentication is required.
#{set}( $gatewayResponseCode = '402' )
#{set}( $gatewayResponseMessage = '[card_error/authentication_required/authentication_required] Your card was declined. This transaction requires authentication.' )
#{else}
#{set}( $zuoraResponseCode = 'Failed' )
#{set}( $gatewayResponseCode = '402' )
#{set}( $gatewayResponseMessage = 'Unexpected status from gateway.' )
#{end}

#{set}( $threeDS2DataMap = {
'setupIntentId' : $setupIntentId,
'setupIntentStatus' : $setupIntentStatus,
'setupIntentClientSecret' : $setupIntentClientSecret,
'setupIntentNextActionType' : $setupIntentNextActionType
} )

## encode 3DS2 data map
#{set}( $threeDS2ResponseData = $ZUtility.encodeUrlParameters($threeDS2DataMap) )
"
},
{
"in_transaction_log": "true",
"field_name": "ResponseBody",
"field_value_expression": "$maskedResponseBody"
},
{
"in_transaction_log": "true",
"field_name": "ResponseCode",
"field_value_expression": "$last_status_code"
}
],
"response_fsm_event_expression": "Success"
},
{
"transaction_name": "CreateAndConfirmPaymentIntent",
"connector_type": "HTTPs",
"transaction_request_fields": [
{
"temporary": true,
"field_name": "_",
"field_value_expression": "
## The PaymentIntent Request Map
#{set}( $paymentIntentRequestMap = {
'confirm' : 'true',
'setup_future_usage' : 'off_session'
} )

#{set}($blockInputs = [$DefaultAuthAmount, $Currency])
#evaluate(${Block-Normalize-Amount})
#{set}( $paymentIntentRequestMap['amount'] = $macroReturn )
#{set}( $paymentIntentRequestMap['currency'] = $!Currency )
#{if}( $StringUtils.isNotBlank($!PaymentDescription) )
#{set}( $paymentIntentRequestMap['description'] = $!PaymentDescription )
#{end}
#{set}( $paymentIntentRequestMap['capture_method'] = 'manual' )
## set ECI
#{if}($StringUtils.isNotBlank($!gwOptions_electronicCommerceIndicator))
#{set}( $paymentIntentRequestMap['payment_method_options[card][network_token][electronic_commerce_indicator]'] = $StringUtils.leftPad($!gwOptions_electronicCommerceIndicator,2,'0' ))
#{end}
#evaluate(${Block-Construct-Card-ApplePayOrGooglePayData})
$paymentIntentRequestMap.putAll($macroReturn)

#{set}( $requestBody = $ZUtility.encodeUrlParameters($paymentIntentRequestMap) )

#{set}($blockInputs = [$paymentIntentRequestMap])
#evaluate(${Block-Create-Mask-Request-Map})
#{set}( $maskedRequestBody = $ZUtility.encodeUrlParameters($macroReturn) )
"
},
{
"field_name": "URL",
"field_value_expression": "https://api.stripe.com/v1/payment_intents"
},
{
"field_name": "METHOD",
"field_value_expression": "POST"
},
{
"field_name": "Authorization",
"field_value_expression": "${Header-Authorization}"
},
{
"field_name": "Content-Type",
"field_value_expression": "${Header-Content-Type}"
},
{
"field_name": "Stripe-Version",
"field_value_expression": "${Header-Stripe-Version}"
},
{
"field_name": "REQUEST_BODY",
"field_value_expression": "${requestBody}"
}
],
"request_to_log": "Request = [${maskedRequestBody}; URL = $!URL]",
"transaction_response_fields": [
{
"field_name": "_",
"field_value_expression": "
## Create masked response body
#{if} (!$StringUtils.equals($last_status_code, '200'))
#{set}( $maskedResponseBody = $last_message_body )
#{else}
## mask message body
#{set}( $maskedResponseBody = $last_message_body )
#{end}

#{if} (!$StringUtils.equals($last_status_code, '200'))
#{set}($blockInputs = [$last_message_body, $last_status_code])
#evaluate(${Block-Error-Handler})
#{stop}
#{else}
#{set}( $gatewayResponseCode = '200' )
#{set}( $gatewayResponseMessage = 'Approved' )
#{end}

## Parse Response JSON Document
#{set}( $createPiResponseDoc = $ZUtility.parseJsonDocument($last_message_body) )

#{set}( $paymentIntentId = $createPiResponseDoc.valueOf('/JsonRoot/id') )
#{set}( $paymentIntentStatus = $createPiResponseDoc.valueOf('/JsonRoot/status') )
#{set}( $paymentIntentNextAction = $createPiResponseDoc.valueOf('/JsonRoot/next_action/type') )
#{set}( $paymentMethodId = $createPiResponseDoc.valueOf('/JsonRoot/payment_method') )
#{set}( $networkTransactionId = $createPiResponseDoc.valueOf('//charges/data/ArrayItem[1]/payment_method_details/card/network_transaction_id') )

## read data from first charge object
#{set}( $setupIntentId = $paymentMethodId )

#{if} ($StringUtils.equals($paymentIntentStatus, 'requires_capture'))
#{set}( $zuoraResponseCode = 'Approved' )
#{else}
#{set}( $zuoraResponseCode = 'Failed' )
#{end}
"
},
{
"in_transaction_log": "true",
"field_name": "ResponseBody",
"field_value_expression": "$maskedResponseBody"
},
{
"in_transaction_log": "true",
"field_name": "ResponseCode",
"field_value_expression": "$last_status_code"
}
],
"response_fsm_event_expression": "#{if}($StringUtils.equals($zuoraResponseCode,'Approved'))Success#{else}Error#{end}"
},
{
"transaction_name": "Void",
"connector_type": "HTTPs",
"transaction_request_fields": [
{
"field_name": "URL",
"field_value_expression": "https://api.stripe.com/v1/payment_intents/$paymentIntentId/cancel"
},
{
"field_name": "METHOD",
"field_value_expression": "POST"
},
{
"field_name": "Authorization",
"field_value_expression": "${Header-Authorization}"
},
{
"field_name": "Content-Type",
"field_value_expression": "${Header-Content-Type}"
},
{
"field_name": "Stripe-Version",
"field_value_expression": "${Header-Stripe-Version}"
},
{
"field_name": "REQUEST_BODY",
"field_value_expression": ""
}
],
"request_to_log": "Void URL = $!URL]",
"transaction_response_fields": [
{
"field_name": "_",
"field_value_expression": "
## Create masked response body
#{if} (!$StringUtils.equals($last_status_code, '200'))
#{set}( $maskedResponseBody = $last_message_body )
#{else}
## mask message body
#{set}( $maskedResponseBody = $last_message_body )
#{end}

#{if} (!$StringUtils.equals($last_status_code, '200'))
#{set}($blockInputs = [$last_message_body, $last_status_code])
#evaluate(${Block-Error-Handler})
#{stop}
#{else}
#{set}( $gatewayResponseCode = '200' )
#{set}( $gatewayResponseMessage = 'Approved' )
#{end}

## Parse Response JSON Document
#{set}( $createPiResponseDoc = $ZUtility.parseJsonDocument($last_message_body) )

#{set}( $paymentIntentId = $createPiResponseDoc.valueOf('/JsonRoot/id') )
#{set}( $paymentIntentStatus = $createPiResponseDoc.valueOf('/JsonRoot/status') )

#{if} ($StringUtils.equals($paymentIntentStatus, 'canceled'))
#{set}( $zuoraResponseCode = 'Approved' )
#{else}
#{set}( $zuoraResponseCode = 'Failed' )
#{end}
"
},
{
"in_transaction_log": "true",
"field_name": "ResponseBody",
"field_value_expression": "$maskedResponseBody"
},
{
"in_transaction_log": "true",
"field_name": "ResponseCode",
"field_value_expression": "$last_status_code"
}
],
"response_fsm_event_expression": "#{if}($StringUtils.equals($zuoraResponseCode,'Approved'))Success#{else}Error#{end}"
}
],
"operation_states": [
{
"start_state": "BEGIN",
"transaction_event": "",
"end_state": "checkIfItIsNetworkToken"
},
{
"start_state": "checkIfItIsNetworkToken",
"transaction_event": "Error",
"end_state": "CreateAndConfirmSetupIntent"
},
{
"start_state": "checkIfItIsNetworkToken",
"transaction_event": "Success",
"end_state": "CreateAndConfirmPaymentIntent"
},
{
"start_state": "CreateAndConfirmPaymentIntent",
"transaction_event": "Success",
"end_state": "isStandaloneAuthCheck"
},
{
"start_state":"isStandaloneAuthCheck",
"transaction_event":"Success",
"end_state":"END"
},
{
"start_state":"isStandaloneAuthCheck",
"transaction_event":"Error",
"end_state":"Void"
}
],
"operation_response_fields": [
{
"field_name": "ZuoraResponseCode",
"field_value_expression": "$!zuoraResponseCode"
},
{
"field_name": "GatewayResponseCode",
"field_value_expression": "$!gatewayResponseCode"
},
{
"field_name": "GatewayResponseMessage",
"field_value_expression": "$!gatewayResponseMessage"
},
{
"field_name": "GatewayReferenceId",
"field_value_expression": "$!setupIntentId"
},
{
"field_name":"AuthTransactionId",
"field_value_expression":"#{if}($StringUtils.equalsIgnoreCase($StandaloneAuth, 'true'))$!paymentIntentId#{else}#{end}"
},
{
"field_name": "MITReceivedTXID",
"field_value_expression": "$!networkTransactionId"
},
{
"field_name": "MITReceivedToken1",
"field_value_expression": "$!dsTransactionId"
}
]
},
{
"payment_method_type": "CreditCard",
"operation_type": "Authorize",
"support_idempotent_retry": true,
"transactions": [
{
"transaction_name": "auth",
"connector_type": "HTTPs",
"transaction_request_fields": [
{
"temporary": true,
"field_name":"isApplePayOrGooglePay",
"field_value_expression":"#{if}($StringUtils.containsAny($CreditCardType,'Apple','Google'))Yes#{else}No#{end}"
},
{
"temporary": true,
"field_name": "_",
"field_value_expression": "
## The PaymentIntent Request Map
#{set}( $paymentIntentRequestMap = {
'confirm' : 'true'
} )

#{set}($blockInputs = [$DefaultAuthAmount, $Currency])
#evaluate(${Block-Normalize-Amount})
#{set}( $paymentIntentRequestMap['amount'] = $macroReturn )
#{set}( $paymentIntentRequestMap['currency'] = $!Currency )
#{if}( $StringUtils.isNotBlank($!PaymentDescription) )
#{set}( $paymentIntentRequestMap['description'] = $!PaymentDescription )
#{end}
#{set}( $paymentIntentRequestMap['capture_method'] = 'manual' )

#evaluate(${Block-Construct-Card-PaymentMethodData})
$paymentIntentRequestMap.putAll($macroReturn)

## set moto flag
#{if}($StringUtils.equals($ZuoraECommerceIndicator, 'MOTO'))
#{set}( $paymentIntentRequestMap['payment_method_options[card][moto]'] = 'true' )
#{else}
#{if}($StringUtils.equalsIgnoreCase($Feature-AuthNtiSupport-Enabled, 'true'))
#{if}($StringUtils.equals($MITMessageType, 'Recurring') && $StringUtils.equals($MITInitiatedBy, 'Merchant')
&& $StringUtils.equals($MITIsStoredCredential, 'Yes'))
#{if}($StringUtils.equals($!isApplePayOrGooglePay, 'Yes'))
#{set}( $paymentIntentRequestMap['off_session'] = 'true' )
#{else}
#{set}( $paymentIntentRequestMap['off_session'] = 'recurring' )
#{end}
#{if}($StringUtils.isNotBlank($MITSubmittedTXID))
#{set}( $paymentIntentRequestMap['payment_method_options[card][mit_exemption][network_transaction_id]'] = $MITSubmittedTXID )
#{set}( $paymentIntentRequestMap['payment_method_options[card][mit_exemption][ds_transaction_id]'] = $StringUtils.defaultIfBlank($MITSubmittedToken1, 'null') )
#{end}
#{elseif}($StringUtils.equals($MITMessageType, 'Recurring') && $StringUtils.equals($MITInitiatedBy, 'Merchant')
&& $StringUtils.equals($MITIsStoredCredential, 'No') && $StringUtils.equals($MITMigrateLegacyPM, 'Yes'))
#{set}( $paymentIntentRequestMap['off_session'] = 'recurring' )
#{set}( $paymentIntentRequestMap['payment_method_options[card][mit_exemption][claim_without_transaction_id]'] = 'true' )
#{else}
#{if}($StringUtils.equals($!isApplePayOrGooglePay, 'Yes'))
#{set}( $paymentIntentRequestMap['off_session'] = 'true' )
#{else}
#{set}( $paymentIntentRequestMap['off_session'] = 'recurring' )
#{end}
## only send grandfathring flag when CIT/MIT is supported by gateway.
#{if}($StringUtils.isNotBlank($MITSupportBrand))
#{set}( $paymentIntentRequestMap['payment_method_options[card][mit_exemption][claim_without_transaction_id]'] = 'true' )
#{end}
#{end}
#{end}
#{end}

#{if} ($StringUtils.isNotBlank($AuthorizeSoftDescriptor))
#{set}($paymentIntentRequestMap['statement_descriptor_suffix'] = $ZUtility.truncateMaxLength($AuthorizeSoftDescriptor, '22'))
#{end}

#{set}( $requestBody = $ZUtility.encodeUrlParameters($paymentIntentRequestMap) )

#{set}($blockInputs = [$paymentIntentRequestMap])
#evaluate(${Block-Create-Mask-Request-Map})
#{set}( $maskedRequestBody = $ZUtility.encodeUrlParameters($macroReturn) )
"
},
{
"field_name": "URL",
"field_value_expression": "https://api.stripe.com/v1/payment_intents"
},
{
"field_name": "METHOD",
"field_value_expression": "POST"
},
{
"field_name": "Authorization",
"field_value_expression": "${Header-Authorization}"
},
{
"field_name": "Content-Type",
"field_value_expression": "${Header-Content-Type}"
},
{
"field_name": "Stripe-Version",
"field_value_expression": "${Header-Stripe-Version}"
},
{
"field_name": "REQUEST_BODY",
"field_value_expression": "${requestBody}"
},
{
"field_name": "Retry-Enabled",
"field_value_expression": "Yes"
},
{
"field_name": "Idempotency-Key",
"field_value_expression": "#{if}($StringUtils.isNotBlank(${Framework-Idempotency-Key}))${Framework-Idempotency-Key}#{else}$ZUtility.getUUID(255)#{end}"
}
],
"request_to_log": "Idempotency-Key=$!{Idempotency-Key},Request = [${maskedRequestBody}; URL = $!URL]",
"transaction_response_fields": [
{
"field_name": "_",
"field_value_expression": "
## Create masked response body
#{if} (!$StringUtils.equals($last_status_code, '200'))
#{set}( $maskedResponseBody = $last_message_body )
#{else}
## mask message body
#{set}( $maskedResponseBody = $last_message_body )
#{end}

#{if} (!$StringUtils.equals($last_status_code, '200'))
#{set}($blockInputs = [$last_message_body, $last_status_code])
#evaluate(${Block-Error-Handler})
#{stop}
#{else}
#{set}( $gatewayResponseCode = '200' )
#{set}( $gatewayResponseMessage = 'Approved' )
#{end}

## Parse Response JSON Document
#{set}( $createPiResponseDoc = $ZUtility.parseJsonDocument($last_message_body) )

#{set}( $paymentIntentId = $createPiResponseDoc.valueOf('/JsonRoot/id') )
#{set}( $paymentIntentStatus = $createPiResponseDoc.valueOf('/JsonRoot/status') )
#{set}( $paymentIntentNextAction = $createPiResponseDoc.valueOf('/JsonRoot/next_action/type') )

## read data from first charge object
#{set}( $gatewayReferenceId = $paymentIntentId )

#{if} ($StringUtils.equals($paymentIntentStatus, 'requires_capture'))
#{set}( $zuoraResponseCode = 'Approved' )
#{elseif}($StringUtils.equals($paymentIntentStatus, 'requires_action'))
#{set}( $zuoraResponseCode = 'Failed' )

## Simulate a gateway error code when authentication is required.
## 402	Request Failed	The parameters were valid but the request failed.
#{set}( $gatewayResponseCode = '402' )
#{set}( $gatewayResponseMessage = '[card_error/authentication_required/authentication_required] Your card was declined. This transaction requires authentication.' )
#{else}
#{set}( $zuoraResponseCode = 'Failed' )
#{end}
"
},
{
"in_transaction_log": "true",
"field_name": "ResponseBody",
"field_value_expression": "$maskedResponseBody"
},
{
"in_transaction_log": "true",
"field_name": "ResponseCode",
"field_value_expression": "$last_status_code"
}
],
"response_fsm_event_expression": "#{if}($StringUtils.equals($zuoraResponseCode,'Approved'))Success#{else}Error#{end}"
}
],
"operation_states": [
{
"start_state": "BEGIN",
"transaction_event": "",
"end_state": "auth"
}
],
"operation_response_fields": [
{
"field_name": "ZuoraResponseCode",
"field_value_expression": "$!zuoraResponseCode"
},
{
"field_name": "GatewayResponseCode",
"field_value_expression": "$!gatewayResponseCode"
},
{
"field_name": "GatewayResponseMessage",
"field_value_expression": "$!gatewayResponseMessage"
},
{
"field_name": "GatewayReferenceId",
"field_value_expression": "$!gatewayReferenceId"
}
]
},
{
"payment_method_type": "CreditCard",
"operation_type": "Cancel",
"support_idempotent_retry": true,
"transactions": [
{
"transaction_name": "TestValidCancel",
"connector_type": "Test",
"transaction_request_fields": [
{
"temporary": true,
"field_name": "_",
"field_value_expression": "
#{set}( $isValidPaymentIntentId = false )
#{if}((!$StringUtils.isBlank($SecondPaymentReferenceId) && $StringUtils.startsWith($SecondPaymentReferenceId, 'pi_')) || (!$StringUtils.isBlank($ReferenceId) && $StringUtils.startsWith($ReferenceId, 'pi_')))
#{set}( $isValidPaymentIntentId = true )
#{end}"
}
],
"request_to_log": "isValidPaymentIntentId = $!isValidPaymentIntentId, ReferenceId = $!ReferenceId, SecondPaymentReferenceId = $!SecondPaymentReferenceId",
"transaction_response_fields": [{
"field_name": "_",
"field_value_expression": "
#{if}(!$!isValidPaymentIntentId)
#{set}( $zuoraResponseCode = 'Failed' )
#{set}( $gatewayResponseCode = 'ZuoraValidationError' )
#{set}( $gatewayResponseMessage = 'Cancellation request not sent to gateway as payment intent id is not present' )
#{else}
#{set}( $zuoraResponseCode = 'Approved' )
#{end}
"
}],
"response_fsm_event_expression": "#{if}($!isValidPaymentIntentId)Success#{else}Error#{end}"
},
{
"transaction_name": "Void",
"connector_type": "HTTPs",
"transaction_request_fields": [
{
"temporary": true,
"field_name": "_",
"field_value_expression": "
## Payment Intent ID
#{if}(!$StringUtils.isBlank($SecondPaymentReferenceId) && $StringUtils.startsWith($SecondPaymentReferenceId, 'pi_'))
#{set}( $paymentIntentId = $SecondPaymentReferenceId )
#{elseif}(!$StringUtils.isBlank($ReferenceId) && $StringUtils.startsWith($ReferenceId, 'pi_'))
#{set}( $paymentIntentId = $ReferenceId )
#{end}
"
},
{
"field_name": "URL",
"field_value_expression": "https://api.stripe.com/v1/payment_intents/$!paymentIntentId/cancel"
},
{
"field_name": "METHOD",
"field_value_expression": "POST"
},
{
"field_name": "Authorization",
"field_value_expression": "${Header-Authorization}"
},
{
"field_name": "Content-Type",
"field_value_expression": "${Header-Content-Type}"
},
{
"field_name": "Stripe-Version",
"field_value_expression": "${Header-Stripe-Version}"
},
{
"field_name": "REQUEST_BODY",
"field_value_expression": "${requestBody}"
},
{
"field_name": "Retry-Enabled",
"field_value_expression": "Yes"
},
{
"field_name": "Idempotency-Key",
"field_value_expression": "#{if}($StringUtils.isNotBlank(${Framework-Idempotency-Key}))${Framework-Idempotency-Key}#{else}$ZUtility.getUUID(255)#{end}"
}
],
"request_to_log": "Idempotency-Key=$!{Idempotency-Key},Request = [${maskedRequestBody}; URL = $!URL]",
"transaction_response_fields": [
{
"field_name": "_",
"field_value_expression": "
## Create masked response body
#{if} (!$StringUtils.equals($last_status_code, '200'))
#{set}( $maskedResponseBody = $last_message_body )
#{else}
## mask message body
#{set}( $maskedResponseBody = $last_message_body )
#{end}

#{if} (!$StringUtils.equals($last_status_code, '200'))
#{set}($blockInputs = [$last_message_body, $last_status_code])
#evaluate(${Block-Error-Handler})
#{stop}
#{else}
#{set}( $gatewayResponseCode = '200' )
#{set}( $gatewayResponseMessage = 'Approved' )
#{end}

## Parse Response JSON Document
#{set}( $createPiResponseDoc = $ZUtility.parseJsonDocument($last_message_body) )

#{set}( $paymentIntentId = $createPiResponseDoc.valueOf('/JsonRoot/id') )
#{set}( $paymentIntentStatus = $createPiResponseDoc.valueOf('/JsonRoot/status') )
#{set}( $gatewayReferenceId = $createPiResponseDoc.valueOf('/JsonRoot/id') )

#{if} ($StringUtils.equals($paymentIntentStatus, 'canceled'))
#{set}( $zuoraResponseCode = 'Approved' )
#{else}
#{set}( $zuoraResponseCode = 'Failed' )
#{end}
"
},
{
"in_transaction_log": "true",
"field_name": "ResponseBody",
"field_value_expression": "$maskedResponseBody"
},
{
"in_transaction_log": "true",
"field_name": "ResponseCode",
"field_value_expression": "$last_status_code"
}
],
"response_fsm_event_expression": "#{if}($StringUtils.equals($zuoraResponseCode,'Approved'))Success#{else}Error#{end}"
}
],
"operation_states": [
{
"start_state": "BEGIN",
"transaction_event": "",
"end_state": "TestValidCancel"
},
{
"start_state": "TestValidCancel",
"transaction_event": "Success",
"end_state": "Void"
}
],
"operation_response_fields": [
{
"field_name": "ZuoraResponseCode",
"field_value_expression": "$!zuoraResponseCode"
},
{
"field_name": "GatewayResponseCode",
"field_value_expression": "$!gatewayResponseCode"
},
{
"field_name": "GatewayResponseMessage",
"field_value_expression": "$!gatewayResponseMessage"
},
{
"field_name": "GatewayReferenceId",
"field_value_expression": "$!gatewayReferenceId"
}
]
},
{
"payment_method_type": "CreditCard",
"operation_type": "Capture",
"support_idempotent_retry": true,
"transactions": [
{
"transaction_name": "approve",
"connector_type": "HTTPs",
"transaction_request_fields": [
{
"temporary": true,
"field_name": "_",
"field_value_expression": "
## The PaymentCapture Request Map
#{set}($blockInputs = [$PaymentAmount, $Currency])
#evaluate(${Block-Normalize-Amount})
#{set}( $paymentIntentRequestMap = {} )
#{set}( $paymentIntentRequestMap['amount_to_capture'] = $!macroReturn )
#{set}( $requestBody = $ZUtility.encodeUrlParameters($paymentIntentRequestMap) )

## {set}( $paymentIntentRequestMap['metadata[zpayment_number]'] = $!PaymentNumber )

#evaluate(${Block-Payment-Metadata})
$paymentIntentRequestMap.putAll($macroMetadataReturn)

#{set}($blockInputs = [$paymentIntentRequestMap])
#evaluate(${Block-Create-Mask-Request-Map})
#{set}( $maskedRequestBody = $ZUtility.encodeUrlParameters($macroReturn) )
"
},
{
"field_name": "URL",
"field_value_expression": "https://api.stripe.com/v1/payment_intents/$!AuthTransactionId/capture"
},
{
"field_name": "METHOD",
"field_value_expression": "POST"
},
{
"field_name": "Authorization",
"field_value_expression": "${Header-Authorization}"
},
{
"field_name": "Content-Type",
"field_value_expression": "${Header-Content-Type}"
},
{
"field_name": "Stripe-Version",
"field_value_expression": "${Header-Stripe-Version}"
},
{
"field_name": "REQUEST_BODY",
"field_value_expression": "${requestBody}"
},
{
"field_name": "Retry-Enabled",
"field_value_expression": "Yes"
},
{
"field_name": "Idempotency-Key",
"field_value_expression": "#{if}($StringUtils.isNotBlank(${Framework-Idempotency-Key}))${Framework-Idempotency-Key}_paymentintent#{else}$ZUtility.getUUID(255)#{end}"
}
],
"request_to_log": "Idempotency-Key=$!{Idempotency-Key},Request = [${maskedRequestBody}; URL = $!URL]",
"transaction_response_fields": [
{
"field_name": "_",
"field_value_expression": "
## Create masked response body
#{if} (!$StringUtils.equals($last_status_code, '200'))
#{set}( $maskedResponseBody = $last_message_body )
#{else}
## mask message body
#{set}( $maskedResponseBody = $last_message_body )
#{end}

#{if} (!$StringUtils.equals($last_status_code, '200'))
#{set}($blockInputs = [$last_message_body, $last_status_code])
#evaluate(${Block-Error-Handler})
#{stop}
#{else}
#{set}( $gatewayResponseCode = '200' )
#{set}( $gatewayResponseMessage = 'Approved' )
#{end}

## Parse Response JSON Document
#{set}( $createPiResponseDoc = $ZUtility.parseJsonDocument($last_message_body) )

#{set}( $paymentIntentId = $createPiResponseDoc.valueOf('/JsonRoot/payment_intent') )
#{set}( $paymentIntentStatus = $createPiResponseDoc.valueOf('/JsonRoot/status') )
#{set}( $gatewayReferenceId = $createPiResponseDoc.valueOf('/JsonRoot/id') )

#{if} ($StringUtils.equals($paymentIntentStatus, 'succeeded'))
#{set}( $zuoraResponseCode = 'Approved' )
#{else}
#{set}( $zuoraResponseCode = 'Failed' )
#{end}
"
},
{
"in_transaction_log": "true",
"field_name": "ResponseBody",
"field_value_expression": "$maskedResponseBody"
},
{
"in_transaction_log": "true",
"field_name": "ResponseCode",
"field_value_expression": "$last_status_code"
},
{
"field_name": "ThreeDS2ResponseData",
"field_value_expression": "$!threeDS2ResponseData"
}
],
"response_fsm_event_expression": "#{if}($StringUtils.equals($zuoraResponseCode,'Approved'))Success#{else}Error#{end}"
}
],
"operation_states": [
{
"start_state": "BEGIN",
"transaction_event": "",
"end_state": "approve"
}
],
"operation_response_fields": [
{
"field_name": "ZuoraResponseCode",
"field_value_expression": "$!zuoraResponseCode"
},
{
"field_name": "GatewayResponseCode",
"field_value_expression": "$!gatewayResponseCode"
},
{
"field_name": "GatewayResponseMessage",
"field_value_expression": "$!gatewayResponseMessage"
},
{
"field_name": "GatewayReferenceId",
"field_value_expression": "$!gatewayReferenceId"
}
]
},
{
"payment_method_type": "CreditCard",
"operation_type": "Payment",
"support_idempotent_retry": true,
"transactions": [
{
"transaction_name": "CreateAndConfirmPaymentIntent",
"connector_type": "HTTPs",
"transaction_request_fields": [
{
"temporary": true,
"field_name":"isApplePayOrGooglePay",
"field_value_expression":"#{if}($StringUtils.containsAny($CreditCardType,'Apple','Google'))Yes#{else}No#{end}"
},
{
"temporary": true,
"field_name": "_",
"field_value_expression": "
## The PaymentIntent Request Map
#{set}( $paymentIntentRequestMap = {
'confirm' : 'true'
} )

#{set}($blockInputs = [$PaymentAmount, $Currency])
#evaluate(${Block-Normalize-Amount})
#{set}( $paymentIntentRequestMap['amount'] = $macroReturn )
#{set}( $paymentIntentRequestMap['currency'] = $!Currency )

#{if}( $StringUtils.isNotBlank($!PaymentDescription) )
#{set}( $paymentIntentRequestMap['description'] = $!PaymentDescription )
#{end}
## Add 'invoice_number' metadata field based on switch enabled/disabled
#{if} ( $StringUtils.equalsIgnoreCase($Feature-ShouldUpdateMetadataField-Enabled, 'true') && $StringUtils.isNotBlank($!gwOptions_InvoiceNum))
#{set}( $paymentIntentRequestMap[$StringUtils.join('metadata[',$!CustomInvoiceField,']')] = $!gwOptions_InvoiceNum )
#{end}

## {set}( $paymentIntentRequestMap['metadata[zpayment_number]'] = $!PaymentNumber )

#evaluate(${Block-Payment-Metadata})
$paymentIntentRequestMap.putAll($macroMetadataReturn)

###############################################################
## Construct card payment method data, there are 2 integration paths.
## 1. Raw credit card number integration. This is the normal path.
## 2. Tokenzied card integration. The card was tokenized while processing on-session payment
##    with mandate support. It is required to use Stripe payment method id and mandate id together
##    with mandate id to process the payment.
################################################################
#{if} (!$StringUtils.isAnyBlank($TokenId, $SecondTokenId, $MandateID))
#{set}( $paymentIntentRequestMap['off_session'] = 'recurring' )
#{set}( $paymentIntentRequestMap['customer'] = $SecondTokenId )
#{set}( $paymentIntentRequestMap['payment_method'] = $TokenId )
#{set}( $paymentIntentRequestMap['mandate'] = $MandateID )

##When the puppet setting is enabled, do not send e-mandate to stripe for over 15k INR payments from payment run
#{if} ($StringUtils.equals($Feature-IgnoreMandateIdInPaymentRunAboveINR15K-Enabled, 'true'))
#{set} ($paymentAmountInDecimal = $ZUtility.toDecimal($PaymentAmount))
#{set} ($minAmountInDecimal = $ZUtility.toDecimal('15000'))
#{if} ($StringUtils.equals($PaymentSource, 'PaymentRun') && $StringUtils.equals($Currency, 'INR')
&& $paymentAmountInDecimal.isGreaterThanOrEqualTo($minAmountInDecimal)) $paymentIntentRequestMap.remove('mandate') #{end}
#{end}
#{else}
#{if}($StringUtils.equals($!isApplePayOrGooglePay, 'Yes'))
#evaluate(${Block-Construct-Card-ApplePayOrGooglePayData})
#{else}
#evaluate(${Block-Construct-Card-PaymentMethodData})
#{end}
$paymentIntentRequestMap.putAll($macroReturn)

#{if}( $StringUtils.isNotBlank($!gwOptions_RadarSessionId) )
#{set}( $paymentIntentRequestMap['radar_options[session]'] = $gwOptions_RadarSessionId )
#{end}

#{if}( $StringUtils.equals($!DisableRadarRules, 'on') )
#{set}( $paymentIntentRequestMap['radar_options[skip_rules][]'] = 'all' )
#{end}

## set moto flag
#{if}($StringUtils.equals($ZuoraECommerceIndicator, 'MOTO'))
#{set}( $paymentIntentRequestMap['payment_method_options[card][moto]'] = 'true' )
#{else}
#{if}($StringUtils.equals($MITMessageType, 'Recurring') && $StringUtils.equals($MITInitiatedBy, 'Merchant')
&& $StringUtils.equals($MITIsStoredCredential, 'Yes'))
#{if}($StringUtils.equals($!isApplePayOrGooglePay, 'Yes'))
#{set}( $paymentIntentRequestMap['off_session'] = 'true' )
#{else}
#{set}( $paymentIntentRequestMap['off_session'] = 'recurring' )
#{end}
#{if}($StringUtils.isNotBlank($MITSubmittedTXID))
#{set}( $paymentIntentRequestMap['payment_method_options[card][mit_exemption][network_transaction_id]'] = $MITSubmittedTXID )
#{set}( $paymentIntentRequestMap['payment_method_options[card][mit_exemption][ds_transaction_id]'] = $StringUtils.defaultIfBlank($MITSubmittedToken1, 'null') )
#{end}
#{elseif}($StringUtils.equals($MITMessageType, 'Recurring') && $StringUtils.equals($MITInitiatedBy, 'Merchant')
&& $StringUtils.equals($MITIsStoredCredential, 'No') && $StringUtils.equals($MITMigrateLegacyPM, 'Yes'))
## use moto at grandfathering transaction
#{if}($StringUtils.equals($MITGrandfatheringTxType, 'MOTO'))
#{set}( $paymentIntentRequestMap['payment_method_options[card][moto]'] = 'true' )
#{else}
#{set}( $paymentIntentRequestMap['off_session'] = 'recurring' )
#{set}( $paymentIntentRequestMap['payment_method_options[card][mit_exemption][claim_without_transaction_id]'] = 'true' )
#{end}
#{else}
#{if}($StringUtils.equals($!isApplePayOrGooglePay, 'Yes'))
#{set}( $paymentIntentRequestMap['off_session'] = 'true' )
#{else}
#{set}( $paymentIntentRequestMap['off_session'] = 'recurring' )
#{end}

## only send grandfathring flag when CIT/MIT is supported by gateway.
#{if}($StringUtils.isNotBlank($MITSupportBrand))
#{set}( $paymentIntentRequestMap['payment_method_options[card][mit_exemption][claim_without_transaction_id]'] = 'true' )
#{end}
#{end}
#{end}
#{end}

#{if}($!EnableL3 && $!EnableL3.equals(\"on\"))
#evaluate(${Block-Construct-Level3-Data})
#{if}(!$macroReturn.isEmpty())
$paymentIntentRequestMap.putAll($macroReturn)
#{else}#{end}
#{else}#{end}

#evaluate(${Block-Add-IPAddress})
#{if}(!$macroReturn.isEmpty())
$paymentIntentRequestMap.putAll($macroReturn)
#{else}#{end}

#{if} ($StringUtils.isNotBlank($SoftDescriptor))
#{set} ($paymentIntentRequestMap['statement_descriptor_suffix'] = $ZUtility.truncateMaxLength($SoftDescriptor, '22'))
#{end}

#{set}( $requestBody = $ZUtility.encodeUrlParameters($paymentIntentRequestMap) )

#{set}($blockInputs = [$paymentIntentRequestMap])
#evaluate(${Block-Create-Mask-Request-Map})
#{set}( $maskedRequestBody = $ZUtility.encodeUrlParameters($macroReturn) )
"
},
{
"field_name": "URL",
"field_value_expression": "https://api.stripe.com/v1/payment_intents"
},
{
"field_name": "METHOD",
"field_value_expression": "POST"
},
{
"field_name": "Authorization",
"field_value_expression": "${Header-Authorization}"
},
{
"field_name": "Content-Type",
"field_value_expression": "${Header-Content-Type}"
},
{
"field_name": "Stripe-Version",
"field_value_expression": "${Header-Stripe-Version}"
},
{
"field_name": "REQUEST_BODY",
"field_value_expression": "${requestBody}"
},
{
"field_name": "Retry-Enabled",
"field_value_expression": "Yes"
},
{
"field_name": "Idempotency-Key",
"field_value_expression": "#{if}($StringUtils.isNotBlank(${Framework-Idempotency-Key}))${Framework-Idempotency-Key}_withl3#{else}$ZUtility.getUUID(255)#{end}"
}
],
"request_to_log": "Idempotency-Key=$!{Idempotency-Key},Request = [${maskedRequestBody}; URL = $!URL]",
"transaction_response_fields": [
{
"field_name": "_",
"field_value_expression": "
## Create masked response body
#{if} (!$StringUtils.equals($last_status_code, '200'))
#{set}( $maskedResponseBody = $last_message_body )
#{else}
## mask message body
#{set}( $maskedResponseBody = $last_message_body )
#{end}

#{if} (!$StringUtils.equals($last_status_code, '200'))
#{set}($blockInputs = [$last_message_body, $last_status_code])
#evaluate(${Block-Error-Handler})
#{stop}
#{else}
#{set}( $gatewayResponseCode = '200' )
#{set}( $gatewayResponseMessage = 'Approved' )
#{end}

## Parse Response JSON Document
#{set}( $createPiResponseDoc = $ZUtility.parseJsonDocument($last_message_body) )

#{set}( $paymentIntentId = $createPiResponseDoc.valueOf('/JsonRoot/id') )
#{set}( $paymentIntentStatus = $createPiResponseDoc.valueOf('/JsonRoot/status') )
#{set}( $paymentIntentNextAction = $createPiResponseDoc.valueOf('/JsonRoot/next_action/type') )

## read data from first charge object
#{set}( $gatewayReferenceId = $createPiResponseDoc.valueOf('//charges/data/ArrayItem[1]/id') )
#{if}(!$StringUtils.isBlank($gatewayReferenceId) && $StringUtils.startsWith($gatewayReferenceId, 'ch_'))
#{set}( $gatewaySecondReferenceId = $paymentIntentId )
#{end}
#{set}( $dsTransactionId = $createPiResponseDoc.valueOf('//charges/data/ArrayItem[1]/payment_method_details/card/ds_transaction_id') )
#{set}( $networkTransactionId = $createPiResponseDoc.valueOf('//charges/data/ArrayItem[1]/payment_method_details/card/network_transaction_id') )

## When it is processing a subsequent payment using MandateId, there is not a charge object
## in the response. In such case, we use payment intent id as payment reference id.
#{if}($StringUtils.isBlank($gatewayReferenceId))
#{set}( $gatewayReferenceId = $paymentIntentId )
#{end}

#{if} ($StringUtils.equals($paymentIntentStatus, 'succeeded'))
#{set}( $zuoraResponseCode = 'Approved' )
#{elseif}($StringUtils.equals($paymentIntentStatus, 'requires_action') && $StringUtils.equals($paymentIntentNextAction, 'card_await_notification'))
#{set}( $zuoraResponseCode = 'Approved' )
#{else}
#{set}( $zuoraResponseCode = 'Failed' )
#{end}
"
},
{
"in_transaction_log": "true",
"field_name": "ResponseBody",
"field_value_expression": "$maskedResponseBody"
},
{
"in_transaction_log": "true",
"field_name": "ResponseCode",
"field_value_expression": "$last_status_code"
}
],
"response_fsm_event_expression": "#{if}($StringUtils.equals($zuoraResponseCode,'Approved'))Success#{else}Error#{end}"
},
{
"transaction_name": "CreateAndConfirmPaymentIntentWithoutL3",
"connector_type": "HTTPs",
"transaction_request_fields": [
{
"temporary": true,
"field_name":"isApplePayOrGooglePay",
"field_value_expression":"#{if}($StringUtils.containsAny($CreditCardType,'Apple','Google'))Yes#{else}No#{end}"
},
{
"temporary": true,
"field_name": "_",
"field_value_expression": "
## The PaymentIntent Request Map
#{set}( $paymentIntentRequestMap = {
'confirm' : 'true'
} )

#{set}($blockInputs = [$PaymentAmount, $Currency])
#evaluate(${Block-Normalize-Amount})
#{set}( $paymentIntentRequestMap['amount'] = $macroReturn )
#{set}( $paymentIntentRequestMap['currency'] = $!Currency )
#{if}( $StringUtils.isNotBlank($!PaymentDescription) )
#{set}( $paymentIntentRequestMap['description'] = $!PaymentDescription )
#{end}

#{set}( $paymentIntentRequestMap['metadata[zpayment_number]'] = $!PaymentNumber )
## Add 'invoice_number' metadata field based on switch enabled/disabled
#{if} ( $StringUtils.equalsIgnoreCase($Feature-ShouldUpdateMetadataField-Enabled, 'true') && $StringUtils.isNotBlank($!gwOptions_InvoiceNum))
#{set}( $paymentIntentRequestMap[$StringUtils.join('metadata[',$!CustomInvoiceField,']')] = $!gwOptions_InvoiceNum )
#{end}

#evaluate(${Block-Payment-Metadata})
$paymentIntentRequestMap.putAll($macroMetadataReturn)

###############################################################
## Construct card payment method data, there are 2 integration paths.
## 1. Raw credit card number integration. This is the normal path.
## 2. Tokenzied card integration. The card was tokenized while processing on-session payment
##    with mandate support. It is required to use Stripe payment method id and mandate id together
##    with mandate id to process the payment.
################################################################
#{if} (!$StringUtils.isAnyBlank($TokenId, $SecondTokenId, $MandateID))
#{set}( $paymentIntentRequestMap['off_session'] = 'recurring' )
#{set}( $paymentIntentRequestMap['customer'] = $SecondTokenId )
#{set}( $paymentIntentRequestMap['payment_method'] = $TokenId )
#{set}( $paymentIntentRequestMap['mandate'] = $MandateID )
#{else}
#{if}($StringUtils.equals($!isApplePayOrGooglePay, 'Yes'))
#evaluate(${Block-Construct-Card-ApplePayOrGooglePayData})
#{else}
#evaluate(${Block-Construct-Card-PaymentMethodData})
#{end}
$paymentIntentRequestMap.putAll($macroReturn)

#{if}( $StringUtils.isNotBlank($!gwOptions_RadarSessionId) )
#{set}( $paymentIntentRequestMap['radar_options[session]'] = $gwOptions_RadarSessionId )
#{end}

#{if}( $StringUtils.equals($!DisableRadarRules, 'on') )
#{set}( $paymentIntentRequestMap['radar_options[skip_rules][]'] = 'all' )
#{end}

## set moto flag
#{if}($StringUtils.equals($ZuoraECommerceIndicator, 'MOTO'))
#{set}( $paymentIntentRequestMap['payment_method_options[card][moto]'] = 'true' )
#{else}
#{if}($StringUtils.equals($MITMessageType, 'Recurring') && $StringUtils.equals($MITInitiatedBy, 'Merchant')
&& $StringUtils.equals($MITIsStoredCredential, 'Yes'))
#{if}($StringUtils.equals($!isApplePayOrGooglePay, 'Yes'))
#{set}( $paymentIntentRequestMap['off_session'] = 'true' )
#{else}
#{set}( $paymentIntentRequestMap['off_session'] = 'recurring' )
#{end}
#{if}($StringUtils.isNotBlank($MITSubmittedTXID))
#{set}( $paymentIntentRequestMap['payment_method_options[card][mit_exemption][network_transaction_id]'] = $MITSubmittedTXID )
#{set}( $paymentIntentRequestMap['payment_method_options[card][mit_exemption][ds_transaction_id]'] = $StringUtils.defaultIfBlank($MITSubmittedToken1, 'null') )
#{end}
#{elseif}($StringUtils.equals($MITMessageType, 'Recurring') && $StringUtils.equals($MITInitiatedBy, 'Merchant')
&& $StringUtils.equals($MITIsStoredCredential, 'No') && $StringUtils.equals($MITMigrateLegacyPM, 'Yes'))
#{set}( $paymentIntentRequestMap['off_session'] = 'recurring' )
#{set}( $paymentIntentRequestMap['payment_method_options[card][mit_exemption][claim_without_transaction_id]'] = 'true' )
#{else}
#{if}($StringUtils.equals($!isApplePayOrGooglePay, 'Yes'))
#{set}( $paymentIntentRequestMap['off_session'] = 'true' )
#{else}
#{set}( $paymentIntentRequestMap['off_session'] = 'recurring' )
#{end}
## only send grandfathring flag when CIT/MIT is supported by gateway.
#{if}($StringUtils.isNotBlank($MITSupportBrand))
#{set}( $paymentIntentRequestMap['payment_method_options[card][mit_exemption][claim_without_transaction_id]'] = 'true' )
#{end}
#{end}
#{end}
#{end}

#{set}( $requestBody = $ZUtility.encodeUrlParameters($paymentIntentRequestMap) )

#{set}($blockInputs = [$paymentIntentRequestMap])
#evaluate(${Block-Create-Mask-Request-Map})
#{set}( $maskedRequestBody = $ZUtility.encodeUrlParameters($macroReturn) )
"
},
{
"field_name": "URL",
"field_value_expression": "https://api.stripe.com/v1/payment_intents"
},
{
"field_name": "METHOD",
"field_value_expression": "POST"
},
{
"field_name": "Authorization",
"field_value_expression": "${Header-Authorization}"
},
{
"field_name": "Content-Type",
"field_value_expression": "${Header-Content-Type}"
},
{
"field_name": "Stripe-Version",
"field_value_expression": "${Header-Stripe-Version}"
},
{
"field_name": "REQUEST_BODY",
"field_value_expression": "${requestBody}"
},
{
"field_name": "Retry-Enabled",
"field_value_expression": "Yes"
},
{
"field_name": "Idempotency-Key",
"field_value_expression": "#{if}($StringUtils.isNotBlank(${Framework-Idempotency-Key}))${Framework-Idempotency-Key}_withoutl3#{else}$ZUtility.getUUID(255)#{end}"
}
],
"request_to_log": "Idempotency-Key=$!{Idempotency-Key},Request = [${maskedRequestBody}; URL = $!URL]",
"transaction_response_fields": [
{
"field_name": "_",
"field_value_expression": "
## Create masked response body
#{if} (!$StringUtils.equals($last_status_code, '200'))
#{set}( $maskedResponseBody = $last_message_body )
#{else}
## mask message body
#{set}( $maskedResponseBody = $last_message_body )
#{end}

#{if} (!$StringUtils.equals($last_status_code, '200'))
#{set}($blockInputs = [$last_message_body, $last_status_code])
#evaluate(${Block-Error-Handler})
#{stop}
#{else}
#{set}( $gatewayResponseCode = '200' )
#{set}( $gatewayResponseMessage = 'Approved' )
#{if}($l3Error)
#{set}( $l3DowngradeMessage = \"[L3 Data Downgraded] \" )
#{set}( $gatewayResponseMessage = \"$l3DowngradeMessage$gatewayResponseMessage\" )
#{else}#{end}
#{end}

## Parse Response JSON Document
#{set}( $createPiResponseDoc = $ZUtility.parseJsonDocument($last_message_body) )

#{set}( $paymentIntentId = $createPiResponseDoc.valueOf('/JsonRoot/id') )
#{set}( $paymentIntentStatus = $createPiResponseDoc.valueOf('/JsonRoot/status') )
#{set}( $paymentIntentNextAction = $createPiResponseDoc.valueOf('/JsonRoot/next_action/type') )

## read data from first charge object
#{set}( $gatewayReferenceId = $createPiResponseDoc.valueOf('//charges/data/ArrayItem[1]/id') )
#{if}(!$StringUtils.isBlank($gatewayReferenceId) && $StringUtils.startsWith($gatewayReferenceId, 'ch_'))
#{set}( $gatewaySecondReferenceId = $paymentIntentId )
#{end}
#{set}( $dsTransactionId = $createPiResponseDoc.valueOf('//charges/data/ArrayItem[1]/payment_method_details/card/ds_transaction_id') )
#{set}( $networkTransactionId = $createPiResponseDoc.valueOf('//charges/data/ArrayItem[1]/payment_method_details/card/network_transaction_id') )

## When it is processing a subsequent payment using MandateId, there is not a charge object
## in the response. In such case, we use payment intent id as payment reference id.
#{if}($StringUtils.isBlank($gatewayReferenceId))
#{set}( $gatewayReferenceId = $paymentIntentId )
#{end}

#{if} ($StringUtils.equals($paymentIntentStatus, 'succeeded'))
#{set}( $zuoraResponseCode = 'Approved' )
#{elseif}($StringUtils.equals($paymentIntentStatus, 'requires_action') && $StringUtils.equals($paymentIntentNextAction, 'card_await_notification'))
#{set}( $zuoraResponseCode = 'Approved' )
#{else}
#{set}( $zuoraResponseCode = 'Failed' )
#{end}
"
},
{
"in_transaction_log": "true",
"field_name": "ResponseBody",
"field_value_expression": "$maskedResponseBody"
},
{
"in_transaction_log": "true",
"field_name": "ResponseCode",
"field_value_expression": "$last_status_code"
}
],
"response_fsm_event_expression": "#{if}($StringUtils.equals($zuoraResponseCode,'Approved'))Success#{else}Error#{end}"
},
{
"transaction_name": "CheckL3Error",
"connector_type": "Test",
"transaction_request_fields": [
{
"temporary": true,
"field_name": "_",
"field_value_expression": "
#{set}( $l3Error = false )
#{set}( $l3ErrorFound = false )

#{if}($!zuoraResponseCode.equals(\"Failed\"))
## get error value
#{set}( $createErrorResponseDoc = $ZUtility.parseJsonDocument($last_message_body) )
#{set}( $errorParam = $createErrorResponseDoc.valueOf('//error/param') )
#{if}($errorParam.contains(\"level3\"))
#{set}( $l3ErrorFound = true )
#{else}
#{end}
#{else}
#{end}

## check if downgrade option is enabled
#{if}($!EnableL3 && $!EnableL3.equals(\"on\") && $!L3Downgrade && $!L3Downgrade.equals(\"on\"))
#{set}( $l3Error = true )
#{else}
#{end}
"
}
],
"request_to_log": "#{if}($!l3ErrorFound && $!l3Error)L3 error found: $!errorParam.#{elseif}(!$!l3ErrorFound && !$!l3Error && $!EnableL3 && $!EnableL3.equals(\"on\") && $!L3Downgrade && $!L3Downgrade.equals(\"on\"))No L3 error found.#{else}L3 downgrade check disabled.#{end}",
"transaction_response_fields": [],
"response_fsm_event_expression": "#{if}($!l3ErrorFound && $!l3Error)Success#{else}Error#{end}"
},
{
"transaction_name": "UpdatePaymentIntentWithPaymentNumber",
"connector_type": "HTTPs",
"transaction_request_fields": [
{
"temporary": true,
"field_name": "_",
"field_value_expression": "
## The PaymentIntent Request Map
#{set}( $paymentIntentRequestMap = {} )
#{set}( $paymentIntentRequestMap['metadata[zpayment_number]'] =  $!PaymentNumber)
#{set}( $requestBody = $ZUtility.encodeUrlParameters($paymentIntentRequestMap) )

#{set}($blockInputs = [$paymentIntentRequestMap])
#evaluate(${Block-Create-Mask-Request-Map})
#{set}( $maskedRequestBody = $ZUtility.encodeUrlParameters($macroReturn) )
"
},
{
"field_name": "URL",
"field_value_expression": "https://api.stripe.com/v1/payment_intents/$ReferenceId"
},
{
"field_name": "METHOD",
"field_value_expression": "POST"
},
{
"field_name": "Authorization",
"field_value_expression": "${Header-Authorization}"
},
{
"field_name": "Content-Type",
"field_value_expression": "${Header-Content-Type}"
},
{
"field_name": "Stripe-Version",
"field_value_expression": "${Header-Stripe-Version}"
},
{
"field_name": "REQUEST_BODY",
"field_value_expression": "${requestBody}"
},
{
"field_name": "Retry-Enabled",
"field_value_expression": "Yes"
},
{
"field_name": "Idempotency-Key",
"field_value_expression": "#{if}($StringUtils.isNotBlank(${Framework-Idempotency-Key}))${Framework-Idempotency-Key}_update#{else}$ZUtility.getUUID(255)#{end}"
}
],
"request_to_log": "Idempotency-Key=$!{Idempotency-Key},Request = [${maskedRequestBody}; URL = $!URL]",
"transaction_response_fields": [
{
"field_name": "_",
"field_value_expression": "
## Create masked response body
#{if} (!$StringUtils.equals($last_status_code, '200'))
#{set}( $maskedResponseBody = $last_message_body )
#{else}
## mask message body
#{set}( $maskedResponseBody = $last_message_body )
#{end}
#{if} (!$StringUtils.equals($last_status_code, '200'))
#{set}($blockInputs = [$last_message_body, $last_status_code])
#evaluate(${Block-Error-Handler})
#{stop}
#{else}
#{set}( $gatewayResponseCode = '200' )
#{set}( $gatewayResponseMessage = 'Approved' )
#{end}

## Parse Response JSON Document
#{set}( $createPiResponseDoc = $ZUtility.parseJsonDocument($last_message_body) )
#{set}( $paymentIntentId = $createPiResponseDoc.valueOf('/JsonRoot/id') )
#{set}( $paymentIntentStatus = $createPiResponseDoc.valueOf('/JsonRoot/status') )
#{if} ($StringUtils.equals($paymentIntentStatus, 'requires_confirmation') || $StringUtils.equals($paymentIntentStatus, 'succeeded'))
#{set}( $zuoraResponseCode = 'Success' )
#{else}
#{set}( $zuoraResponseCode = 'Error' )
#{end}
"
},
{
"in_transaction_log": "true",
"field_name": "ResponseBody",
"field_value_expression": "$maskedResponseBody"
},
{
"in_transaction_log": "true",
"field_name": "ResponseCode",
"field_value_expression": "$last_status_code"
}
],
"response_fsm_event_expression": "$!zuoraResponseCode"
},
{
"transaction_request_fields": [],
"transaction_name": "CheckExistingPayment",
"connector_type": "Test",
"request_to_log": "existingPaymentIntentId=$!ReferenceId",
"transaction_response_fields": [],
"response_fsm_event_expression": "#{if}($StringUtils.isNotBlank($ReferenceId))Success#{else}Error#{end}"
},
{
"transaction_name": "ConfirmPaymentIntent",
"connector_type": "HTTPs",
"transaction_request_fields": [
{
"temporary": true,
"field_name": "_",
"field_value_expression": "
## The PaymentIntent Request Map
#{set}( $paymentIntentRequestMap = {} )

## set RadarSessionId
#{if}($StringUtils.isNotBlank($!RadarSessionId))
#{set}( $paymentIntentRequestMap['radar_options[session]'] = $!RadarSessionId )
#{end}
#{set}( $requestBody = $ZUtility.encodeUrlParameters($paymentIntentRequestMap) )
#{set}($blockInputs = [$paymentIntentRequestMap])
#evaluate(${Block-Create-Mask-Request-Map})
#{set}( $maskedRequestBody = $ZUtility.encodeUrlParameters($macroReturn) )
"
},
{
"field_name": "URL",
"field_value_expression": "https://api.stripe.com/v1/payment_intents/$ReferenceId/confirm"
},
{
"field_name": "METHOD",
"field_value_expression": "POST"
},
{
"field_name": "Authorization",
"field_value_expression": "${Header-Authorization}"
},
{
"field_name": "Content-Type",
"field_value_expression": "${Header-Content-Type}"
},
{
"field_name": "Stripe-Version",
"field_value_expression": "${Header-Stripe-Version}"
},
{
"field_name": "REQUEST_BODY",
"field_value_expression": "${requestBody}"
},
{
"field_name": "Retry-Enabled",
"field_value_expression": "Yes"
},
{
"field_name": "Idempotency-Key",
"field_value_expression": "#{if}($StringUtils.isNotBlank(${Framework-Idempotency-Key}))${Framework-Idempotency-Key}_confirm#{else}$ZUtility.getUUID(255)#{end}"
}
],
"request_to_log": "Idempotency-Key=$!{Idempotency-Key},Request = $!{maskedRequestBody}, [URL = $!URL]",
"transaction_response_fields": [
{
"field_name": "_",
"field_value_expression": "
## Create masked response body
#{if} (!$StringUtils.equals($last_status_code, '200'))
#{set}( $maskedResponseBody = $last_message_body )
#{else}
## mask message body
#{set}( $maskedResponseBody = $last_message_body )
#{end}

#{if} (!$StringUtils.equals($last_status_code, '200'))
#{set}($blockInputs = [$last_message_body, $last_status_code])
#evaluate(${Block-Error-Handler})

## check error code
#{if}($StringUtils.equals($stripeErrorCode, 'payment_intent_unexpected_state'))
#evaluate(${Block-Last-Payment-Error-Handler})
#{end}

#{stop}
#{else}
#{set}( $gatewayResponseCode = '200' )
#{set}( $gatewayResponseMessage = 'Approved' )
#{end}

## Parse Response JSON Document
#{set}( $createPiResponseDoc = $ZUtility.parseJsonDocument($last_message_body) )

#{set}( $paymentIntentId = $createPiResponseDoc.valueOf('/JsonRoot/id') )
#{set}( $paymentIntentStatus = $createPiResponseDoc.valueOf('/JsonRoot/status') )

## read data from first charge object
#{set}( $gatewayReferenceId = $createPiResponseDoc.valueOf('//charges/data/ArrayItem[1]/id') )
#{if}(!$StringUtils.isBlank($gatewayReferenceId) && $StringUtils.startsWith($gatewayReferenceId, 'ch_'))
#{set}( $gatewaySecondReferenceId = $paymentIntentId )
#{end}
#{set}( $dsTransactionId = $createPiResponseDoc.valueOf('//charges/data/ArrayItem[1]/payment_method_details/card/ds_transaction_id') )
#{set}( $networkTransactionId = $createPiResponseDoc.valueOf('//charges/data/ArrayItem[1]/payment_method_details/card/network_transaction_id') )
#{set}( $gatewayCustomerId = $createPiResponseDoc.valueOf('/JsonRoot/customer') )
#{set}( $gatewayPaymentMethodId = $createPiResponseDoc.valueOf('/JsonRoot/payment_method') )
#{set}( $cardMandateId = $createPiResponseDoc.valueOf('//charges/data/ArrayItem[1]/payment_method_details/card/mandate') )

#{if} ($StringUtils.equals($paymentIntentStatus, 'succeeded'))
#{set}( $zuoraResponseCode = 'Approved' )
#{set}( $mitupdateReceivedTXID = 'Yes')
#{else}
#{set}( $zuoraResponseCode = 'Failed' )
#{end}
"
},
{
"in_transaction_log": "true",
"field_name": "ResponseBody",
"field_value_expression": "$maskedResponseBody"
},
{
"in_transaction_log": "true",
"field_name": "ResponseCode",
"field_value_expression": "$last_status_code"
},
{
"field_name": "ThreeDS2ResponseData",
"field_value_expression": "$!threeDS2ResponseData"
}
],
"response_fsm_event_expression": "#{if}($StringUtils.equals($paymentIntentStatus,'succeeded'))Success#{else}Error#{end}"
},
{
"transaction_name": "RetrieveExistingPaymentIntent",
"connector_type": "HTTPs",
"transaction_request_fields": [
{
"field_name": "URL",
"field_value_expression": "https://api.stripe.com/v1/payment_intents/$ReferenceId"
},
{
"field_name": "METHOD",
"field_value_expression": "GET"
},
{
"field_name": "Authorization",
"field_value_expression": "${Header-Authorization}"
},
{
"field_name": "Content-Type",
"field_value_expression": "${Header-Content-Type}"
},
{
"field_name": "Stripe-Version",
"field_value_expression": "${Header-Stripe-Version}"
},
{
"field_name": "Retry-Enabled",
"field_value_expression": "Yes"
}
],
"request_to_log": "Request = [${maskedRequestBody}; URL = $!URL]",
"transaction_response_fields": [
{
"field_name": "_",
"field_value_expression": "
## Create masked response body
#{if} (!$StringUtils.equals($last_status_code, '200'))
#{set}( $maskedResponseBody = $last_message_body )
#{else}
## mask message body
#{set}( $maskedResponseBody = $last_message_body )
#{end}

#{if} (!$StringUtils.equals($last_status_code, '200'))
#{set}($blockInputs = [$last_message_body, $last_status_code])
#evaluate(${Block-Error-Handler})
#{stop}
#{else}
#{set}( $gatewayResponseCode = '200' )
#{set}( $gatewayResponseMessage = 'Approved' )
#{end}

## Parse Response JSON Document
#{set}( $createPiResponseDoc = $ZUtility.parseJsonDocument($last_message_body) )

#{set}( $paymentIntentId = $createPiResponseDoc.valueOf('/JsonRoot/id') )
#{set}( $paymentIntentStatus = $createPiResponseDoc.valueOf('/JsonRoot/status') )

## read data from first charge object
#{set}( $gatewayReferenceId = $createPiResponseDoc.valueOf('//charges/data/ArrayItem[1]/id') )
#{if}(!$StringUtils.isBlank($gatewayReferenceId) && $StringUtils.startsWith($gatewayReferenceId, 'ch_'))
#{set}( $gatewaySecondReferenceId = $paymentIntentId )
#{end}
#{set}( $dsTransactionId = $createPiResponseDoc.valueOf('//charges/data/ArrayItem[1]/payment_method_details/card/ds_transaction_id') )
#{set}( $networkTransactionId = $createPiResponseDoc.valueOf('//charges/data/ArrayItem[1]/payment_method_details/card/network_transaction_id') )
#{set}( $gatewayCustomerId = $createPiResponseDoc.valueOf('/JsonRoot/customer') )
#{set}( $gatewayPaymentMethodId = $createPiResponseDoc.valueOf('/JsonRoot/payment_method') )
#{set}( $cardMandateId = $createPiResponseDoc.valueOf('//charges/data/ArrayItem[1]/payment_method_details/card/mandate') )

#{if} ($StringUtils.equals($paymentIntentStatus, 'succeeded'))
#{set}( $zuoraResponseCode = 'Approved' )
#{else}
#{set}( $zuoraResponseCode = 'Failed' )
#{end}
"
},
{
"in_transaction_log": "true",
"field_name": "ResponseBody",
"field_value_expression": "$maskedResponseBody"
},
{
"in_transaction_log": "true",
"field_name": "ResponseCode",
"field_value_expression": "$last_status_code"
}
],
"response_fsm_event_expression": "#{if}($StringUtils.equals($paymentIntentStatus,'succeeded'))Success#{else}Error#{end}"
}
],
"operation_states": [
{
"start_state": "BEGIN",
"transaction_event": "",
"end_state": "CheckExistingPayment"
},
{
"start_state": "CheckExistingPayment",
"transaction_event": "Success",
"end_state": "UpdatePaymentIntentWithPaymentNumber"
},
{
"start_state": "UpdatePaymentIntentWithPaymentNumber",
"transaction_event": "Success",
"end_state": "RetrieveExistingPaymentIntent"
},
{
"start_state": "CheckExistingPayment",
"transaction_event": "Error",
"end_state": "CreateAndConfirmPaymentIntent"
},
{
"start_state": "CreateAndConfirmPaymentIntent",
"transaction_event": "Error",
"end_state": "CheckL3Error"
},
{
"start_state": "CheckL3Error",
"transaction_event": "Success",
"end_state": "CreateAndConfirmPaymentIntentWithoutL3"
},
{
"start_state": "RetrieveExistingPaymentIntent",
"transaction_event": "Error",
"end_state": "ConfirmPaymentIntent"
}
],
"operation_response_fields": [
{
"field_name": "ZuoraResponseCode",
"field_value_expression": "$!zuoraResponseCode"
},
{
"field_name": "GatewayResponseCode",
"field_value_expression": "$!gatewayResponseCode"
},
{
"field_name": "GatewayResponseMessage",
"field_value_expression": "$!gatewayResponseMessage"
},
{
"field_name": "GatewayReferenceId",
"field_value_expression": "$!gatewayReferenceId"
},
{
"field_name": "GatewaySecondReferenceId",
"field_value_expression": "$!gatewaySecondReferenceId"
},
{
"field_name": "MITReceivedTXID",
"field_value_expression": "$!networkTransactionId"
},
{
"field_name": "MITUpdateTXID",
"field_value_expression": "$!mitupdateReceivedTXID"
},
{
"field_name": "MITReceivedToken1",
"field_value_expression": "$!dsTransactionId"
},
{
"field_name": "GatewayCustomerId",
"field_value_expression": "$!gatewayCustomerId"
},
{
"field_name": "GatewayPaymentMethodId",
"field_value_expression": "$!gatewayPaymentMethodId"
},
{
"field_name": "ResponseMandateId",
"field_value_expression": "$!cardMandateId"
}
]
},
{
"payment_method_type": "CreditCard",
"operation_type": "Refund",
"support_idempotent_retry": true,
"transactions": [
{
"transaction_name": "createRefund",
"connector_type": "HTTPs",
"transaction_request_fields": [
{
"temporary": true,
"field_name": "_",
"field_value_expression": "
#{set}( $refundRequestMap = {
'metadata[zrefund_number]' : $!RefundNumber
} )

## set field according to reference id prefix
#{if}($StringUtils.startsWith($ReferenceId, 'ch_'))
#{set}( $refundRequestMap['charge'] = $ReferenceId )
#{else}
#{set}( $refundRequestMap['payment_intent'] = $ReferenceId )
#{end}

#{set}($blockInputs = [$RefundAmount, $Currency])
#evaluate(${Block-Normalize-Amount})
#{set}( $refundRequestMap['amount'] = $macroReturn )

#{set}( $requestBody = $ZUtility.encodeUrlParameters($refundRequestMap) )
"
},
{
"field_name": "URL",
"field_value_expression": "https://api.stripe.com/v1/refunds"
},
{
"field_name": "METHOD",
"field_value_expression": "POST"
},
{
"field_name": "Authorization",
"field_value_expression": "${Header-Authorization}"
},
{
"field_name": "Content-Type",
"field_value_expression": "${Header-Content-Type}"
},
{
"field_name": "Stripe-Version",
"field_value_expression": "${Header-Stripe-Version}"
},
{
"field_name": "REQUEST_BODY",
"field_value_expression": "${requestBody}"
},
{
"field_name": "Retry-Enabled",
"field_value_expression": "Yes"
},
{
"field_name": "Idempotency-Key",
"field_value_expression": "#{if}($StringUtils.isNotBlank(${Framework-Idempotency-Key}))${Framework-Idempotency-Key}#{else}$ZUtility.getUUID(255)#{end}"
}
],
"request_to_log": "Idempotency-Key=$!{Idempotency-Key},Request = [${requestBody}; URL = $!URL]",
"transaction_response_fields": [
{
"field_name": "_",
"field_value_expression": "
## Create masked response body
#{if} (!$StringUtils.equals($last_status_code, '200'))
#{set}( $maskedResponseBody = $last_message_body )
#{else}
## mask message body
#{set}( $maskedResponseBody = $last_message_body )
#{end}

#{if} (!$StringUtils.equals($last_status_code, '200'))
#{set}($blockInputs = [$last_message_body, $last_status_code])
#evaluate(${Block-Error-Handler})
#{stop}
#{else}
#{set}( $gatewayResponseCode = '200' )
#{set}( $gatewayResponseMessage = 'Approved' )
#{end}

## Parse Response JSON Document
#{set}( $refundResponseDoc = $ZUtility.parseJsonDocument($last_message_body) )

#{set}( $refundId = $refundResponseDoc.valueOf('/JsonRoot/id') )
#{set}( $refundStatus = $refundResponseDoc.valueOf('/JsonRoot/status') )

## the refund status could be one of following 4:
## 1. pending
## 2. succeeded
## 3. failed
## 4. canceled
## It will be considered Approved when the refund status is either 'pending'
## or 'succeeded'.
#{if} ($StringUtils.equals($refundStatus, 'succeeded') || $StringUtils.equals($refundStatus, 'pending'))
#{set}( $zuoraResponseCode = 'Approved' )
#{else}
#{set}( $zuoraResponseCode = 'Failed' )
#{end}
"
},
{
"in_transaction_log": "true",
"field_name": "ResponseBody",
"field_value_expression": "$maskedResponseBody"
},
{
"in_transaction_log": "true",
"field_name": "ResponseCode",
"field_value_expression": "$last_status_code"
}
],
"response_fsm_event_expression": "Success"
}
],
"operation_states": [
{
"start_state": "BEGIN",
"transaction_event": "",
"end_state": "createRefund"
}
],
"operation_response_fields": [
{
"field_name": "ZuoraResponseCode",
"field_value_expression": "$!zuoraResponseCode"
},
{
"field_name": "GatewayResponseCode",
"field_value_expression": "$!gatewayResponseCode"
},
{
"field_name": "GatewayResponseMessage",
"field_value_expression": "$!gatewayResponseMessage"
},
{
"field_name": "GatewayReferenceId",
"field_value_expression": "$!refundId"
}
]
},
{
"payment_method_type": "CreditCard",
"operation_type": "Credit",
"support_idempotent_retry": true,
"transactions": [
{
"transaction_name": "createRefund",
"connector_type": "HTTPs",
"transaction_request_fields": [
{
"temporary": true,
"field_name": "_",
"field_value_expression": "
#{set}( $refundRequestMap = {

'metadata[zrefund_number]' : $!RefundNumber
} )
## construct card payment method data
#evaluate(${Block-Construct-Card-NonRefRefundData})

$refundRequestMap.putAll($macroReturn)
#{set}($blockInputs = [$RefundAmount, $Currency])
#evaluate(${Block-Normalize-Amount})
#{set}( $refundRequestMap['amount'] = $macroReturn )
#{set}( $refundRequestMap['currency'] = $Currency )

#{set}( $requestBody = $ZUtility.encodeUrlParameters($refundRequestMap) )

#{set}($blockInputs = [$refundRequestMap])
#evaluate(${Block-Create-Mask-Request-Map-Card-NonRefRefund})
#{set}( $maskedRequestBody = $ZUtility.encodeUrlParameters($macroReturn) )
"
},
{
"field_name": "URL",
"field_value_expression": "https://api.stripe.com/v1/refunds"
},
{
"field_name": "METHOD",
"field_value_expression": "POST"
},
{
"field_name": "Authorization",
"field_value_expression": "${Header-Authorization}"
},
{
"field_name": "Content-Type",
"field_value_expression": "${Header-Content-Type}"
},
{
"field_name": "Stripe-Version",
"field_value_expression": "${Header-Stripe-Version}"
},
{
"field_name": "REQUEST_BODY",
"field_value_expression": "${requestBody}"
},
{
"field_name": "Retry-Enabled",
"field_value_expression": "Yes"
},
{
"field_name": "Idempotency-Key",
"field_value_expression": "#{if}($StringUtils.isNotBlank(${Framework-Idempotency-Key}))${Framework-Idempotency-Key}#{else}$ZUtility.getUUID(255)#{end}"
}
],
"request_to_log": "Idempotency-Key=$!{Idempotency-Key},Request = [${maskedRequestBody}; URL = $!URL]",
"transaction_response_fields": [
{
"field_name": "_",
"field_value_expression": "
## Create masked response body
#{if} (!$StringUtils.equals($last_status_code, '200'))
#{set}( $maskedResponseBody = $last_message_body )
#{else}
## mask message body
#{set}( $maskedResponseBody = $last_message_body )
#{end}

#{if} (!$StringUtils.equals($last_status_code, '200'))
#{set}($blockInputs = [$last_message_body, $last_status_code])
#evaluate(${Block-Error-Handler})
#{stop}
#{else}
#{set}( $gatewayResponseCode = '200' )
#{set}( $gatewayResponseMessage = 'Approved' )
#{end}

## Parse Response JSON Document
#{set}( $refundResponseDoc = $ZUtility.parseJsonDocument($last_message_body) )

#{set}( $refundId = $refundResponseDoc.valueOf('/JsonRoot/id') )
#{set}( $refundStatus = $refundResponseDoc.valueOf('/JsonRoot/status') )

## the refund status could be one of following 4:
## 1. pending
## 2. succeeded
## 3. failed
## 4. canceled
## It will be considered Approved when the refund status is either 'pending'
## or 'succeeded'.
#{if} ($StringUtils.equals($refundStatus, 'succeeded') || $StringUtils.equals($refundStatus, 'pending'))
#{set}( $zuoraResponseCode = 'Approved' )
#{else}
#{set}( $zuoraResponseCode = 'Failed' )
#{end}
"
},
{
"in_transaction_log": "true",
"field_name": "ResponseBody",
"field_value_expression": "$maskedResponseBody"
},
{
"in_transaction_log": "true",
"field_name": "ResponseCode",
"field_value_expression": "$last_status_code"
}
],
"response_fsm_event_expression": "Success"
}
],
"operation_states": [
{
"start_state": "BEGIN",
"transaction_event": "",
"end_state": "createRefund"
}
],
"operation_response_fields": [
{
"field_name": "ZuoraResponseCode",
"field_value_expression": "$!zuoraResponseCode"
},
{
"field_name": "GatewayResponseCode",
"field_value_expression": "$!gatewayResponseCode"
},
{
"field_name": "GatewayResponseMessage",
"field_value_expression": "$!gatewayResponseMessage"
},
{
"field_name": "GatewayReferenceId",
"field_value_expression": "$!refundId"
}
]
},
{
"payment_method_type": "CreditCard",
"operation_type": "ThreeDS2EnrollCheck",
"transactions": [
{
"transaction_name": "CreateAndConfirmSetupIntent",
"connector_type": "HTTPs",
"transaction_request_fields": [
{
"temporary": true,
"field_name": "_",
"field_value_expression": "
## The SetupIntent Request Map
#{set}( $setupIntentRequestMap = {
'usage' : 'off_session',
'confirm' : 'true',
'expand[]' : 'latest_attempt'
} )

## construct card payment method data
#evaluate(${Block-Construct-Card-PaymentMethodData})

$setupIntentRequestMap.putAll($macroReturn)

#evaluate(${Block-Payment-Metadata})
$setupIntentRequestMap.putAll($macroMetadataReturn)

#evaluate(${Block-Add-IPAddress})
#{if}(!$macroReturn.isEmpty())
$setupIntentRequestMap.putAll($macroReturn)
#{else}#{end}

#{set}( $requestBody = $ZUtility.encodeUrlParameters($setupIntentRequestMap) )

#{set}($blockInputs = [$setupIntentRequestMap])
#evaluate(${Block-Create-Mask-Request-Map})
#{set}( $maskedRequestBody = $ZUtility.encodeUrlParameters($macroReturn) )
"
},
{
"field_name": "URL",
"field_value_expression": "https://api.stripe.com/v1/setup_intents"
},
{
"field_name": "METHOD",
"field_value_expression": "POST"
},
{
"field_name": "Authorization",
"field_value_expression": "${Header-Authorization}"
},
{
"field_name": "Content-Type",
"field_value_expression": "${Header-Content-Type}"
},
{
"field_name": "Stripe-Version",
"field_value_expression": "${Header-Stripe-Version}"
},
{
"field_name": "REQUEST_BODY",
"field_value_expression": "${requestBody}"
}
],
"request_to_log": "Request = [${maskedRequestBody}];url = [$!URL]",
"transaction_response_fields": [
{
"field_name": "_",
"field_value_expression": "
## Create masked response body
#{if} (!$StringUtils.equals($last_status_code, '200'))
#{set}( $maskedResponseBody = $last_message_body )
#{else}
## mask message body
#{set}( $maskedResponseBody = $last_message_body )
#{end}

#{if} (!$StringUtils.equals($last_status_code, '200'))
#{set}($blockInputs = [$last_message_body, $last_status_code])
#evaluate(${Block-Error-Handler})
#{stop}
#{else}
#{set}( $gatewayResponseCode = '200' )
#{set}( $gatewayResponseMessage = 'Approved' )
#{end}

## Parse Response JSON Document
#{set}( $createSiResponseDoc = $ZUtility.parseJsonDocument($last_message_body) )

#{set}( $setupIntentId = $createSiResponseDoc.valueOf('/JsonRoot/id') )
#{set}( $setupIntentClientSecret = $createSiResponseDoc.valueOf('/JsonRoot/client_secret') )
#{set}( $setupIntentNextActionType = $createSiResponseDoc.valueOf('/JsonRoot/next_action/type') )
#{set}( $setupIntentStatus = $createSiResponseDoc.valueOf('/JsonRoot/status') )

#{set}( $dsTransactionId = $createSiResponseDoc.valueOf('//latest_attempt/payment_method_details/card/ds_transaction_id') )
#{set}( $networkTransactionId = $createSiResponseDoc.valueOf('//latest_attempt/payment_method_details/card/network_transaction_id') )

#{if} ($StringUtils.equals($setupIntentStatus, 'succeeded'))
#{set}( $zuoraResponseCode = 'Approved' )
#{else}
#{set}( $zuoraResponseCode = 'Failed' )
#{end}

#{set}( $threeDS2DataMap = {
'setupIntentId' : $setupIntentId,
'setupIntentStatus' : $setupIntentStatus,
'setupIntentClientSecret' : $setupIntentClientSecret,
'setupIntentNextActionType' : $setupIntentNextActionType
} )

## encode 3DS2 data map
#{set}( $threeDS2ResponseData = $ZUtility.encodeUrlParameters($threeDS2DataMap) )
"
},
{
"in_transaction_log": "true",
"field_name": "ResponseBody",
"field_value_expression": "$maskedResponseBody"
},
{
"in_transaction_log": "true",
"field_name": "ResponseCode",
"field_value_expression": "$last_status_code"
}
],
"response_fsm_event_expression": "Success"
},
{
"transaction_request_fields": [
{
"field_name": "_",
"field_value_expression": "
#{if}($StringUtils.isNotBlank($threeDs_paymentReferenceId))
#{set}( $paymentIntentId = $threeDs_paymentReferenceId )
#{else}
#{set}( $paymentIntentId = '' )
#{end}
"
}
],
"transaction_name": "CheckInitOperation",
"connector_type": "Test",
"request_to_log": "threeDs_paymentRefernceId=$!paymentIntentId",
"transaction_response_fields": [],
"response_fsm_event_expression": "#{if}($StringUtils.isNotBlank($paymentIntentId))Success#{else}Error#{end}"
},
{
"transaction_name": "CreateAutoCustomer",
"connector_type": "HTTPs",
"transaction_request_fields": [
{
"temporary": true,
"field_name": "_",
"field_value_expression": "
## The Create Customer Request Map
#{set}( $createCustomerRequestMap = {
'description' : \"Auto customer by on session payment $paymentIntentId\"
} )

#{set}( $requestBody = $ZUtility.encodeUrlParameters($createCustomerRequestMap) )
"
},
{
"field_name": "URL",
"field_value_expression": "https://api.stripe.com/v1/customers"
},
{
"field_name": "METHOD",
"field_value_expression": "POST"
},
{
"field_name": "Authorization",
"field_value_expression": "${Header-Authorization}"
},
{
"field_name": "Content-Type",
"field_value_expression": "${Header-Content-Type}"
},
{
"field_name": "Stripe-Version",
"field_value_expression": "${Header-Stripe-Version}"
},
{
"field_name": "REQUEST_BODY",
"field_value_expression": "${requestBody}"
}
],
"request_to_log": "Request = [${requestBody}; URL = $!URL]",
"transaction_response_fields": [
{
"field_name": "_",
"field_value_expression": "
## Create masked response body
#{if} (!$StringUtils.equals($last_status_code, '200'))
#{set}( $maskedResponseBody = $last_message_body )
#{else}
## mask message body
#{set}( $maskedResponseBody = $last_message_body )
#{end}

#{if} (!$StringUtils.equals($last_status_code, '200'))
#{set}($blockInputs = [$last_message_body, $last_status_code])
#evaluate(${Block-Error-Handler})
#{stop}
#{else}
#{set}( $gatewayResponseCode = '200' )
#{set}( $gatewayResponseMessage = 'Approved' )
#{end}

## Parse Response JSON Document
#{set}( $createPiResponseDoc = $ZUtility.parseJsonDocument($last_message_body) )

#{set}( $gatewayCustomerId = $createPiResponseDoc.valueOf('/JsonRoot/id') )
"
},
{
"in_transaction_log": "true",
"field_name": "ResponseBody",
"field_value_expression": "$maskedResponseBody"
},
{
"in_transaction_log": "true",
"field_name": "ResponseCode",
"field_value_expression": "$last_status_code"
}
],
"response_fsm_event_expression": "#{if}($StringUtils.isNotBlank($gatewayCustomerId))Success#{else}Error#{end}"
},
{
"transaction_name": "UpdatePaymentIntentWithCardInfo",
"connector_type": "HTTPs",
"transaction_request_fields": [
{
"temporary": true,
"field_name": "_",
"field_value_expression": "
## The PaymentIntent Request Map
#{set}( $paymentIntentRequestMap = {
'customer' : $!gatewayCustomerId
} )

## construct card payment method data
#evaluate(${Block-Construct-Card-PaymentMethodData})
$paymentIntentRequestMap.putAll($macroReturn)

## construct india mandate parameters
#{if} ($StringUtils.equals($gwOptions_CardMandateEnabled, 'true'))
#{set} ($paymentIntentRequestMap['setup_future_usage'] = 'off_session')
#evaluate(${Block-Construct-Card-Mandate-Param})
$paymentIntentRequestMap.putAll($macroReturn)
#{end}

#{set}( $requestBody = $ZUtility.encodeUrlParameters($paymentIntentRequestMap) )

#{set}($blockInputs = [$paymentIntentRequestMap])
#evaluate(${Block-Create-Mask-Request-Map})
#{set}( $maskedRequestBody = $ZUtility.encodeUrlParameters($macroReturn) )
"
},
{
"field_name": "URL",
"field_value_expression": "https://api.stripe.com/v1/payment_intents/$paymentIntentId"
},
{
"field_name": "METHOD",
"field_value_expression": "POST"
},
{
"field_name": "Authorization",
"field_value_expression": "${Header-Authorization}"
},
{
"field_name": "Content-Type",
"field_value_expression": "${Header-Content-Type}"
},
{
"field_name": "Stripe-Version",
"field_value_expression": "${Header-Stripe-Version}"
},
{
"field_name": "REQUEST_BODY",
"field_value_expression": "${requestBody}"
}
],
"request_to_log": "Request = [${maskedRequestBody}; URL = $!URL]",
"transaction_response_fields": [
{
"field_name": "_",
"field_value_expression": "
## Create masked response body
#{if} (!$StringUtils.equals($last_status_code, '200'))
#{set}( $maskedResponseBody = $last_message_body )
#{else}
## mask message body
#{set}( $maskedResponseBody = $last_message_body )
#{end}

#{if} (!$StringUtils.equals($last_status_code, '200'))
#{set}($blockInputs = [$last_message_body, $last_status_code])
#evaluate(${Block-Error-Handler})
#{stop}
#{else}
#{set}( $gatewayResponseCode = '200' )
#{set}( $gatewayResponseMessage = 'Approved' )
#{end}
"
},
{
"in_transaction_log": "true",
"field_name": "ResponseBody",
"field_value_expression": "$maskedResponseBody"
},
{
"in_transaction_log": "true",
"field_name": "ResponseCode",
"field_value_expression": "$last_status_code"
}
],
"response_fsm_event_expression": "#{if}($StringUtils.equals($last_status_code, '200'))Success#{else}Error#{end}"
},
{
"transaction_name": "ConfirmInitPaymentIntent",
"connector_type": "HTTPs",
"transaction_request_fields": [
{
"temporary": true,
"field_name": "_",
"field_value_expression": "
## The PaymentIntent Request Map
#{set}( $paymentIntentRequestMap = {} )

## set RadarSessionId
#{if}($StringUtils.isNotBlank($!RadarSessionId))
#{set}( $paymentIntentRequestMap['radar_options[session]'] = $!RadarSessionId )
#{end}

#{set}( $requestBody = $ZUtility.encodeUrlParameters($paymentIntentRequestMap) )

#{set}($blockInputs = [$paymentIntentRequestMap])
#evaluate(${Block-Create-Mask-Request-Map})
#{set}( $maskedRequestBody = $ZUtility.encodeUrlParameters($macroReturn) )
"
},
{
"field_name": "URL",
"field_value_expression": "https://api.stripe.com/v1/payment_intents/$paymentIntentId/confirm"
},
{
"field_name": "METHOD",
"field_value_expression": "POST"
},
{
"field_name": "Authorization",
"field_value_expression": "${Header-Authorization}"
},
{
"field_name": "Content-Type",
"field_value_expression": "${Header-Content-Type}"
},
{
"field_name": "Stripe-Version",
"field_value_expression": "${Header-Stripe-Version}"
},
{
"field_name": "REQUEST_BODY",
"field_value_expression": "${requestBody}"
}
],
"request_to_log": "Request = ${maskedRequestBody}, [URL = $!URL]",
"transaction_response_fields": [
{
"field_name": "_",
"field_value_expression": "
## Create masked response body
#{if} (!$StringUtils.equals($last_status_code, '200'))
#{set}( $maskedResponseBody = $last_message_body )
#{else}
## mask message body
#{set}( $maskedResponseBody = $last_message_body )
#{end}

#{if} (!$StringUtils.equals($last_status_code, '200'))
#{set}($blockInputs = [$last_message_body, $last_status_code])
#evaluate(${Block-Error-Handler})
#{stop}
#{else}
#{set}( $gatewayResponseCode = '200' )
#{set}( $gatewayResponseMessage = 'Approved' )
#{end}

## Parse Response JSON Document
#{set}( $createPiResponseDoc = $ZUtility.parseJsonDocument($last_message_body) )

#{set}( $paymentIntentId = $createPiResponseDoc.valueOf('/JsonRoot/id') )
#{set}( $paymentIntentStatus = $createPiResponseDoc.valueOf('/JsonRoot/status') )
#{set}( $paymentIntentClientSecret = $createPiResponseDoc.valueOf('/JsonRoot/client_secret') )

#{set}( $zuoraResponseCode = 'Approved' )
#{set}( $networkTransactionId = $createPiResponseDoc.valueOf('//charges/data/ArrayItem[1]/payment_method_details/card/network_transaction_id') )
#{set}( $threeDS2DataMap = {
'paymentIntentId' : $paymentIntentId,
'paymentIntentStatus' : $paymentIntentStatus,
'paymentIntentClientSecret' : $paymentIntentClientSecret
} )

## encode 3DS2 data map
#{set}( $threeDS2ResponseData = $ZUtility.encodeUrlParameters($threeDS2DataMap) )
"
},
{
"in_transaction_log": "true",
"field_name": "ResponseBody",
"field_value_expression": "$maskedResponseBody"
},
{
"in_transaction_log": "true",
"field_name": "ResponseCode",
"field_value_expression": "$last_status_code"
},
{
"field_name": "ThreeDS2ResponseData",
"field_value_expression": "$!threeDS2ResponseData"
}
],
"response_fsm_event_expression": "Success"
}
],
"operation_states": [
{
"start_state": "BEGIN",
"transaction_event": "",
"end_state": "CheckInitOperation"
},
{
"start_state": "CheckInitOperation",
"transaction_event": "Error",
"end_state": "CreateAndConfirmSetupIntent"
},
{
"start_state": "CheckInitOperation",
"transaction_event": "Success",
"end_state": "CreateAutoCustomer"
},
{
"start_state": "CreateAutoCustomer",
"transaction_event": "Success",
"end_state": "UpdatePaymentIntentWithCardInfo"
},
{
"start_state": "UpdatePaymentIntentWithCardInfo",
"transaction_event": "Success",
"end_state": "ConfirmInitPaymentIntent"
}
],
"operation_response_fields": [
{
"field_name": "ZuoraResponseCode",
"field_value_expression": "$!zuoraResponseCode"
},
{
"field_name": "GatewayResponseCode",
"field_value_expression": "$!gatewayResponseCode"
},
{
"field_name": "GatewayResponseMessage",
"field_value_expression": "$!gatewayResponseMessage"
},
{
"field_name": "GatewayReferenceId",
"field_value_expression": "$!setupIntentId"
},
{
"field_name": "MITReceivedTXID",
"field_value_expression": "$!networkTransactionId"
},
{
"field_name": "MITReceivedToken1",
"field_value_expression": "$!dsTransactionId"
},
{
"field_name": "MITCompliant",
"field_value_expression": "$!MITCompliant"
},
{
"field_name": "ThreeDS2ResponseData",
"field_value_expression": "$!threeDS2ResponseData"
}
]
},
{
"payment_method_type": "CreditCardReferenceTransaction",
"operation_type": "ThreeDS2EnrollCheck",
"transactions": [
{
"transaction_name": "CreateAndConfirmSetupIntent",
"connector_type": "HTTPs",
"transaction_request_fields": [
{
"temporary": true,
"field_name": "_",
"field_value_expression": "
## The SetupIntent Request Map
#{set}( $setupIntentRequestMap = {
'usage' : 'off_session',
'confirm' : 'true',
'expand[]' : 'latest_attempt'
} )

## construct card payment method data
#evaluate(${Block-Construct-Card-PaymentMethodData})

$setupIntentRequestMap.putAll($macroReturn)

#evaluate(${Block-Add-IPAddress})
#{if}(!$macroReturn.isEmpty())
$setupIntentRequestMap.putAll($macroReturn)
#{else}#{end}

#evaluate(${Block-Payment-Metadata})
$setupIntentRequestMap.putAll($macroMetadataReturn)

## construct india mandate parameters
#{if} ($StringUtils.equals($gwOptions_CardMandateEnabled, 'true'))
#evaluate(${Block-Construct-Card-Mandate-Param})
$setupIntentRequestMap.putAll($macroReturn)
#{set}( $setupIntentRequestMap['payment_method_options[card][mandate_options][currency]'] = $Currency )
#{end}

#{if}($StringUtils.isNotEmpty($gatewayCustomerId))
#{set}( $setupIntentRequestMap['customer'] = $gatewayCustomerId )
#{end}

#{set}( $requestBody = $ZUtility.encodeUrlParameters($setupIntentRequestMap) )

#{set}($blockInputs = [$setupIntentRequestMap])
#evaluate(${Block-Create-Mask-Request-Map-CCRef})
#{set}( $maskedRequestBody = $ZUtility.encodeUrlParameters($macroReturn) )


"
},
{
"field_name": "URL",
"field_value_expression": "https://api.stripe.com/v1/setup_intents"
},
{
"field_name": "METHOD",
"field_value_expression": "POST"
},
{
"field_name": "Authorization",
"field_value_expression": "${Header-Authorization}"
},
{
"field_name": "Content-Type",
"field_value_expression": "${Header-Content-Type}"
},
{
"field_name": "Stripe-Version",
"field_value_expression": "${Header-Stripe-Version}"
},
{
"field_name": "REQUEST_BODY",
"field_value_expression": "${requestBody}"
}
],
"request_to_log": "Request = [${maskedRequestBody}];url = [$!URL]",
"transaction_response_fields": [
{
"field_name": "_",
"field_value_expression": "
## Create masked response body
#{if} (!$StringUtils.equals($last_status_code, '200'))
#{set}( $maskedResponseBody = $last_message_body )
#{else}
## mask message body
#{set}( $maskedResponseBody = $last_message_body )
#{end}

#{if} (!$StringUtils.equals($last_status_code, '200'))
#{set}($blockInputs = [$last_message_body, $last_status_code])
#evaluate(${Block-Error-Handler})
#{stop}
#{else}
#{set}( $gatewayResponseCode = '200' )
#{set}( $gatewayResponseMessage = 'Approved' )
#{end}

## Parse Response JSON Document
#{set}( $createSiResponseDoc = $ZUtility.parseJsonDocument($last_message_body) )

#{set}( $setupIntentId = $createSiResponseDoc.valueOf('/JsonRoot/id') )
#{set}( $setupIntentClientSecret = $createSiResponseDoc.valueOf('/JsonRoot/client_secret') )
#{set}( $setupIntentNextActionType = $createSiResponseDoc.valueOf('/JsonRoot/next_action/type') )
#{set}( $setupIntentStatus = $createSiResponseDoc.valueOf('/JsonRoot/status') )
#{set}( $setupIntentPmRef = $createSiResponseDoc.valueOf('/JsonRoot/payment_method') )
#{set}( $setupIntentCusRef = $createSiResponseDoc.valueOf('/JsonRoot/customer') )
#{set}( $dsTransactionId = $createSiResponseDoc.valueOf('//latest_attempt/payment_method_details/card/ds_transaction_id') )
#{set}( $networkTransactionId = $createSiResponseDoc.valueOf('//latest_attempt/payment_method_details/card/network_transaction_id') )

#{if} ($StringUtils.equals($setupIntentStatus, 'succeeded'))
#{set}( $zuoraResponseCode = 'Approved' )
#{elseif}($StringUtils.equals($setupIntentStatus, 'requires_action') && $StringUtils.equals($setupIntentNextActionType, 'use_stripe_sdk'))
#{set}( $zuoraResponseCode = 'Approved' )
#{else}
#{set}( $zuoraResponseCode = 'Failed' )
#{end}

#{set}( $threeDS2DataMap = {
'setupIntentId' : $setupIntentId,
'setupIntentStatus' : $setupIntentStatus,
'setupIntentClientSecret' : $setupIntentClientSecret,
'setupIntentNextActionType' : $setupIntentNextActionType,
'stripePaymentMethodId' : $setupIntentPmRef,
'stripeCustomerId' : $setupIntentCusRef
} )
## encode 3DS2 data map
#{set}( $threeDS2ResponseData = $ZUtility.encodeUrlParameters($threeDS2DataMap) )
"
},
{
"in_transaction_log": "true",
"field_name": "ResponseBody",
"field_value_expression": "$maskedResponseBody"
},
{
"in_transaction_log": "true",
"field_name": "ResponseCode",
"field_value_expression": "$last_status_code"
}
],
"response_fsm_event_expression": "Success"
},
{
"transaction_request_fields": [
{
"field_name": "_",
"field_value_expression": "
#{if}($StringUtils.isNotBlank($threeDs_paymentReferenceId))
#{set}( $paymentIntentId = $threeDs_paymentReferenceId )
#{else}
#{set}( $paymentIntentId = '' )
#{end}
"
}
],
"transaction_name": "CheckInitOperation",
"connector_type": "Test",
"request_to_log": "threeDs_paymentRefernceId=$!paymentIntentId",
"transaction_response_fields": [],
"response_fsm_event_expression": "#{if}($StringUtils.isNotBlank($paymentIntentId))Success#{else}Error#{end}"
},
{
"transaction_name": "CreateAutoCustomer",
"connector_type": "HTTPs",
"transaction_request_fields": [
{
"temporary": true,
"field_name": "_",
"field_value_expression": "
## Initialize macroReturn map
#{set}( $macroReturn = {
'name': '',
'address[line1]': '',
'address[line2]': '',
'address[postal_code]': '',
'address[city]': '',
'address[state]': '',
'address[country]': ''
})

## Populate 'name'
#if( $StringUtils.isNotBlank($!CreditCardHolderName) )
#{set}( $macroReturn['name'] = $CreditCardHolderName )
#{elseif} ( $StringUtils.isNotBlank($!BillToContactFirstName) )
#{set}( $macroReturn['name'] = $BillToContactFirstName )
#{elseif} ( $StringUtils.isNotBlank($!SoldToContactFirstName) )
#{set}( $macroReturn['name'] = $SoldToContactFirstName )
#end

## Populate 'address[line1]'
#if( $StringUtils.isNotBlank($!CreditCardAddress1) )
#{set}( $macroReturn['address[line1]'] = $CreditCardAddress1 )
#{elseif} ( $StringUtils.isNotBlank($!BillToContactAddress1) )
#{set}( $macroReturn['address[line1]'] = $BillToContactAddress1 )
#{elseif} ( $StringUtils.isNotBlank($!SoldToContactAddress1) )
#{set}( $macroReturn['address[line1]'] = $SoldToContactAddress1 )
#end

## Populate 'address[line2]'
#if( $StringUtils.isNotBlank($!CreditCardAddress2) )
#{set}( $macroReturn['address[line2]'] = $CreditCardAddress2 )
#{elseif} ( $StringUtils.isNotBlank($!BillToContactAddress2) )
#{set}( $macroReturn['address[line2]'] = $BillToContactAddress2 )
#{elseif} ( $StringUtils.isNotBlank($!SoldToContactAddress2) )
#{set}( $macroReturn['address[line2]'] = $SoldToContactAddress2 )
#end

## Populate 'address[postal_code]'
#if( $StringUtils.isNotBlank($!CreditCardPostalCode) )
#{set}( $macroReturn['address[postal_code]'] = $CreditCardPostalCode )
#{elseif} ( $StringUtils.isNotBlank($!BillToContactZip) )
#{set}( $macroReturn['address[postal_code]'] = $BillToContactZip )
#{elseif} ( $StringUtils.isNotBlank($!SoldToContactZip) )
#{set}( $macroReturn['address[postal_code]'] = $SoldToContactZip )
#end

## Populate 'address[city]'
#if( $StringUtils.isNotBlank($!CreditCardCity) )
#{set}( $macroReturn['address[city]'] = $CreditCardCity )
#{elseif} ( $StringUtils.isNotBlank($!BillToContactCity) )
#{set}( $macroReturn['address[city]'] = $BillToContactCity )
#{elseif} ( $StringUtils.isNotBlank($!SoldToContactCity) )
#{set}( $macroReturn['address[city]'] = $SoldToContactCity )
#end

## Populate 'address[state]'
#if( $StringUtils.isNotBlank($!CreditCardState) )
#{set}( $macroReturn['address[state]'] = $CreditCardState )
#{elseif} ( $StringUtils.isNotBlank($!BillToContactState) )
#{set}( $macroReturn['address[state]'] = $BillToContactState )
#{elseif} ( $StringUtils.isNotBlank($!SoldToContactState) )
#{set}( $macroReturn['address[state]'] = $SoldToContactState )
#end

## Populate 'address[country]'
#if( $StringUtils.isNotBlank($!CreditCardCountry) )
#{set}( $macroReturn['address[country]'] = $ZUtility.get2DigitCountryCode($!CreditCardCountry) )
#{elseif} ( $StringUtils.isNotBlank($!BillToContactCountry) )
#{set}( $macroReturn['address[country]'] = $ZUtility.get2DigitCountryCode($!BillToContactCountry) )
#{elseif} ( $StringUtils.isNotBlank($!SoldToContactCountry) )
#{set}( $macroReturn['address[country]'] = $ZUtility.get2DigitCountryCode($!SoldToContactCountry) )
#end

#{set}( $createCustomerRequestMap = {
'description' : \"Auto customer by on session payment $paymentIntentId\"
} )

#{if} ($StringUtils.equals($Feature-StripeCustomerAddress-Enabled, 'true'))
$createCustomerRequestMap.putAll($macroReturn)
#{end}
#{set}( $requestBody = $ZUtility.encodeUrlParameters($createCustomerRequestMap) )
"
},
{
"field_name": "URL",
"field_value_expression": "https://api.stripe.com/v1/customers"
},
{
"field_name": "METHOD",
"field_value_expression": "POST"
},
{
"field_name": "Authorization",
"field_value_expression": "${Header-Authorization}"
},
{
"field_name": "Content-Type",
"field_value_expression": "${Header-Content-Type}"
},
{
"field_name": "Stripe-Version",
"field_value_expression": "${Header-Stripe-Version}"
},
{
"field_name": "REQUEST_BODY",
"field_value_expression": "${requestBody}"
}
],
"request_to_log": "Request = [${requestBody}; URL = $!URL]",
"transaction_response_fields": [
{
"field_name": "_",
"field_value_expression": "
## Create masked response body
#{if} (!$StringUtils.equals($last_status_code, '200'))
#{set}( $maskedResponseBody = $last_message_body )
#{else}
## mask message body
#{set}( $maskedResponseBody = $last_message_body )
#{end}

#{if} (!$StringUtils.equals($last_status_code, '200'))
#{set}($blockInputs = [$last_message_body, $last_status_code])
#evaluate(${Block-Error-Handler})
#{stop}
#{else}
#{set}( $gatewayResponseCode = '200' )
#{set}( $gatewayResponseMessage = 'Approved' )
#{end}

## Parse Response JSON Document
#{set}( $createPiResponseDoc = $ZUtility.parseJsonDocument($last_message_body) )
#{set}( $gatewayCustomerId = $createPiResponseDoc.valueOf('/JsonRoot/id') )
"
},
{
"in_transaction_log": "true",
"field_name": "ResponseBody",
"field_value_expression": "$maskedResponseBody"
},
{
"in_transaction_log": "true",
"field_name": "ResponseCode",
"field_value_expression": "$last_status_code"
}
],
"response_fsm_event_expression": "#{if}($StringUtils.isNotBlank($gatewayCustomerId))Success#{else}Error#{end}"
},
{
"transaction_name": "UpdatePaymentIntentWithCardInfo",
"connector_type": "HTTPs",
"transaction_request_fields": [
{
"temporary": true,
"field_name": "_",
"field_value_expression": "
## The PaymentIntent Request Map
#{set}( $paymentIntentRequestMap = {
'customer' : $!gatewayCustomerId
} )
###########
## 'payment_method' : $setupIntentPmRef
## 3DS2 invalid_request_error
## The provided PaymentMethod cannot be attached.
## To reuse a PaymentMethod, you must attach it to a Customer first.
###########

## construct card payment method data
#evaluate(${Block-Construct-Card-PaymentMethodData})
$paymentIntentRequestMap.putAll($macroReturn)

## construct india mandate parameters
#{if} ($StringUtils.equals($gwOptions_CardMandateEnabled, 'true'))
#{set} ($paymentIntentRequestMap['setup_future_usage'] = 'off_session')
#evaluate(${Block-Construct-Card-Mandate-Param})
$paymentIntentRequestMap.putAll($macroReturn)
#{else}
## Providing this parameter will attach the payment method to the PaymentIntent’s Customer
#{set} ($paymentIntentRequestMap['setup_future_usage'] = 'on_session')
#{end}

#{set}( $requestBody = $ZUtility.encodeUrlParameters($paymentIntentRequestMap) )
#{set}($blockInputs = [$paymentIntentRequestMap])
#evaluate(${Block-Create-Mask-Request-Map-CCRef})
#{set}( $maskedRequestBody = $ZUtility.encodeUrlParameters($macroReturn) )
"
},
{
"field_name": "URL",
"field_value_expression": "https://api.stripe.com/v1/payment_intents/$paymentIntentId"
},
{
"field_name": "METHOD",
"field_value_expression": "POST"
},
{
"field_name": "Authorization",
"field_value_expression": "${Header-Authorization}"
},
{
"field_name": "Content-Type",
"field_value_expression": "${Header-Content-Type}"
},
{
"field_name": "Stripe-Version",
"field_value_expression": "${Header-Stripe-Version}"
},
{
"field_name": "REQUEST_BODY",
"field_value_expression": "${requestBody}"
}
],
"request_to_log": "Request = [${maskedRequestBody}; URL = $!URL]",
"transaction_response_fields": [
{
"field_name": "_",
"field_value_expression": "
## Create masked response body
#{if} (!$StringUtils.equals($last_status_code, '200'))
#{set}( $maskedResponseBody = $last_message_body )
#{else}
## mask message body
#{set}( $maskedResponseBody = $last_message_body )
#{end}

#{if} (!$StringUtils.equals($last_status_code, '200'))
#{set}($blockInputs = [$last_message_body, $last_status_code])
#evaluate(${Block-Error-Handler})
#{stop}
#{else}
#{set}( $gatewayResponseCode = '200' )
#{set}( $gatewayResponseMessage = 'Approved' )
#{end}
"
},
{
"in_transaction_log": "true",
"field_name": "ResponseBody",
"field_value_expression": "$maskedResponseBody"
},
{
"in_transaction_log": "true",
"field_name": "ResponseCode",
"field_value_expression": "$last_status_code"
}
],
"response_fsm_event_expression": "#{if}($StringUtils.equals($last_status_code, '200'))Success#{else}Error#{end}"
},
{
"transaction_name": "ConfirmInitPaymentIntent",
"connector_type": "HTTPs",
"transaction_request_fields": [
{
"temporary": true,
"field_name": "_",
"field_value_expression": "
## The PaymentIntent Request Map
#{set}( $paymentIntentRequestMap = {} )

## set RadarSessionId
#{if}($StringUtils.isNotBlank($!RadarSessionId))
#{set}( $paymentIntentRequestMap['radar_options[session]'] = $!RadarSessionId )
#{end}
## {set} ($paymentIntentRequestMap['payment_method'] = $setupIntentPmRef)

#{set}( $requestBody = $ZUtility.encodeUrlParameters($paymentIntentRequestMap) )

#{set}($blockInputs = [$paymentIntentRequestMap])
#evaluate(${Block-Create-Mask-Request-Map})
#{set}( $maskedRequestBody = $ZUtility.encodeUrlParameters($macroReturn) )
"
},
{
"field_name": "URL",
"field_value_expression": "https://api.stripe.com/v1/payment_intents/$paymentIntentId/confirm"
},
{
"field_name": "METHOD",
"field_value_expression": "POST"
},
{
"field_name": "Authorization",
"field_value_expression": "${Header-Authorization}"
},
{
"field_name": "Content-Type",
"field_value_expression": "${Header-Content-Type}"
},
{
"field_name": "Stripe-Version",
"field_value_expression": "${Header-Stripe-Version}"
},
{
"field_name": "REQUEST_BODY",
"field_value_expression": "${requestBody}"
}
],
"request_to_log": "Request = ${maskedRequestBody}, [URL = $!URL]",
"transaction_response_fields": [
{
"field_name": "_",
"field_value_expression": "
## Create masked response body

#{if} (!$StringUtils.equals($last_status_code, '200'))
#{set}( $maskedResponseBody = $last_message_body )
#{else}
## mask message body
#{set}( $maskedResponseBody = $last_message_body )
#{end}

#{if} (!$StringUtils.equals($last_status_code, '200'))
#{set}($blockInputs = [$last_message_body, $last_status_code])
#evaluate(${Block-Error-Handler})
#{stop}
#{else}
#{set}( $gatewayResponseCode = '200' )
#{set}( $gatewayResponseMessage = 'Approved' )
#{end}

## Parse Response JSON Document
#{set}( $createPiResponseDoc = $ZUtility.parseJsonDocument($last_message_body) )

#{set}( $paymentIntentId = $createPiResponseDoc.valueOf('/JsonRoot/id') )
#{set}( $paymentIntentStatus = $createPiResponseDoc.valueOf('/JsonRoot/status') )
#{set}( $paymentIntentClientSecret = $createPiResponseDoc.valueOf('/JsonRoot/client_secret') )

#{set}( $paymentIntentPaymentMethodRef = $createPiResponseDoc.valueOf('/JsonRoot/payment_method') )
#{set}( $paymentIntentCustomerRef = $createPiResponseDoc.valueOf('/JsonRoot/customer') )

#{set}( $zuoraResponseCode = 'Approved' )

#{set}( $threeDS2DataMap = {
'paymentIntentId' : $paymentIntentId,
'paymentIntentStatus' : $paymentIntentStatus,
'paymentIntentClientSecret' : $paymentIntentClientSecret,
'stripePaymentMethodId' : $paymentIntentPaymentMethodRef,
'stripeCustomerId' : $paymentIntentCustomerRef
} )

## encode 3DS2 data map
#{set}( $threeDS2ResponseData = $ZUtility.encodeUrlParameters($threeDS2DataMap) )
"
},
{
"in_transaction_log": "true",
"field_name": "ResponseBody",
"field_value_expression": "$maskedResponseBody"
},
{
"in_transaction_log": "true",
"field_name": "ResponseCode",
"field_value_expression": "$last_status_code"
},
{
"field_name": "ThreeDS2ResponseData",
"field_value_expression": "$!threeDS2ResponseData"
}
],
"response_fsm_event_expression": "Success"
}
],
"operation_states": [
{
"start_state": "BEGIN",
"transaction_event": "",
"end_state": "CreateAutoCustomer"
},
{
"start_state": "CreateAutoCustomer",
"transaction_event": "Success",
"end_state": "CheckInitOperation"
},
{
"start_state": "CheckInitOperation",
"transaction_event": "Error",
"end_state": "CreateAndConfirmSetupIntent"
},
{
"start_state": "CheckInitOperation",
"transaction_event": "Success",
"end_state": "UpdatePaymentIntentWithCardInfo"
},
{
"start_state": "UpdatePaymentIntentWithCardInfo",
"transaction_event": "Success",
"end_state": "ConfirmInitPaymentIntent"
}
],
"operation_response_fields": [
{
"field_name": "ZuoraResponseCode",
"field_value_expression": "$!zuoraResponseCode"
},
{
"field_name": "GatewayResponseCode",
"field_value_expression": "$!gatewayResponseCode"
},
{
"field_name": "GatewayResponseMessage",
"field_value_expression": "$!gatewayResponseMessage"
},
{
"field_name": "GatewayReferenceId",
"field_value_expression": "$!setupIntentId"
},
{
"field_name": "MITReceivedTXID",
"field_value_expression": "$!networkTransactionId"
},
{
"field_name": "MITReceivedToken1",
"field_value_expression": "$!dsTransactionId"
},
{
"field_name": "MITCompliant",
"field_value_expression": "$!MITCompliant"
},
{
"field_name": "ThreeDS2ResponseData",
"field_value_expression": "$!threeDS2ResponseData"
}
]
},

{
"payment_method_type": "CreditCardReferenceTransaction",
"operation_type": "ThreeDS2SubmitChallengeResult",
"transactions": [
{
"transaction_name": "RetrieveSetupIntent",
"connector_type": "HTTPs",
"transaction_request_fields": [
{
"temporary": true,
"field_name": "_",
"field_value_expression": "
#{if}($StringUtils.isNotEmpty($threeDs_setupIntentId))
#{set}( $setupIntentId = $threeDs_setupIntentId) )
#{else}
#{set}( $setupIntentId = 'missing_id') )
#{end}

## The SetupIntent Request Map
#{set}( $setupIntentRequestMap = {
'expand[]' : 'latest_attempt'
} )

#{set}( $requestBody = $ZUtility.encodeUrlParameters($setupIntentRequestMap) )
"
},
{
"field_name": "URL",
"field_value_expression": "https://api.stripe.com/v1/setup_intents/$setupIntentId"
},
{
"field_name": "METHOD",
"field_value_expression": "POST"
},
{
"field_name": "Authorization",
"field_value_expression": "${Header-Authorization}"
},
{
"field_name": "Content-Type",
"field_value_expression": "${Header-Content-Type}"
},
{
"field_name": "Stripe-Version",
"field_value_expression": "${Header-Stripe-Version}"
},
{
"field_name": "REQUEST_BODY",
"field_value_expression": "${requestBody}"
}
],
"request_to_log": "Request = [${requestBody}];URL=$URL",
"transaction_response_fields": [
{
"field_name": "_",
"field_value_expression": "
## Create masked response body
#{if} (!$StringUtils.equals($last_status_code, '200'))
#{set}( $maskedResponseBody = $last_message_body )
#{else}
## mask message body
#{set}( $maskedResponseBody = $last_message_body )
#{end}

#{if} (!$StringUtils.equals($last_status_code, '200'))
#{set}($blockInputs = [$last_message_body, $last_status_code])
#evaluate(${Block-Error-Handler})
#{stop}
#{else}
#{set}( $zuoraResponseCode = 'Approved' )
#{set}( $gatewayResponseCode = '200' )
#{set}( $gatewayResponseMessage = 'Approved' )
#{end}

## Parse Response JSON Document
#{set}( $retrieveSiResponseDoc = $ZUtility.parseJsonDocument($last_message_body) )

#{set}( $setupIntentId = $retrieveSiResponseDoc.valueOf('/JsonRoot/id') )
#{set}( $setupIntentClientSecret = $retrieveSiResponseDoc.valueOf('/JsonRoot/client_secret') )
#{set}( $setupIntentNextActionType = $retrieveSiResponseDoc.valueOf('/JsonRoot/next_action/type') )
#{set}( $setupIntentStatus = $retrieveSiResponseDoc.valueOf('/JsonRoot/status') )
#{set}( $setupIntentCusRef = $retrieveSiResponseDoc.valueOf('/JsonRoot/customer') )
#{set}( $setupIntentPmRef = $retrieveSiResponseDoc.valueOf('/JsonRoot/payment_method') )
#{set}( $dsTransactionId = $retrieveSiResponseDoc.valueOf('//latest_attempt/payment_method_details/card/ds_transaction_id') )
#{set}( $networkTransactionId = $retrieveSiResponseDoc.valueOf('//latest_attempt/payment_method_details/card/network_transaction_id') )
#{set}( $cardMandateId = $retrieveSiResponseDoc.valueOf('/JsonRoot/mandate') )

#{set}( $threeDS2DataMap = {
'setupIntentId' : $setupIntentId,
'setupIntentStatus' : $setupIntentStatus,
'setupIntentClientSecret' : $setupIntentClientSecret,
'setupIntentNextActionType' : $setupIntentNextActionType,
'stripePaymentMethodId' : $setupIntentPmRef,
'stripeCustomerId' : $setupIntentCusRef,
'cardMandateId' : $cardMandateId
} )

## encode 3DS2 data map
#{set}( $threeDS2ResponseData = $ZUtility.encodeUrlParameters($threeDS2DataMap) )
"
},
{
"in_transaction_log": "true",
"field_name": "ResponseBody",
"field_value_expression": "$maskedResponseBody"
},
{
"in_transaction_log": "true",
"field_name": "ResponseCode",
"field_value_expression": "$last_status_code"
}
],
"response_fsm_event_expression": "Success"
},
{
"transaction_request_fields": [
{
"field_name": "_",
"field_value_expression": "
#{if}($StringUtils.isNotBlank($!threeDs_paymentReferenceId))
#{set}( $paymentIntentId = $threeDs_paymentReferenceId )
#{end}
"
}],
"transaction_name": "CheckInitOperation",
"connector_type": "Test",
"request_to_log": "paymentIntentId=$!paymentIntentId",
"transaction_response_fields": [],
"response_fsm_event_expression": "#{if}($StringUtils.isNotBlank($!paymentIntentId))Success#{else}Error#{end}"
},
{
"transaction_name": "RetrieveExistingPaymentIntent",
"connector_type": "HTTPs",
"transaction_request_fields": [
{
"field_name": "URL",
"field_value_expression": "https://api.stripe.com/v1/payment_intents/$!threeDs_paymentReferenceId"
},
{
"field_name": "METHOD",
"field_value_expression": "GET"
},
{
"field_name": "Authorization",
"field_value_expression": "${Header-Authorization}"
},
{
"field_name": "Content-Type",
"field_value_expression": "${Header-Content-Type}"
},
{
"field_name": "Stripe-Version",
"field_value_expression": "${Header-Stripe-Version}"
}
],
"request_to_log": "Request = [${maskedRequestBody}; URL = $!URL]",
"transaction_response_fields": [
{
"field_name": "_",
"field_value_expression": "
## Create masked response body
#{if} (!$StringUtils.equals($last_status_code, '200'))
#{set}( $maskedResponseBody = $last_message_body )
#{else}
## mask message body
#{set}( $maskedResponseBody = $last_message_body )
#{end}

#{if} (!$StringUtils.equals($last_status_code, '200'))
#{set}($blockInputs = [$last_message_body, $last_status_code])
#evaluate(${Block-Error-Handler})
#{stop}
#{else}
#{set}( $gatewayResponseCode = '200' )
#{set}( $gatewayResponseMessage = 'Approved' )
#{end}

## Parse Response JSON Document
#{set}( $createPiResponseDoc = $ZUtility.parseJsonDocument($last_message_body) )

#{set}( $paymentIntentId = $createPiResponseDoc.valueOf('/JsonRoot/id') )
#{set}( $paymentIntentStatus = $createPiResponseDoc.valueOf('/JsonRoot/status') )
#{set}( $paymentIntentClientSecret = $createPiResponseDoc.valueOf('/JsonRoot/client_secret') )
#{set}( $paymentIntentPaymentMethodRef = $createPiResponseDoc.valueOf('/JsonRoot/payment_method') )
#{set}( $paymentIntentCustomerRef = $createPiResponseDoc.valueOf('/JsonRoot/customer') )
#{if} ($StringUtils.equals($paymentIntentStatus, 'requires_confirmation'))
#{set}( $zuoraResponseCode = 'Approved' )
#{else}
#{set}( $zuoraResponseCode = 'Error' )
#{end}

#{set}( $threeDS2DataMap = {
'paymentIntentId' : $paymentIntentId,
'paymentIntentStatus' : $paymentIntentStatus,
'paymentIntentClientSecret' : $paymentIntentClientSecret,
'stripePaymentMethodId' : $paymentIntentPaymentMethodRef,
'stripeCustomerId' : $paymentIntentCustomerRef
} )

## encode 3DS2 data map
#{set}( $threeDS2ResponseData = $ZUtility.encodeUrlParameters($threeDS2DataMap) )
"
},
{
"in_transaction_log": "true",
"field_name": "ResponseBody",
"field_value_expression": "$maskedResponseBody"
},
{
"in_transaction_log": "true",
"field_name": "ResponseCode",
"field_value_expression": "$last_status_code"
}
],
"response_fsm_event_expression": "Success"
}
],
"operation_states": [
{
"start_state": "BEGIN",
"transaction_event": "",
"end_state": "CheckInitOperation"
},
{
"start_state": "CheckInitOperation",
"transaction_event": "Error",
"end_state": "RetrieveSetupIntent"
},
{
"start_state": "CheckInitOperation",
"transaction_event": "Success",
"end_state": "RetrieveExistingPaymentIntent"
}
],
"operation_response_fields": [
{
"field_name": "ZuoraResponseCode",
"field_value_expression": "$!zuoraResponseCode"
},
{
"field_name": "GatewayResponseCode",
"field_value_expression": "$!gatewayResponseCode"
},
{
"field_name": "GatewayResponseMessage",
"field_value_expression": "$!gatewayResponseMessage"
},
{
"field_name": "GatewayReferenceId",
"field_value_expression": "$!setupIntentId"
},
{
"field_name": "MITReceivedTXID",
"field_value_expression": "$!networkTransactionId"
},
{
"field_name": "MITReceivedToken1",
"field_value_expression": "$!dsTransactionId"
},
{
"field_name": "MITCompliant",
"field_value_expression": "$!MITCompliant"
},
{
"field_name": "ThreeDS2ResponseData",
"field_value_expression": "$!threeDS2ResponseData"
}
]
},
{
"payment_method_type": "CreditCard",
"operation_type": "ThreeDS2SubmitChallengeResult",
"transactions": [
{
"transaction_name": "RetrieveSetupIntent",
"connector_type": "HTTPs",
"transaction_request_fields": [
{
"temporary": true,
"field_name": "_",
"field_value_expression": "
#{if}($StringUtils.isNotEmpty($threeDs_setupIntentId))
#{set}( $setupIntentId = $threeDs_setupIntentId) )
#{else}
#{set}( $setupIntentId = 'missing_id') )
#{end}

## The SetupIntent Request Map
#{set}( $setupIntentRequestMap = {
'expand[]' : 'latest_attempt'
} )

#{set}( $requestBody = $ZUtility.encodeUrlParameters($setupIntentRequestMap) )
"
},
{
"field_name": "URL",
"field_value_expression": "https://api.stripe.com/v1/setup_intents/$setupIntentId"
},
{
"field_name": "METHOD",
"field_value_expression": "POST"
},
{
"field_name": "Authorization",
"field_value_expression": "${Header-Authorization}"
},
{
"field_name": "Content-Type",
"field_value_expression": "${Header-Content-Type}"
},
{
"field_name": "Stripe-Version",
"field_value_expression": "${Header-Stripe-Version}"
},
{
"field_name": "REQUEST_BODY",
"field_value_expression": "${requestBody}"
}
],
"request_to_log": "Request = [${requestBody}];URL=$URL",
"transaction_response_fields": [
{
"field_name": "_",
"field_value_expression": "
## Create masked response body
#{if} (!$StringUtils.equals($last_status_code, '200'))
#{set}( $maskedResponseBody = $last_message_body )
#{else}
## mask message body
#{set}( $maskedResponseBody = $last_message_body )
#{end}

#{if} (!$StringUtils.equals($last_status_code, '200'))
#{set}($blockInputs = [$last_message_body, $last_status_code])
#evaluate(${Block-Error-Handler})
#{stop}
#{else}
#{set}( $zuoraResponseCode = 'Approved' )
#{set}( $gatewayResponseCode = '200' )
#{set}( $gatewayResponseMessage = 'Approved' )
#{end}

## Parse Response JSON Document
#{set}( $retrieveSiResponseDoc = $ZUtility.parseJsonDocument($last_message_body) )

#{set}( $setupIntentId = $retrieveSiResponseDoc.valueOf('/JsonRoot/id') )
#{set}( $setupIntentClientSecret = $retrieveSiResponseDoc.valueOf('/JsonRoot/client_secret') )
#{set}( $setupIntentNextActionType = $retrieveSiResponseDoc.valueOf('/JsonRoot/next_action/type') )
#{set}( $setupIntentStatus = $retrieveSiResponseDoc.valueOf('/JsonRoot/status') )

#{set}( $dsTransactionId = $retrieveSiResponseDoc.valueOf('//latest_attempt/payment_method_details/card/ds_transaction_id') )
#{set}( $networkTransactionId = $retrieveSiResponseDoc.valueOf('//latest_attempt/payment_method_details/card/network_transaction_id') )

#{set}( $threeDS2DataMap = {
'setupIntentId' : $setupIntentId,
'setupIntentStatus' : $setupIntentStatus,
'setupIntentClientSecret' : $setupIntentClientSecret,
'setupIntentNextActionType' : $setupIntentNextActionType
} )

## encode 3DS2 data map
#{set}( $threeDS2ResponseData = $ZUtility.encodeUrlParameters($threeDS2DataMap) )
"
},
{
"in_transaction_log": "true",
"field_name": "ResponseBody",
"field_value_expression": "$maskedResponseBody"
},
{
"in_transaction_log": "true",
"field_name": "ResponseCode",
"field_value_expression": "$last_status_code"
}
],
"response_fsm_event_expression": "Success"
},
{
"transaction_request_fields": [
{
"field_name": "_",
"field_value_expression": "
#{if}($StringUtils.isNotBlank($!threeDs_paymentReferenceId))
#{set}( $paymentIntentId = $threeDs_paymentReferenceId )
#{end}
"
}],
"transaction_name": "CheckInitOperation",
"connector_type": "Test",
"request_to_log": "paymentIntentId=$!paymentIntentId",
"transaction_response_fields": [],
"response_fsm_event_expression": "#{if}($StringUtils.isNotBlank($!paymentIntentId))Success#{else}Error#{end}"
},
{
"transaction_name": "RetrieveExistingPaymentIntent",
"connector_type": "HTTPs",
"transaction_request_fields": [
{
"field_name": "URL",
"field_value_expression": "https://api.stripe.com/v1/payment_intents/$!threeDs_paymentReferenceId"
},
{
"field_name": "METHOD",
"field_value_expression": "GET"
},
{
"field_name": "Authorization",
"field_value_expression": "${Header-Authorization}"
},
{
"field_name": "Content-Type",
"field_value_expression": "${Header-Content-Type}"
},
{
"field_name": "Stripe-Version",
"field_value_expression": "${Header-Stripe-Version}"
}
],
"request_to_log": "Request = [${maskedRequestBody}; URL = $!URL]",
"transaction_response_fields": [
{
"field_name": "_",
"field_value_expression": "
## Create masked response body
#{if} (!$StringUtils.equals($last_status_code, '200'))
#{set}( $maskedResponseBody = $last_message_body )
#{else}
## mask message body
#{set}( $maskedResponseBody = $last_message_body )
#{end}

#{if} (!$StringUtils.equals($last_status_code, '200'))
#{set}($blockInputs = [$last_message_body, $last_status_code])
#evaluate(${Block-Error-Handler})
#{stop}
#{else}
#{set}( $gatewayResponseCode = '200' )
#{set}( $gatewayResponseMessage = 'Approved' )
#{end}

## Parse Response JSON Document
#{set}( $createPiResponseDoc = $ZUtility.parseJsonDocument($last_message_body) )

#{set}( $paymentIntentId = $createPiResponseDoc.valueOf('/JsonRoot/id') )
#{set}( $paymentIntentStatus = $createPiResponseDoc.valueOf('/JsonRoot/status') )
#{set}( $paymentIntentClientSecret = $createPiResponseDoc.valueOf('/JsonRoot/client_secret') )

#{if} ($StringUtils.equals($paymentIntentStatus, 'requires_confirmation'))
#{set}( $zuoraResponseCode = 'Approved' )
#{else}
#{set}( $zuoraResponseCode = 'Error' )
#{end}

#{set}( $threeDS2DataMap = {
'paymentIntentId' : $paymentIntentId,
'paymentIntentStatus' : $paymentIntentStatus,
'paymentIntentClientSecret' : $paymentIntentClientSecret
} )

## encode 3DS2 data map
#{set}( $threeDS2ResponseData = $ZUtility.encodeUrlParameters($threeDS2DataMap) )
"
},
{
"in_transaction_log": "true",
"field_name": "ResponseBody",
"field_value_expression": "$maskedResponseBody"
},
{
"in_transaction_log": "true",
"field_name": "ResponseCode",
"field_value_expression": "$last_status_code"
}
],
"response_fsm_event_expression": "Success"
}
],
"operation_states": [
{
"start_state": "BEGIN",
"transaction_event": "",
"end_state": "CheckInitOperation"
},
{
"start_state": "CheckInitOperation",
"transaction_event": "Error",
"end_state": "RetrieveSetupIntent"
},
{
"start_state": "CheckInitOperation",
"transaction_event": "Success",
"end_state": "RetrieveExistingPaymentIntent"
}
],
"operation_response_fields": [
{
"field_name": "ZuoraResponseCode",
"field_value_expression": "$!zuoraResponseCode"
},
{
"field_name": "GatewayResponseCode",
"field_value_expression": "$!gatewayResponseCode"
},
{
"field_name": "GatewayResponseMessage",
"field_value_expression": "$!gatewayResponseMessage"
},
{
"field_name": "GatewayReferenceId",
"field_value_expression": "$!setupIntentId"
},
{
"field_name": "MITReceivedTXID",
"field_value_expression": "$!networkTransactionId"
},
{
"field_name": "MITReceivedToken1",
"field_value_expression": "$!dsTransactionId"
},
{
"field_name": "MITCompliant",
"field_value_expression": "$!MITCompliant"
},
{
"field_name": "ThreeDS2ResponseData",
"field_value_expression": "$!threeDS2ResponseData"
}
]
},
{
"payment_method_type": "CreditCardReferenceTransaction",
"operation_type": "Validate",
"transactions": [
{
"transaction_name": "VerifyTokenFormat",
"connector_type": "Test",
"transaction_request_fields": [
{
"temporary": true,
"field_name": "_",
"field_value_expression": "
##
## Zuora will not validate the token through gateway, instead
## Zuora only validate the format of token here.
##
## The customer id MUST start with 'cus_'.
## The payment method id MUST start with:
## 1, 'pm_' - a Stripe PaymentMethod
## 2, 'ba_' - a Stripe BankAccount
## 3, 'card_' - a Stripe Card
## 4, 'src_' - a Stripe Source
##

#{if}($!StringUtils.isNotBlank($!SecondTokenId))
#{set}( $customerId = $!SecondTokenId.trim() )
#{else}#{end}
#{set}( $paymentMethodId = $!TokenId.trim() )

#{if}(!$StringUtils.startsWithAny($paymentMethodId, 'pm_', 'ba_', 'card_', 'src_'))
#{set}( $zuoraResponseCode = 'Failed' )
#{set}( $gatewayResponseCode = '400' )
#{set}( $gatewayResponseMessage = 'Invalid payment method id.' )
#{else}
#{set}( $zuoraResponseCode = 'Approved' )
#{end}

## The Request Map
#{set}( $ccRefRequestMap = {
'customer' : $customerId,
'payment_method' : $ZUtility.maskTokenId($paymentMethodId)
} )
#{set}( $maskedRequestBody = $ZUtility.encodeUrlParameters($ccRefRequestMap) )
"
}
],
"request_to_log": "Request = [${maskedRequestBody}]",
"transaction_response_fields": [
{
"in_transaction_log": "true",
"field_name": "ResponseMessage",
"field_value_expression": "$!gatewayResponseMessage"
},
{
"in_transaction_log": "true",
"field_name": "ResponseCode",
"field_value_expression": "$!gatewayResponseCode"
}
],
"response_fsm_event_expression": "Success"
}
],
"operation_states": [
{
"start_state": "BEGIN",
"transaction_event": "",
"end_state": "VerifyTokenFormat"
}
],
"operation_response_fields": [
{
"field_name": "ZuoraResponseCode",
"field_value_expression": "$!zuoraResponseCode"
},
{
"field_name": "GatewayResponseCode",
"field_value_expression": "$!gatewayResponseCode"
},
{
"field_name": "GatewayResponseMessage",
"field_value_expression": "$!gatewayResponseMessage"
}
]
},
{
"payment_method_type": "CreditCardReferenceTransaction",
"operation_type": "Payment",
"support_idempotent_retry": true,
"transactions": [
{
"transaction_name": "CreateAndConfirmPaymentIntent",
"connector_type": "HTTPs",
"transaction_request_fields": [
{
"temporary": true,
"field_name": "_",
"field_value_expression": "
## The PaymentIntent Request Map
#{set}( $paymentIntentRequestMap = {
'off_session' : 'recurring',
'confirm' : 'true'
} )

#{set}($blockInputs = [$PaymentAmount, $Currency])
#evaluate(${Block-Normalize-Amount})
#{set}( $paymentIntentRequestMap['amount'] = $macroReturn )
#{set}( $paymentIntentRequestMap['currency'] = $!Currency )

#{if}( $StringUtils.isNotBlank($!gwOptions_PaymentDescription) )
#{set}( $paymentIntentRequestMap['description'] = $gwOptions_PaymentDescription )
#{elseif}( $StringUtils.isNotBlank($!PaymentDescription) )
#{set}( $paymentIntentRequestMap['description'] = $PaymentDescription )
#{end}

#evaluate(${Block-Payment-Metadata})
$paymentIntentRequestMap.putAll($macroMetadataReturn)

## set RadarSessionId
#{if}($StringUtils.isNotBlank($!RadarSessionId))
#{set}( $paymentIntentRequestMap['radar_options[session]'] = $!RadarSessionId )
#{end}
#{if}( $StringUtils.isNotBlank($!gwOptions_RadarSessionId) )
#{set}( $paymentIntentRequestMap['radar_options[session]'] = $gwOptions_RadarSessionId )
#{end}

#{if}( $StringUtils.equals($!DisableRadarRules, 'on') )
#{set}( $paymentIntentRequestMap['radar_options[skip_rules][]'] = 'all' )
#{end}

#{if}($StringUtils.isNotBlank($!SecondTokenId))
#{set}( $paymentIntentRequestMap['customer'] = $!SecondTokenId.trim() )
#{end}
#{set}( $paymentIntentRequestMap['payment_method'] = $!TokenId.trim() )

#{if}($StringUtils.isNotBlank($MandateID))
#{set}( $paymentIntentRequestMap['mandate'] = $MandateID )

##When the puppet setting is enabled, do not send e-mandate to stripe for over 15k INR payments from payment run
#{if} ($StringUtils.equals($Feature-IgnoreMandateIdInPaymentRunAboveINR15K-Enabled, 'true'))
#{set} ($paymentAmountInDecimal = $ZUtility.toDecimal($PaymentAmount))
#{set} ($minAmountInDecimal = $ZUtility.toDecimal('15000'))
#{if} ($StringUtils.equals($PaymentSource, 'PaymentRun') && $StringUtils.equals($Currency, 'INR')
&& $paymentAmountInDecimal.isGreaterThanOrEqualTo($minAmountInDecimal)) $paymentIntentRequestMap.remove('mandate') #{end}
#{end}
#{end}

#{if}($!EnableL3 && $!EnableL3.equals(\"on\"))
#evaluate(${Block-Construct-Level3-Data})
#{if}(!$macroReturn.isEmpty())
$paymentIntentRequestMap.putAll($macroReturn)
#{else}#{end}
#{else}#{end}

#{if} ($StringUtils.isNotBlank($SoftDescriptor))
#{set}($paymentIntentRequestMap['statement_descriptor_suffix'] = $ZUtility.truncateMaxLength($SoftDescriptor, '22'))
#{end}

#{set}( $requestBody = $ZUtility.encodeUrlParameters($paymentIntentRequestMap) )

#{set}( $paymentIntentRequestMap['payment_method'] = $ZUtility.maskTokenId($!TokenId.trim()) )
#{set}( $maskedRequestBody = $ZUtility.encodeUrlParameters($paymentIntentRequestMap) )
"
},
{
"field_name": "URL",
"field_value_expression": "https://api.stripe.com/v1/payment_intents"
},
{
"field_name": "METHOD",
"field_value_expression": "POST"
},
{
"field_name": "Authorization",
"field_value_expression": "${Header-Authorization}"
},
{
"field_name": "Content-Type",
"field_value_expression": "${Header-Content-Type}"
},
{
"field_name": "Stripe-Version",
"field_value_expression": "${Header-Stripe-Version}"
},
{
"field_name": "REQUEST_BODY",
"field_value_expression": "${requestBody}"
},
{
"field_name": "Retry-Enabled",
"field_value_expression": "Yes"
},
{
"field_name": "Idempotency-Key",
"field_value_expression": "#{if}($StringUtils.isNotBlank(${Framework-Idempotency-Key}))${Framework-Idempotency-Key}_withl3#{else}$ZUtility.getUUID(255)#{end}"
}
],
"request_to_log": "Idempotency-Key=$!{Idempotency-Key},Request = [${maskedRequestBody}; URL = $!URL]",
"transaction_response_fields": [
{
"field_name": "_",
"field_value_expression": "
## Create masked response body
#{if} (!$StringUtils.equals($last_status_code, '200'))
#{set}( $maskedResponseBody = $last_message_body )
#{else}
## mask message body
#{set}( $maskedResponseBody = $last_message_body )
#{end}

#{if} (!$StringUtils.equals($last_status_code, '200'))
#{set}($blockInputs = [$last_message_body, $last_status_code])
#evaluate(${Block-Error-Handler})
#{stop}
#{else}
#{set}( $gatewayResponseCode = '200' )
#{set}( $gatewayResponseMessage = 'Approved' )
#{end}

## Parse Response JSON Document
#{set}( $createPiResponseDoc = $ZUtility.parseJsonDocument($last_message_body) )

#{set}( $paymentIntentId = $createPiResponseDoc.valueOf('/JsonRoot/id') )
#{set}( $paymentIntentStatus = $createPiResponseDoc.valueOf('/JsonRoot/status') )
#{set}( $paymentIntentNextAction = $createPiResponseDoc.valueOf('/JsonRoot/next_action/type') )

## read data from first charge object
#{set}( $gatewayReferenceId = $createPiResponseDoc.valueOf('//charges/data/ArrayItem[1]/id') )
#{set}( $dsTransactionId = $createPiResponseDoc.valueOf('//charges/data/ArrayItem[1]/payment_method_details/card/ds_transaction_id') )
#{set}( $networkTransactionId = $createPiResponseDoc.valueOf('//charges/data/ArrayItem[1]/payment_method_details/card/network_transaction_id') )

## The payment intent status could be one of following
## 1, succeeded
## 2, processing
## 3, canceled
## 4, requires_payment_method
## 5, requires_confirmation
## 6, requires_action
## 7, requires_capture
## It will be considered Approved when the payment intent status is either 'processing'
## or 'succeeded'.

## When it is processing a subsequent payment using MandateId, there is not a charge object
## in the response. In such case, we use payment intent id as payment reference id.
#{if}($StringUtils.isBlank($gatewayReferenceId))
#{set}( $gatewayReferenceId = $paymentIntentId )
#{end}
#{if} ($StringUtils.equals($paymentIntentStatus, 'succeeded') || $StringUtils.equals($paymentIntentStatus, 'processing'))
#{set}( $zuoraResponseCode = 'Approved' )
#{elseif}($StringUtils.equals($paymentIntentStatus, 'requires_action') && $StringUtils.equals($paymentIntentNextAction, 'card_await_notification'))
#{set}( $zuoraResponseCode = 'Approved' )
#{else}
#{set}( $zuoraResponseCode = 'Failed' )
#{end}
"
},
{
"in_transaction_log": "true",
"field_name": "ResponseBody",
"field_value_expression": "$maskedResponseBody"
},
{
"in_transaction_log": "true",
"field_name": "ResponseCode",
"field_value_expression": "$last_status_code"
}
],
"response_fsm_event_expression": "#{if}($StringUtils.equals($zuoraResponseCode,'Approved'))Success#{else}Error#{end}"
},
{
"transaction_name": "CheckL3Error",
"connector_type": "Test",
"transaction_request_fields": [
{
"temporary": true,
"field_name": "_",
"field_value_expression": "
#{set}( $l3Error = false )
#{set}( $l3ErrorFound = false )

#{if}($!zuoraResponseCode.equals(\"Failed\"))
## get error value
#{set}( $createErrorResponseDoc = $ZUtility.parseJsonDocument($last_message_body) )
#{set}( $errorParam = $createErrorResponseDoc.valueOf('//error/param') )
#{if}($errorParam.contains(\"level3\"))
#{set}( $l3ErrorFound = true )
#{else}
#{end}
#{else}
#{end}

## check if downgrade option is enabled
#{if}($!EnableL3 && $!EnableL3.equals(\"on\") && $!L3Downgrade && $!L3Downgrade.equals(\"on\"))
#{set}( $l3Error = true )
#{else}
#{end}
"
}
],
"request_to_log": "#{if}($!l3ErrorFound && $!l3Error)L3 error found: $!errorParam.#{elseif}(!$!l3ErrorFound && !$!l3Error && $!EnableL3 && $!EnableL3.equals(\"on\") && $!L3Downgrade && $!L3Downgrade.equals(\"on\"))No L3 error found.#{else}L3 downgrade check disabled.#{end}",
"transaction_response_fields": [],
"response_fsm_event_expression": "#{if}($!l3ErrorFound && $!l3Error)Success#{else}Error#{end}"
},
{
"transaction_request_fields": [],
"transaction_name": "CheckExistingPayment",
"connector_type": "Test",
"request_to_log": "existingPaymentIntentId=$!ReferenceId",
"transaction_response_fields": [],
"response_fsm_event_expression": "#{if}($StringUtils.isNotBlank($ReferenceId))Success#{else}Error#{end}"
},
{
"transaction_name": "UpdatePaymentIntentWithPaymentNumber",
"connector_type": "HTTPs",
"transaction_request_fields": [
{
"temporary": true,
"field_name": "_",
"field_value_expression": "
## The PaymentIntent Request Map
#{set}( $paymentIntentRequestMap = {} )
## {set}( $paymentIntentRequestMap['metadata[zpayment_number]'] =  $!PaymentNumber)
#evaluate(${Block-Payment-Metadata})
$paymentIntentRequestMap.putAll($macroMetadataReturn)

#{set}( $requestBody = $ZUtility.encodeUrlParameters($paymentIntentRequestMap) )

#{set}($blockInputs = [$paymentIntentRequestMap])
#evaluate(${Block-Create-Mask-Request-Map})
#{set}( $maskedRequestBody = $ZUtility.encodeUrlParameters($macroReturn) )
"
},
{
"field_name": "URL",
"field_value_expression": "https://api.stripe.com/v1/payment_intents/$ReferenceId"
},
{
"field_name": "METHOD",
"field_value_expression": "POST"
},
{
"field_name": "Authorization",
"field_value_expression": "${Header-Authorization}"
},
{
"field_name": "Content-Type",
"field_value_expression": "${Header-Content-Type}"
},
{
"field_name": "Stripe-Version",
"field_value_expression": "${Header-Stripe-Version}"
},
{
"field_name": "REQUEST_BODY",
"field_value_expression": "${requestBody}"
},
{
"field_name": "Retry-Enabled",
"field_value_expression": "Yes"
},
{
"field_name": "Idempotency-Key",
"field_value_expression": "#{if}($StringUtils.isNotBlank(${Framework-Idempotency-Key}))${Framework-Idempotency-Key}_update#{else}$ZUtility.getUUID(255)#{end}"
}
],
"request_to_log": "Idempotency-Key=$!{Idempotency-Key},Request = [${maskedRequestBody}; URL = $!URL]",
"transaction_response_fields": [
{
"field_name": "_",
"field_value_expression": "
## Create masked response body
#{if} (!$StringUtils.equals($last_status_code, '200'))
#{set}( $maskedResponseBody = $last_message_body )
#{else}
## mask message body
#{set}( $maskedResponseBody = $last_message_body )
#{end}
#{if} (!$StringUtils.equals($last_status_code, '200'))
#{set}($blockInputs = [$last_message_body, $last_status_code])
#evaluate(${Block-Error-Handler})
#{stop}
#{else}
#{set}( $gatewayResponseCode = '200' )
#{set}( $gatewayResponseMessage = 'Approved' )
#{end}

## Parse Response JSON Document
#{set}( $createPiResponseDoc = $ZUtility.parseJsonDocument($last_message_body) )
#{set}( $paymentIntentId = $createPiResponseDoc.valueOf('/JsonRoot/id') )
#{set}( $paymentIntentStatus = $createPiResponseDoc.valueOf('/JsonRoot/status') )
#{if} ($StringUtils.equals($paymentIntentStatus, 'requires_confirmation') || $StringUtils.equals($paymentIntentStatus, 'succeeded'))
#{set}( $zuoraResponseCode = 'Success' )
#{else}
#{set}( $zuoraResponseCode = 'Error' )
#{end}
"
},
{
"in_transaction_log": "true",
"field_name": "ResponseBody",
"field_value_expression": "$maskedResponseBody"
},
{
"in_transaction_log": "true",
"field_name": "ResponseCode",
"field_value_expression": "$last_status_code"
}
],
"response_fsm_event_expression": "$!zuoraResponseCode"
},
{
"transaction_name": "RetrieveExistingPaymentIntent",
"connector_type": "HTTPs",
"transaction_request_fields": [
{
"field_name": "URL",
"field_value_expression": "https://api.stripe.com/v1/payment_intents/$ReferenceId"
},
{
"field_name": "METHOD",
"field_value_expression": "GET"
},
{
"field_name": "Authorization",
"field_value_expression": "${Header-Authorization}"
},
{
"field_name": "Content-Type",
"field_value_expression": "${Header-Content-Type}"
},
{
"field_name": "Stripe-Version",
"field_value_expression": "${Header-Stripe-Version}"
},
{
"field_name": "Retry-Enabled",
"field_value_expression": "Yes"
}
],
"request_to_log": "Request = [${maskedRequestBody}; URL = $!URL]",
"transaction_response_fields": [
{
"field_name": "_",
"field_value_expression": "
## Create masked response body
#{if} (!$StringUtils.equals($last_status_code, '200'))
#{set}( $maskedResponseBody = $last_message_body )
#{else}
## mask message body
#{set}( $maskedResponseBody = $last_message_body )
#{end}

#{if} (!$StringUtils.equals($last_status_code, '200'))
#{set}($blockInputs = [$last_message_body, $last_status_code])
#evaluate(${Block-Error-Handler})
#{stop}
#{else}
#{set}( $gatewayResponseCode = '200' )
#{set}( $gatewayResponseMessage = 'Approved' )
#{end}

## Parse Response JSON Document
#{set}( $createPiResponseDoc = $ZUtility.parseJsonDocument($last_message_body) )

#{set}( $paymentIntentId = $createPiResponseDoc.valueOf('/JsonRoot/id') )
#{set}( $paymentIntentStatus = $createPiResponseDoc.valueOf('/JsonRoot/status') )

## read data from first charge object
#{set}( $gatewayReferenceId = $createPiResponseDoc.valueOf('//charges/data/ArrayItem[1]/id') )
#{set}( $dsTransactionId = $createPiResponseDoc.valueOf('//charges/data/ArrayItem[1]/payment_method_details/card/ds_transaction_id') )
#{set}( $networkTransactionId = $createPiResponseDoc.valueOf('//charges/data/ArrayItem[1]/payment_method_details/card/network_transaction_id') )
#{set}( $gatewayCustomerId = $createPiResponseDoc.valueOf('/JsonRoot/customer') )
#{set}( $gatewayPaymentMethodId = $createPiResponseDoc.valueOf('/JsonRoot/payment_method') )
#{set}( $cardMandateId = $createPiResponseDoc.valueOf('//charges/data/ArrayItem[1]/payment_method_details/card/mandate') )

#{if} ($StringUtils.equals($paymentIntentStatus, 'succeeded'))
#{set}( $zuoraResponseCode = 'Approved' )
#{else}
#{set}( $zuoraResponseCode = 'Failed' )
#{end}
"
},
{
"in_transaction_log": "true",
"field_name": "ResponseBody",
"field_value_expression": "$maskedResponseBody"
},
{
"in_transaction_log": "true",
"field_name": "ResponseCode",
"field_value_expression": "$last_status_code"
}
],
"response_fsm_event_expression": "#{if}($StringUtils.equals($paymentIntentStatus,'succeeded'))Success#{else}Error#{end}"
},
{
"transaction_name": "ConfirmPaymentIntent",
"connector_type": "HTTPs",
"transaction_request_fields": [
{
"temporary": true,
"field_name": "_",
"field_value_expression": "
## The PaymentIntent Request Map
#{set}( $paymentIntentRequestMap = {} )

## set RadarSessionId
#{if}($StringUtils.isNotBlank($!RadarSessionId))
#{set}( $paymentIntentRequestMap['radar_options[session]'] = $!RadarSessionId )
#{end}
#{set}( $requestBody = $ZUtility.encodeUrlParameters($paymentIntentRequestMap) )
#{set}($blockInputs = [$paymentIntentRequestMap])
#evaluate(${Block-Create-Mask-Request-Map})
#{set}( $maskedRequestBody = $ZUtility.encodeUrlParameters($macroReturn) )
"
},
{
"field_name": "URL",
"field_value_expression": "https://api.stripe.com/v1/payment_intents/$ReferenceId/confirm"
},
{
"field_name": "METHOD",
"field_value_expression": "POST"
},
{
"field_name": "Authorization",
"field_value_expression": "${Header-Authorization}"
},
{
"field_name": "Content-Type",
"field_value_expression": "${Header-Content-Type}"
},
{
"field_name": "Stripe-Version",
"field_value_expression": "${Header-Stripe-Version}"
},
{
"field_name": "REQUEST_BODY",
"field_value_expression": "${requestBody}"
},
{
"field_name": "Retry-Enabled",
"field_value_expression": "Yes"
},
{
"field_name": "Idempotency-Key",
"field_value_expression": "#{if}($StringUtils.isNotBlank(${Framework-Idempotency-Key}))${Framework-Idempotency-Key}_confirm#{else}$ZUtility.getUUID(255)#{end}"
}
],
"request_to_log": "Idempotency-Key=$!{Idempotency-Key},Request = ${$maskedRequestBody}, [URL = $!URL]",
"transaction_response_fields": [
{
"field_name": "_",
"field_value_expression": "
## Create masked response body
#{if} (!$StringUtils.equals($last_status_code, '200'))
#{set}( $maskedResponseBody = $last_message_body )
#{else}
## mask message body
#{set}( $maskedResponseBody = $!ZUtility.updateMapInJSON($!last_message_body, 'charges', '*****') )
#{end}

#{if} (!$StringUtils.equals($last_status_code, '200'))
#{set}($blockInputs = [$last_message_body, $last_status_code])
#evaluate(${Block-Error-Handler})

## check error code
#{if}($StringUtils.equals($stripeErrorCode, 'payment_intent_unexpected_state'))
#evaluate(${Block-Last-Payment-Error-Handler})
#{end}

#{stop}
#{else}
#{set}( $gatewayResponseCode = '200' )
#{set}( $gatewayResponseMessage = 'Approved' )
#{end}

## Parse Response JSON Document
#{set}( $createPiResponseDoc = $ZUtility.parseJsonDocument($last_message_body) )

#{set}( $paymentIntentId = $createPiResponseDoc.valueOf('/JsonRoot/id') )
#{set}( $paymentIntentStatus = $createPiResponseDoc.valueOf('/JsonRoot/status') )

## read data from first charge object
#{set}( $gatewayReferenceId = $createPiResponseDoc.valueOf('//charges/data/ArrayItem[1]/id') )
#{set}( $dsTransactionId = $createPiResponseDoc.valueOf('//charges/data/ArrayItem[1]/payment_method_details/card/ds_transaction_id') )
#{set}( $networkTransactionId = $createPiResponseDoc.valueOf('//charges/data/ArrayItem[1]/payment_method_details/card/network_transaction_id') )
#{set}( $gatewayCustomerId = $createPiResponseDoc.valueOf('/JsonRoot/customer') )
#{set}( $gatewayPaymentMethodId = $createPiResponseDoc.valueOf('/JsonRoot/payment_method') )
#{set}( $cardMandateId = $createPiResponseDoc.valueOf('//charges/data/ArrayItem[1]/payment_method_details/card/mandate') )

#{if} ($StringUtils.equals($paymentIntentStatus, 'succeeded'))
#{set}( $zuoraResponseCode = 'Approved' )
#{else}
#{set}( $zuoraResponseCode = 'Failed' )
#{end}
"
},
{
"in_transaction_log": "true",
"field_name": "ResponseBody",
"field_value_expression": "$maskedResponseBody"
},
{
"in_transaction_log": "true",
"field_name": "ResponseCode",
"field_value_expression": "$last_status_code"
},
{
"field_name": "ThreeDS2ResponseData",
"field_value_expression": "$!threeDS2ResponseData"
}
],
"response_fsm_event_expression": "#{if}($StringUtils.equals($paymentIntentStatus,'succeeded'))Success#{else}Error#{end}"
},
{
"transaction_name": "CreateAndConfirmPaymentIntentWithoutL3",
"connector_type": "HTTPs",
"transaction_request_fields": [
{
"temporary": true,
"field_name": "_",
"field_value_expression": "
## The PaymentIntent Request Map
#{set}( $paymentIntentRequestMap = {
'off_session' : 'recurring',
'confirm' : 'true'
} )

#{set}($blockInputs = [$PaymentAmount, $Currency])
#evaluate(${Block-Normalize-Amount})
#{set}( $paymentIntentRequestMap['amount'] = $macroReturn )
#{set}( $paymentIntentRequestMap['currency'] = $!Currency )

#{if}( $StringUtils.isNotBlank($!PaymentDescription) )
#{set}( $paymentIntentRequestMap['description'] = $!PaymentDescription )
#{end}

#{set}( $paymentIntentRequestMap['metadata[zpayment_number]'] = $!PaymentNumber )
#{if}($StringUtils.isNotBlank($!SecondTokenId))
#{set}( $paymentIntentRequestMap['customer'] = $!SecondTokenId )
#{end}
#{set}( $paymentIntentRequestMap['payment_method'] = $!TokenId )

#{if}($StringUtils.isNotBlank($MandateID))
#{set}( $paymentIntentRequestMap['mandate'] = $MandateID )
#{end}

#{if}( $StringUtils.isNotBlank($!gwOptions_RadarSessionId) )
#{set}( $paymentIntentRequestMap['radar_options[session]'] = $gwOptions_RadarSessionId )
#{end}

#{if}( $StringUtils.equals($!DisableRadarRules, 'on') )
#{set}( $paymentIntentRequestMap['radar_options[skip_rules][]'] = 'all' )
#{end}

#{set}( $requestBody = $ZUtility.encodeUrlParameters($paymentIntentRequestMap) )

#{set}( $paymentIntentRequestMap['payment_method'] = $ZUtility.maskTokenId($!TokenId) )
#{set}( $maskedRequestBody = $ZUtility.encodeUrlParameters($paymentIntentRequestMap) )
"
},
{
"field_name": "URL",
"field_value_expression": "https://api.stripe.com/v1/payment_intents"
},
{
"field_name": "METHOD",
"field_value_expression": "POST"
},
{
"field_name": "Authorization",
"field_value_expression": "${Header-Authorization}"
},
{
"field_name": "Content-Type",
"field_value_expression": "${Header-Content-Type}"
},
{
"field_name": "Stripe-Version",
"field_value_expression": "${Header-Stripe-Version}"
},
{
"field_name": "REQUEST_BODY",
"field_value_expression": "${requestBody}"
},
{
"field_name": "Retry-Enabled",
"field_value_expression": "Yes"
},
{
"field_name": "Idempotency-Key",
"field_value_expression": "#{if}($StringUtils.isNotBlank(${Framework-Idempotency-Key}))${Framework-Idempotency-Key}_withoutl3#{else}$ZUtility.getUUID(255)#{end}"
}
],
"request_to_log": "Idempotency-Key=$!{Idempotency-Key},Request = [${maskedRequestBody}; URL = $!URL]",
"transaction_response_fields": [
{
"field_name": "_",
"field_value_expression": "
## Create masked response body
#{if} (!$StringUtils.equals($last_status_code, '200'))
#{set}( $maskedResponseBody = $last_message_body )
#{else}
## mask message body
#{set}( $maskedResponseBody = $last_message_body )
#{end}

#{if} (!$StringUtils.equals($last_status_code, '200'))
#{set}($blockInputs = [$last_message_body, $last_status_code])
#evaluate(${Block-Error-Handler})
#{stop}
#{else}
#{set}( $gatewayResponseCode = '200' )
#{set}( $gatewayResponseMessage = 'Approved' )
#{if}($l3Error)
#{set}( $l3DowngradeMessage = \"[L3 Data Downgraded] \" )
#{set}( $gatewayResponseMessage = \"$l3DowngradeMessage$gatewayResponseMessage\" )
#{else}#{end}
#{end}

## Parse Response JSON Document
#{set}( $createPiResponseDoc = $ZUtility.parseJsonDocument($last_message_body) )

#{set}( $paymentIntentId = $createPiResponseDoc.valueOf('/JsonRoot/id') )
#{set}( $paymentIntentStatus = $createPiResponseDoc.valueOf('/JsonRoot/status') )
#{set}( $paymentIntentNextAction = $createPiResponseDoc.valueOf('/JsonRoot/next_action/type') )

## read data from first charge object
#{set}( $gatewayReferenceId = $createPiResponseDoc.valueOf('//charges/data/ArrayItem[1]/id') )
#{set}( $dsTransactionId = $createPiResponseDoc.valueOf('//charges/data/ArrayItem[1]/payment_method_details/card/ds_transaction_id') )
#{set}( $networkTransactionId = $createPiResponseDoc.valueOf('//charges/data/ArrayItem[1]/payment_method_details/card/network_transaction_id') )

## The payment intent status could be one of following
## 1, succeeded
## 2, processing
## 3, canceled
## 4, requires_payment_method
## 5, requires_confirmation
## 6, requires_action
## 7, requires_capture
## It will be considered Approved when the payment intent status is either 'processing'
## or 'succeeded'.

## When it is processing a subsequent payment using MandateId, there is not a charge object
## in the response. In such case, we use payment intent id as payment reference id.
#{if}($StringUtils.isBlank($gatewayReferenceId))
#{set}( $gatewayReferenceId = $paymentIntentId )
#{end}

#{if} ($StringUtils.equals($paymentIntentStatus, 'succeeded') || $StringUtils.equals($paymentIntentStatus, 'processing'))
#{set}( $zuoraResponseCode = 'Approved' )
#{elseif}($StringUtils.equals($paymentIntentStatus, 'requires_action') && $StringUtils.equals($paymentIntentNextAction, 'card_await_notification'))
#{set}( $zuoraResponseCode = 'Approved' )
#{else}
#{set}( $zuoraResponseCode = 'Failed' )
#{end}
"
},
{
"in_transaction_log": "true",
"field_name": "ResponseBody",
"field_value_expression": "$maskedResponseBody"
},
{
"in_transaction_log": "true",
"field_name": "ResponseCode",
"field_value_expression": "$last_status_code"
}
],
"response_fsm_event_expression": "Success"
}
],
"operation_states": [
{
"start_state": "BEGIN",
"transaction_event": "",
"end_state": "CheckExistingPayment"
},
{
"start_state": "CheckExistingPayment",
"transaction_event": "Success",
"end_state": "UpdatePaymentIntentWithPaymentNumber"
},
{
"start_state": "UpdatePaymentIntentWithPaymentNumber",
"transaction_event": "Success",
"end_state": "RetrieveExistingPaymentIntent"
},
{
"start_state": "RetrieveExistingPaymentIntent",
"transaction_event": "Error",
"end_state": "ConfirmPaymentIntent"
},
{
"start_state": "CheckExistingPayment",
"transaction_event": "Error",
"end_state": "CreateAndConfirmPaymentIntent"
},
{
"start_state": "CreateAndConfirmPaymentIntent",
"transaction_event": "Error",
"end_state": "CheckL3Error"
},
{
"start_state": "CheckL3Error",
"transaction_event": "Success",
"end_state": "CreateAndConfirmPaymentIntentWithoutL3"
}
],
"operation_response_fields": [
{
"field_name": "ZuoraResponseCode",
"field_value_expression": "$!zuoraResponseCode"
},
{
"field_name": "GatewayResponseCode",
"field_value_expression": "$!gatewayResponseCode"
},
{
"field_name": "GatewayResponseMessage",
"field_value_expression": "$!gatewayResponseMessage"
},
{
"field_name": "GatewayReferenceId",
"field_value_expression": "$!gatewayReferenceId"
},
{
"field_name": "MITReceivedTXID",
"field_value_expression": "$!networkTransactionId"
},
{
"field_name": "MITReceivedToken1",
"field_value_expression": "$!dsTransactionId"
},
{
"field_name": "GatewayCustomerId",
"field_value_expression": "$!gatewayCustomerId"
},
{
"field_name": "GatewayPaymentMethodId",
"field_value_expression": "$!gatewayPaymentMethodId"
},
{
"field_name": "ResponseMandateId",
"field_value_expression": "$!cardMandateId"
}
]
},
{
"payment_method_type": "CreditCardReferenceTransaction",
"operation_type": "Refund",
"support_idempotent_retry": true,
"transactions": [
{
"transaction_name": "createRefund",
"connector_type": "HTTPs",
"transaction_request_fields": [
{
"temporary": true,
"field_name": "_",
"field_value_expression": "
#{set}( $refundRequestMap = {
'metadata[zrefund_number]' : $!RefundNumber
} )

## set field according to reference id prefix
#{if}($StringUtils.startsWith($ReferenceId, 'pi_'))
#{set}( $refundRequestMap['payment_intent'] = $ReferenceId )
#{else}
#{set}( $refundRequestMap['charge'] = $ReferenceId )
#{end}

#{set}($blockInputs = [$RefundAmount, $Currency])
#evaluate(${Block-Normalize-Amount})
#{set}( $refundRequestMap['amount'] = $macroReturn )

#{set}( $requestBody = $ZUtility.encodeUrlParameters($refundRequestMap) )
"
},
{
"field_name": "URL",
"field_value_expression": "https://api.stripe.com/v1/refunds"
},
{
"field_name": "METHOD",
"field_value_expression": "POST"
},
{
"field_name": "Authorization",
"field_value_expression": "${Header-Authorization}"
},
{
"field_name": "Content-Type",
"field_value_expression": "${Header-Content-Type}"
},
{
"field_name": "Stripe-Version",
"field_value_expression": "${Header-Stripe-Version}"
},
{
"field_name": "REQUEST_BODY",
"field_value_expression": "${requestBody}"
},
{
"field_name": "Retry-Enabled",
"field_value_expression": "Yes"
},
{
"field_name": "Idempotency-Key",
"field_value_expression": "#{if}($StringUtils.isNotBlank(${Framework-Idempotency-Key}))${Framework-Idempotency-Key}#{else}$ZUtility.getUUID(255)#{end}"
}
],
"request_to_log": "Idempotency-Key=$!{Idempotency-Key},Request = [${requestBody}; URL = $!URL]",
"transaction_response_fields": [
{
"field_name": "_",
"field_value_expression": "
## Create masked response body
#{if} (!$StringUtils.equals($last_status_code, '200'))
#{set}( $maskedResponseBody = $last_message_body )
#{else}
## mask message body
#{set}( $maskedResponseBody = $last_message_body )
#{end}

#{if} (!$StringUtils.equals($last_status_code, '200'))
#{set}($blockInputs = [$last_message_body, $last_status_code])
#evaluate(${Block-Error-Handler})
#{stop}
#{else}
#{set}( $gatewayResponseCode = '200' )
#{set}( $gatewayResponseMessage = 'Approved' )
#{end}

## Parse Response JSON Document
#{set}( $refundResponseDoc = $ZUtility.parseJsonDocument($last_message_body) )

#{set}( $refundId = $refundResponseDoc.valueOf('/JsonRoot/id') )
#{set}( $refundStatus = $refundResponseDoc.valueOf('/JsonRoot/status') )

## the refund status could be one of following 4:
## 1. pending
## 2. succeeded
## 3. failed
## 4. canceled
## It will be considered Approved when the refund status is either 'pending'
## or 'succeeded'.
#{if} ($StringUtils.equals($refundStatus, 'succeeded') || $StringUtils.equals($refundStatus, 'pending'))
#{set}( $zuoraResponseCode = 'Approved' )
#{else}
#{set}( $zuoraResponseCode = 'Failed' )
#{end}
"
},
{
"in_transaction_log": "true",
"field_name": "ResponseBody",
"field_value_expression": "$maskedResponseBody"
},
{
"in_transaction_log": "true",
"field_name": "ResponseCode",
"field_value_expression": "$last_status_code"
}
],
"response_fsm_event_expression": "Success"
}
],
"operation_states": [
{
"start_state": "BEGIN",
"transaction_event": "",
"end_state": "createRefund"
}
],
"operation_response_fields": [
{
"field_name": "ZuoraResponseCode",
"field_value_expression": "$!zuoraResponseCode"
},
{
"field_name": "GatewayResponseCode",
"field_value_expression": "$!gatewayResponseCode"
},
{
"field_name": "GatewayResponseMessage",
"field_value_expression": "$!gatewayResponseMessage"
},
{
"field_name": "GatewayReferenceId",
"field_value_expression": "$!refundId"
}
]
},
{
"payment_method_type": "ACH",
"operation_type": "Validate",
"transactions": [
{
"transaction_name": "IsNewTokenFormat",
"connector_type": "Test",
"transaction_request_fields": [
{
"temporary": true,
"field_name": "_",
"field_value_expression": "
#{set}( $customerId = $!SecondTokenId )
#{set}( $paymentMethodId = $!TokenId )

#{if}($StringUtils.equalsIgnoreCase($Feature-ACHTokenizationSupport-Enabled, 'true') && $StringUtils.startsWith($paymentMethodId, 'pm_') && $StringUtils.startsWith($customerId, 'cus_'))
#set( $isNewFormat = 'Success' )
#{else}
#{set}( $isNewFormat = 'Error' )
#{end}
"
}
],
"request_to_log": "Check if Tokens are in new format(Stripe Customer ID and Stripe PM ID)",
"transaction_response_fields": [
{
"in_transaction_log": "true",
"field_name": "txEventResult",
"field_value_expression": "$!isNewFormat"
}
],
"response_fsm_event_expression": "$!isNewFormat"
},
{
"transaction_name": "GetCustomerById",
"connector_type": "HTTPs",
"transaction_request_fields": [
{
"temporary": true,
"field_name": "_",
"field_value_expression": "
## mask customer ID
#{set}( $maskedCustomerID = $ZUtility.mask($SecondTokenId) )
"
},
{
"field_name": "URL",
"field_value_expression": "https://api.stripe.com/v1/customers/$SecondTokenId"
},
{
"field_name": "METHOD",
"field_value_expression": "GET"
},
{
"field_name": "Authorization",
"field_value_expression": "${Header-Authorization}"
},
{
"field_name": "Stripe-Version",
"field_value_expression": "${Header-Stripe-Version}"
}
],
"request_to_log": "Request = [GET https://api.stripe.com/v1/customers/$maskedCustomerID]",
"transaction_response_fields": [
{
"field_name": "_",
"field_value_expression": "
## Create masked response body
#{set}( $maskedResponseBody = $last_message_body )

#{set}( $striptAccountStatus = 'Unknown' )
#{set}( $transactionEvent = 'Success' )
#{if} ($StringUtils.equals($last_status_code, '404'))
## Account does not exist
#{set}( $transactionEvent = 'Error' )
#{set}( $zuoraResponseCode = 'Failed' )
#{set}( $gatewayResponseCode = '404' )
#{set}( $gatewayResponseMessage = 'Customer Account is not found' )
#{stop}
#{elseif} ($StringUtils.equals($last_status_code, '200'))
#{set}( $accountResponseDoc = $ZUtility.parseJsonDocument($last_message_body) )
#{set}( $gatewayResponseCode = '200' )

## Check delete status
#{set}( $accountDeleteFlag = $accountResponseDoc.valueOf('/JsonRoot/deleted') )
#{if} ($StringUtils.equals($accountDeleteFlag, 'true'))
#{set}( $transactionEvent = 'Error' )
#{set}( $zuoraResponseCode = 'Failed' )
#{set}( $gatewayResponseMessage = 'Customer Account is not in active state' )
#{stop}
#{else}
#{set}( $transactionEvent = 'Success' )
#{set}( $stripeAccountId = $SecondTokenId )
#{end}
#{else}
#{set}( $transactionEvent = 'Error' )
#{set}($blockInputs = [$last_message_body, $last_status_code])
#evaluate(${Block-Error-Handler})
#{stop}
#{end}
"
},
{
"in_transaction_log": "true",
"field_name": "ResponseBody",
"field_value_expression": "$maskedResponseBody"
},
{
"in_transaction_log": "true",
"field_name": "ResponseCode",
"field_value_expression": "$last_status_code"
}
],
"response_fsm_event_expression": "$transactionEvent"
},
{
"transaction_name": "GetPaymentMethodById",
"connector_type": "HTTPs",
"transaction_request_fields": [
{
"temporary": true,
"field_name": "_",
"field_value_expression": "
## mask payment method ID
#{set}( $maskedPMID = $ZUtility.mask($TokenId) )
"
},
{
"field_name": "URL",
"field_value_expression": "https://api.stripe.com/v1/customers/$SecondTokenId/payment_methods/$TokenId"
},
{
"field_name": "METHOD",
"field_value_expression": "GET"
},
{
"field_name": "Authorization",
"field_value_expression": "${Header-Authorization}"
},
{
"field_name": "Stripe-Version",
"field_value_expression": "${Header-Stripe-Version}"
}
],
"request_to_log": "Request = [GET https://api.stripe.com/v1/customers/$maskedCustomerID/payment_methods/$maskedPMID]",
"transaction_response_fields": [
{
"field_name": "_",
"field_value_expression": "
## Create masked response body
#{set}( $maskedResponseBody = $last_message_body )

#{set}( $transactionEvent = 'Success' )
#{if} ($StringUtils.equals($last_status_code, '200'))
#{set}( $gatewayResponseCode = '200' )
#{set}( $accountResponseDoc = $ZUtility.parseJsonDocument($last_message_body) )

## Set payment method type
#{set}( $paymentMethodType = $accountResponseDoc.valueOf('/JsonRoot/type') )
#{set}( $paymentMethodId = $accountResponseDoc.valueOf('/JsonRoot/id') )
#{if} ($StringUtils.equals($paymentMethodType, 'us_bank_account'))
#{set}( $transactionEvent = 'Success' )
#{set}( $zuoraResponseCode = 'Approved' )
#{set}( $gatewayResponseMessage = 'Approved' )
#{else}
#{set}( $transactionEvent = 'Error' )
#{set}( $zuoraResponseCode = 'Failed' )
#{set}( $gatewayResponseMessage = 'Invalid Payment Method Type' )
#{end}

#{else}
#{set}( $transactionEvent = 'Error' )
#{set}($blockInputs = [$last_message_body, $last_status_code])
#evaluate(${Block-Error-Handler})
#{stop}
#{end}
"
},
{
"in_transaction_log": "true",
"field_name": "ResponseBody",
"field_value_expression": "$maskedResponseBody"
},
{
"in_transaction_log": "true",
"field_name": "ResponseCode",
"field_value_expression": "$last_status_code"
}
],
"response_fsm_event_expression": "$transactionEvent"
},
{
"transaction_name": "IfCustomerIdIsPresent",
"connector_type": "Test",
"transaction_request_fields": [
{
"temporary": true,
"field_name": "_",
"field_value_expression": "
#{if}($StringUtils.isNotBlank($SecondTokenId))
#set( $hasCustomerId = 'Success' )
#{else}
#set( $hasCustomerId = 'Error' )
#{end}
"
}
],
"request_to_log": "Check if SecondTokenId(Stripe Customer ID) is present.",
"transaction_response_fields": [
{
"in_transaction_log": "true",
"field_name": "txEventResult",
"field_value_expression": "$!hasCustomerId"
}
],
"response_fsm_event_expression": "$!hasCustomerId"
},
{
"transaction_name": "GetCustomerStatusById",
"connector_type": "HTTPs",
"transaction_request_fields": [
{
"temporary": true,
"field_name": "_",
"field_value_expression": "
## mask customer ID
#{set}( $maskedCustomerID = $ZUtility.mask($SecondTokenId) )
"
},
{
"field_name": "URL",
"field_value_expression": "https://api.stripe.com/v1/customers/$SecondTokenId"
},
{
"field_name": "METHOD",
"field_value_expression": "GET"
},
{
"field_name": "Authorization",
"field_value_expression": "${Header-Authorization}"
},
{
"field_name": "Stripe-Version",
"field_value_expression": "${Header-Stripe-Version}"
}
],
"request_to_log": "Request = [GET https://api.stripe.com/v1/customers/$maskedCustomerID]",
"transaction_response_fields": [
{
"field_name": "_",
"field_value_expression": "
## Create masked response body
#{if} (!$StringUtils.equals($last_status_code, '200'))
#{set}( $maskedResponseBody = $last_message_body )
#{else}
## mask message body
#{set}( $maskedResponseBody = $last_message_body )
#{end}

#{set}( $striptAccountStatus = 'Unknown' )
#{set}( $transactionEvent = 'Success' )
#{if} ($StringUtils.equals($last_status_code, '404'))
## Account does not exist
#{set}( $striptAccountStatus = 'NotFound' )
#{elseif} ($StringUtils.equals($last_status_code, '200'))
#{set}( $accountResponseDoc = $ZUtility.parseJsonDocument($last_message_body) )

## Check delete status
#{set}( $accountDeleteFlag = $accountResponseDoc.valueOf('/JsonRoot/deleted') )
#{if} ($StringUtils.equals($accountDeleteFlag, 'true'))
#{set}( $striptAccountStatus = 'Deleted' )
#{else}
#{set}( $striptAccountStatus = 'Active' )
#{set}( $stripeAccountId = $SecondTokenId )
#{end}
#{else}
#{set}( $transactionEvent = 'Error' )
#{set}($blockInputs = [$last_message_body, $last_status_code])
#evaluate(${Block-Error-Handler})
#{stop}
#{end}
"
},
{
"in_transaction_log": "true",
"field_name": "ResponseBody",
"field_value_expression": "$maskedResponseBody"
},
{
"in_transaction_log": "true",
"field_name": "ResponseCode",
"field_value_expression": "$last_status_code"
}
],
"response_fsm_event_expression": "$transactionEvent"
},
{
"transaction_name": "CheckIfCustomerIsGood",
"connector_type": "Test",
"transaction_request_fields": [
{
"temporary": true,
"field_name": "_",
"field_value_expression": "
#{if}($StringUtils.equals($striptAccountStatus, 'Active'))
#set( $transactionEvent = 'Success' )
#{else}
#set( $transactionEvent = 'Error' )
#{end}
"
}
],
"request_to_log": "Check stripe account status, striptAccountStatus=$striptAccountStatus",
"transaction_response_fields": [
{
"in_transaction_log": "true",
"field_name": "txEventResult",
"field_value_expression": "$!transactionEvent"
}],
"response_fsm_event_expression": "$!transactionEvent"
},
{
"transaction_name": "IfSourceIdIsPresent",
"connector_type": "Test",
"transaction_request_fields": [
{
"temporary": true,
"field_name": "_",
"field_value_expression": "
#{if}($StringUtils.isNotBlank($TokenId) && $StringUtils.startsWith($TokenId, 'ba_'))
#set( $hasSourceId = 'Success' )
#{else}
#set( $hasSourceId = 'Error' )
#{end}
"
}
],
"request_to_log": "Check if TokenId(Stripe BankAccount ID) is present.",
"transaction_response_fields": [
{
"in_transaction_log": "true",
"field_name": "txEventResult",
"field_value_expression": "$!hasSourceId"
}
],
"response_fsm_event_expression": "$!hasSourceId"
},
{
"transaction_name": "DeleteExistingBankAccount",
"connector_type": "HTTPs",
"transaction_request_fields": [
{
"temporary": true,
"field_name": "_",
"field_value_expression": "
## mask customer ID
#{set}( $maskedCustomerID = $ZUtility.mask($SecondTokenId) )
#{set}( $maskedSourceID = $ZUtility.mask($TokenId) )
"
},
{
"field_name": "URL",
"field_value_expression": "https://api.stripe.com/v1/customers/$SecondTokenId/sources/$TokenId"
},
{
"field_name": "METHOD",
"field_value_expression": "DELETE"
},
{
"field_name": "Authorization",
"field_value_expression": "${Header-Authorization}"
},
{
"field_name": "Stripe-Version",
"field_value_expression": "${Header-Stripe-Version}"
}
],
"request_to_log": "Request = [DELETE https://api.stripe.com/v1/customers/$maskedCustomerID/sources/$maskedSourceID]",
"transaction_response_fields": [
{
"field_name": "_",
"field_value_expression": "
## Create masked response body
#{if} (!$StringUtils.equals($last_status_code, '200'))
#{set}( $maskedResponseBody = $last_message_body )
#{else}
## mask message body
#{set}( $maskedResponseBody = $last_message_body )
#{end}

#{if} ($StringUtils.equals($last_status_code, '404')
|| $StringUtils.equals($last_status_code, '200'))
## Either
## 1. the Source does not exist
## 2. the Source was successfully deleted
## is considered success.
#{set}( $transactionEvent = 'Success' )
#{else}
#{set}( $transactionEvent = 'Error' )
#{set}($blockInputs = [$last_message_body, $last_status_code])
#evaluate(${Block-Error-Handler})
#{stop}
#{end}
"
},
{
"in_transaction_log": "true",
"field_name": "ResponseBody",
"field_value_expression": "$maskedResponseBody"
},
{
"in_transaction_log": "true",
"field_name": "ResponseCode",
"field_value_expression": "$last_status_code"
}
],
"response_fsm_event_expression": "$transactionEvent"
},
{
"transaction_name": "CreateOrUpdateAccount",
"connector_type": "HTTPs",
"transaction_request_fields": [
{
"temporary": true,
"field_name": "_",
"field_value_expression": "
#{set}( $createAccountRequestMap = {
'email' : $StringUtils.defaultIfBlank($Email, ''),
'phone' : $StringUtils.defaultIfBlank($Phone, ''),
'address[country]' : $StringUtils.defaultIfBlank($AchCountry, ''),
'address[state]' : $StringUtils.defaultIfBlank($AchState, ''),
'address[city]' : $StringUtils.defaultIfBlank($AchCity, ''),
'address[line1]' : $StringUtils.defaultIfBlank($AchAddress1, ''),
'address[line2]' : $StringUtils.defaultIfBlank($AchAddress2, ''),
'address[postal_code]' : $StringUtils.defaultIfBlank($AchPostalCode, '')
} )

#{set}( $requestBody = $ZUtility.encodeUrlParameters($createAccountRequestMap) )
"
},
{
"field_name": "URL",
"field_value_expression": "
#{if} ($StringUtils.isNotBlank($stripeAccountId))
## Update
https://api.stripe.com/v1/customers/$stripeAccountId
#{else}
## Create
https://api.stripe.com/v1/customers
#{end}
",
"trim_value": true
},
{
"field_name": "METHOD",
"field_value_expression": "POST"
},
{
"field_name": "Authorization",
"field_value_expression": "${Header-Authorization}"
},
{
"field_name": "Content-Type",
"field_value_expression": "${Header-Content-Type}"
},
{
"field_name": "Stripe-Version",
"field_value_expression": "${Header-Stripe-Version}"
},
{
"field_name": "REQUEST_BODY",
"field_value_expression": "${requestBody}"
}
],
"request_to_log": "Request = $requestBody",
"transaction_response_fields": [
{
"field_name": "_",
"field_value_expression": "
## Create masked response body
#{if} (!$StringUtils.equals($last_status_code, '200'))
#{set}( $maskedResponseBody = $last_message_body )
#{else}
## mask message body
#{set}( $maskedResponseBody = $last_message_body )
#{end}

#{if} ($StringUtils.equals($last_status_code, '200'))
#{set}( $transactionEvent = 'Success' )
#{set}( $accountResponseDoc = $ZUtility.parseJsonDocument($last_message_body) )

## extract account id
#{set}( $stripeAccountId = $accountResponseDoc.valueOf('/JsonRoot/id') )
#{else}
#{set}( $zuoraResponseCode = 'Failed' )
#{set}( $transactionEvent = 'Error' )
#{set}($blockInputs = [$last_message_body, $last_status_code])
#evaluate(${Block-Error-Handler})
#{stop}
#{end}
"
},
{
"in_transaction_log": "true",
"field_name": "ResponseBody",
"field_value_expression": "$maskedResponseBody"
},
{
"in_transaction_log": "true",
"field_name": "ResponseCode",
"field_value_expression": "$last_status_code"
}
],
"response_fsm_event_expression": "$transactionEvent"
},
{
"transaction_name": "CreateSource",
"connector_type": "HTTPs",
"transaction_request_fields": [
{
"temporary": true,
"field_name": "_",
"field_value_expression": "
#{set}( $createSourceRequestMap = {
'source[object]' : 'bank_account',
'source[country]' : 'US',
'source[currency]' : 'USD',
'source[account_number]' : $AchAccountNumber
} )

#{if} ($StringUtils.isNotBlank($AchAccountName))
#{set}( $createSourceRequestMap['source[account_holder_name]'] = $AchAccountName )
#{end}

#{if} ($StringUtils.isNotBlank($AchAbaCode))
#{set}( $createSourceRequestMap['source[routing_number]'] = $AchAbaCode )
#{end}

## account holder type
#{if} ($StringUtils.equals($AchAccountType, 'Checking')
|| $StringUtils.equals($AchAccountType, 'Saving'))
#{set}( $createSourceRequestMap['source[account_holder_type]'] = 'individual' )
#{elseif} ($StringUtils.equals($AchAccountType, 'BusinessChecking'))
#{set}( $createSourceRequestMap['source[account_holder_type]'] = 'company' )
#{else}
#{end}

#{set}( $requestBody = $ZUtility.encodeUrlParameters($createSourceRequestMap) )

#{set}( $createSourceRequestMap['source[account_number]'] = $ZUtility.mask($AchAccountNumber) )
#{set}( $maskedRequestBody = $ZUtility.encodeUrlParameters($createSourceRequestMap) )
"
},
{
"field_name": "URL",
"field_value_expression": "https://api.stripe.com/v1/customers/$stripeAccountId/sources"
},
{
"field_name": "METHOD",
"field_value_expression": "POST"
},
{
"field_name": "Authorization",
"field_value_expression": "${Header-Authorization}"
},
{
"field_name": "Content-Type",
"field_value_expression": "${Header-Content-Type}"
},
{
"field_name": "Stripe-Version",
"field_value_expression": "${Header-Stripe-Version}"
},
{
"field_name": "REQUEST_BODY",
"field_value_expression": "${requestBody}"
}
],
"request_to_log": "Request = $maskedRequestBody",
"transaction_response_fields": [
{
"field_name": "_",
"field_value_expression": "
## Create masked response body
#{if} (!$StringUtils.equals($last_status_code, '200'))
#{set}( $maskedResponseBody = $last_message_body )
#{else}
## mask message body
#{set}( $maskedResponseBody = $last_message_body )
#{end}

#{if} ($StringUtils.equals($last_status_code, '200'))
#{set}( $zuoraResponseCode = 'Approved' )

#{set}( $transactionEvent = 'Success' )
#{set}( $sourceResponseDoc = $ZUtility.parseJsonDocument($last_message_body) )

## extract source id
#{set}( $stripeBankAccountId = $sourceResponseDoc.valueOf('/JsonRoot/id') )
#{else}
#{set}( $transactionEvent = 'Error' )
#{set}($blockInputs = [$last_message_body, $last_status_code])
#evaluate(${Block-Error-Handler})
#{stop}
#{end}
"
},
{
"in_transaction_log": "true",
"field_name": "ResponseBody",
"field_value_expression": "$maskedResponseBody"
},
{
"in_transaction_log": "true",
"field_name": "ResponseCode",
"field_value_expression": "$last_status_code"
}
],
"response_fsm_event_expression": "$transactionEvent"
}
],
"operation_states": [
{
"start_state": "BEGIN",
"transaction_event": "",
"end_state": "IsNewTokenFormat"
},
{
"start_state": "IsNewTokenFormat",
"transaction_event": "Success",
"end_state": "GetCustomerById"
},
{
"start_state": "GetCustomerById",
"transaction_event": "Success",
"end_state": "GetPaymentMethodById"
},
{
"start_state": "IsNewTokenFormat",
"transaction_event": "Error",
"end_state": "IfCustomerIdIsPresent"
},
{
"start_state": "IfCustomerIdIsPresent",
"transaction_event": "Success",
"end_state": "GetCustomerStatusById"
},
{
"start_state": "IfCustomerIdIsPresent",
"transaction_event": "Error",
"end_state": "CreateOrUpdateAccount"
},
{
"start_state": "GetCustomerStatusById",
"transaction_event": "Success",
"end_state": "CheckIfCustomerIsGood"
},
{
"start_state": "CheckIfCustomerIsGood",
"transaction_event": "Error",
"end_state": "CreateOrUpdateAccount"
},
{
"start_state": "CheckIfCustomerIsGood",
"transaction_event": "Success",
"end_state": "IfSourceIdIsPresent"
},
{
"start_state": "IfSourceIdIsPresent",
"transaction_event": "Success",
"end_state": "DeleteExistingBankAccount"
},
{
"start_state": "IfSourceIdIsPresent",
"transaction_event": "Error",
"end_state": "CreateSource"
},
{
"start_state": "DeleteExistingBankAccount",
"transaction_event": "Success",
"end_state": "CreateOrUpdateAccount"
},
{
"start_state": "CreateOrUpdateAccount",
"transaction_event": "Success",
"end_state": "CreateSource"
}
],
"operation_response_fields": [
{
"field_name": "ZuoraResponseCode",
"field_value_expression": "$!zuoraResponseCode"
},
{
"field_name": "GatewayResponseCode",
"field_value_expression": "$!gatewayResponseCode"
},
{
"field_name": "GatewayResponseMessage",
"field_value_expression": "$!gatewayResponseMessage"
},
{
"field_name": "GatewayReferenceId",
"field_value_expression": "#{if}($StringUtils.isNotBlank($!stripeBankAccountId))$!stripeBankAccountId#{elseif}($StringUtils.isNotBlank($!paymentMethodId))$!paymentMethodId#{end}"
},
{
"field_name": "GatewaySecondReferenceId",
"field_value_expression": "$!stripeAccountId"
},
{
"field_name": "GatewayResponseToken1",
"field_value_expression": "#{if}($StringUtils.isNotBlank($!stripeBankAccountId))$!stripeBankAccountId#{elseif}($StringUtils.isNotBlank($!paymentMethodId))$!paymentMethodId#{end}"
},
{
"field_name": "GatewayResponseToken2",
"field_value_expression": "$!stripeAccountId"
}
]
},
{
"payment_method_type": "ACH",
"operation_type": "Payment",
"support_idempotent_retry": true,
"transactions": [
{
"transaction_name": "IsNewTokenFormat",
"connector_type": "Test",
"transaction_request_fields": [
{
"temporary": true,
"field_name": "_",
"field_value_expression": "
#{set}( $customerId = $!SecondTokenId )
#{set}( $paymentMethodId = $!TokenId )

#{if}($StringUtils.equalsIgnoreCase($Feature-ACHTokenizationSupport-Enabled, 'true') && $StringUtils.startsWith($paymentMethodId, 'pm_') && $StringUtils.startsWith($customerId, 'cus_'))
#set( $isNewFormat = 'Success' )
#{else}
#{set}( $isNewFormat = 'Error' )
#{end}
"
}
],
"request_to_log": "Check if Tokens are in new format(Stripe Customer ID and Stripe PM ID)",
"transaction_response_fields": [
{
"in_transaction_log": "true",
"field_name": "txEventResult",
"field_value_expression": "$!isNewFormat"
}
],
"response_fsm_event_expression": "$!isNewFormat"
},
{
"transaction_name": "IfCustomerIdIsPresent",
"connector_type": "Test",
"transaction_request_fields": [
{
"temporary": true,
"field_name": "_",
"field_value_expression": "
#{if}($StringUtils.isNotBlank($SecondTokenId))
#set( $hasCustomerId = 'Success' )
#{else}
#set( $hasCustomerId = 'Error' )
#{end}
"
}
],
"request_to_log": "Check if SecondTokenId(Stripe Customer ID) is present.",
"transaction_response_fields": [
{
"in_transaction_log": "true",
"field_name": "txEventResult",
"field_value_expression": "$!hasCustomerId"
}
],
"response_fsm_event_expression": "$!hasCustomerId"
},
{
"transaction_name": "GetCustomerStatusById",
"connector_type": "HTTPs",
"transaction_request_fields": [
{
"temporary": true,
"field_name": "_",
"field_value_expression": "
## mask customer ID
#{set}( $maskedCustomerID = $ZUtility.mask($SecondTokenId) )
"
},
{
"field_name": "URL",
"field_value_expression": "https://api.stripe.com/v1/customers/$SecondTokenId"
},
{
"field_name": "METHOD",
"field_value_expression": "GET"
},
{
"field_name": "Authorization",
"field_value_expression": "${Header-Authorization}"
},
{
"field_name": "Stripe-Version",
"field_value_expression": "${Header-Stripe-Version}"
},
{
"field_name": "Retry-Enabled",
"field_value_expression": "Yes"
}
],
"request_to_log": "Request = [GET https://api.stripe.com/v1/customers/$maskedCustomerID]",
"transaction_response_fields": [
{
"field_name": "_",
"field_value_expression": "
## Create masked response body
#{if} (!$StringUtils.equals($last_status_code, '200'))
#{set}( $maskedResponseBody = $last_message_body )
#{else}
## mask message body
#{set}( $maskedResponseBody = $last_message_body )
#{end}

#{set}( $striptAccountStatus = 'Unknown' )
#{set}( $transactionEvent = 'Success' )
#{if} ($StringUtils.equals($last_status_code, '404'))
## Account does not exist
#{set}( $striptAccountStatus = 'NotFound' )
#{elseif} ($StringUtils.equals($last_status_code, '200'))
#{set}( $accountResponseDoc = $ZUtility.parseJsonDocument($last_message_body) )

## Check delete status
#{set}( $accountDeleteFlag = $accountResponseDoc.valueOf('/JsonRoot/deleted') )
#{if} ($StringUtils.equals($accountDeleteFlag, 'true'))
#{set}( $striptAccountStatus = 'Deleted' )
#{else}
#{set}( $striptAccountStatus = 'Active' )
#{set}( $stripeDefaultSource = $accountResponseDoc.valueOf('/JsonRoot/default_source') )
#{set}( $stripeAccountId = $SecondTokenId )
#{end}
#{else}
#{set}( $transactionEvent = 'Error' )
#{set}($blockInputs = [$last_message_body, $last_status_code])
#evaluate(${Block-Error-Handler})
#{stop}
#{end}
"
},
{
"in_transaction_log": "true",
"field_name": "ResponseBody",
"field_value_expression": "$maskedResponseBody"
},
{
"in_transaction_log": "true",
"field_name": "ResponseCode",
"field_value_expression": "$last_status_code"
}
],
"response_fsm_event_expression": "$transactionEvent"
},
{
"transaction_name": "CheckIfCustomerIsGood",
"connector_type": "Test",
"transaction_request_fields": [
{
"temporary": true,
"field_name": "_",
"field_value_expression": "
#{if}( $StringUtils.equals($striptAccountStatus, 'Active') )
#set( $transactionEvent = 'Success' )
#{else}
#set( $badAccountFlag = true )
#set( $transactionEvent = 'Error' )
#{end}
"
}
],
"request_to_log": "Check stripe account status, striptAccountStatus=$striptAccountStatus",
"transaction_response_fields": [
{
"in_transaction_log": "true",
"field_name": "txEventResult",
"field_value_expression": "$!transactionEvent"
}],
"response_fsm_event_expression": "$!transactionEvent"
},
{
"transaction_name": "CreateOrUpdateAccount",
"connector_type": "HTTPs",
"transaction_request_fields": [
{
"temporary": true,
"field_name": "_",
"field_value_expression": "
#{set}( $createAccountRequestMap = {
'email' : $StringUtils.defaultIfBlank($Email, ''),
'phone' : $StringUtils.defaultIfBlank($Phone, ''),
'address[country]' : $StringUtils.defaultIfBlank($AchCountry, ''),
'address[state]' : $StringUtils.defaultIfBlank($AchState, ''),
'address[city]' : $StringUtils.defaultIfBlank($AchCity, ''),
'address[line1]' : $StringUtils.defaultIfBlank($AchAddress1, ''),
'address[line2]' : $StringUtils.defaultIfBlank($AchAddress2, ''),
'address[postal_code]' : $StringUtils.defaultIfBlank($AchPostalCode, '')
} )

#{set}( $requestBody = $ZUtility.encodeUrlParameters($createAccountRequestMap) )
"
},
{
"field_name": "URL",
"field_value_expression": "
#{if} ($StringUtils.isNotBlank($stripeAccountId))
## Update
https://api.stripe.com/v1/customers/$stripeAccountId
#{else}
## Create
https://api.stripe.com/v1/customers
#{end}
",
"trim_value": true
},
{
"field_name": "METHOD",
"field_value_expression": "POST"
},
{
"field_name": "Authorization",
"field_value_expression": "${Header-Authorization}"
},
{
"field_name": "Content-Type",
"field_value_expression": "${Header-Content-Type}"
},
{
"field_name": "Stripe-Version",
"field_value_expression": "${Header-Stripe-Version}"
},
{
"field_name": "REQUEST_BODY",
"field_value_expression": "${requestBody}"
},
{
"field_name": "Retry-Enabled",
"field_value_expression": "Yes"
},
{
"field_name": "Idempotency-Key",
"field_value_expression": "#{if}($StringUtils.isNotBlank(${Framework-Idempotency-Key}))${Framework-Idempotency-Key}_account#{else}$ZUtility.getUUID(255)#{end}"
}
],
"request_to_log": "Idempotency-Key=$!{Idempotency-Key},Request = $requestBody",
"transaction_response_fields": [
{
"field_name": "_",
"field_value_expression": "
## Create masked response body
#{if} (!$StringUtils.equals($last_status_code, '200'))
#{set}( $maskedResponseBody = $last_message_body )
#{else}
## mask message body
#{set}( $maskedResponseBody = $last_message_body )
#{end}

#{if} ($StringUtils.equals($last_status_code, '200'))
#{set}( $transactionEvent = 'Success' )
#{set}( $accountResponseDoc = $ZUtility.parseJsonDocument($last_message_body) )

## extract account id
#{set}( $stripeAccountId = $accountResponseDoc.valueOf('/JsonRoot/id') )
#{else}
#{set}( $zuoraResponseCode = 'Failed' )
#{set}( $transactionEvent = 'Error' )
#{set}($blockInputs = [$last_message_body, $last_status_code])
#evaluate(${Block-Error-Handler})
#{stop}
#{end}
"
},
{
"in_transaction_log": "true",
"field_name": "ResponseBody",
"field_value_expression": "$maskedResponseBody"
},
{
"in_transaction_log": "true",
"field_name": "ResponseCode",
"field_value_expression": "$last_status_code"
}
],
"response_fsm_event_expression": "$transactionEvent"
},
{
"transaction_name": "IfDefaultSourceIsPresent",
"connector_type": "Test",
"transaction_request_fields": [
{
"temporary": true,
"field_name": "_",
"field_value_expression": "
#{if}($StringUtils.isNotBlank($stripeDefaultSource))
#set( $hasDefaultSource = 'Success' )
#{else}
#set( $hasDefaultSource = 'Error' )
#{end}
"
}
],
"request_to_log": "Check if Stripe Default Source is present.",
"transaction_response_fields": [
{
"in_transaction_log": "true",
"field_name": "txEventResult",
"field_value_expression": "$!hasDefaultSource"
}
],
"response_fsm_event_expression": "$!hasDefaultSource"
},
{
"transaction_name": "CheckMismatch",
"connector_type": "Test",
"transaction_request_fields": [
{
"temporary": true,
"field_name": "_",
"field_value_expression": "
#{if}($StringUtils.equals($TokenId, $stripeDefaultSource))
#set( $transactionEvent = 'Success' )
#{else}
#set( $transactionEvent = 'Error' )
#{end}
"
}
],
"request_to_log": "Check if TokenId(Stripe BankAccount ID) matches Customer's default source.",
"transaction_response_fields": [
{
"in_transaction_log": "true",
"field_name": "txEventResult",
"field_value_expression": "$!transactionEvent"
}],
"response_fsm_event_expression": "$!transactionEvent"
},
{
"transaction_name": "DeleteExistingBankAccount",
"connector_type": "HTTPs",
"transaction_request_fields": [
{
"temporary": true,
"field_name": "_",
"field_value_expression": "
## mask customer ID
#{set}( $maskedCustomerID = $ZUtility.mask($SecondTokenId) )
#{set}( $maskedSourceID = $ZUtility.mask($stripeDefaultSource) )
"
},
{
"field_name": "URL",
"field_value_expression": "https://api.stripe.com/v1/customers/$SecondTokenId/sources/$stripeDefaultSource"
},
{
"field_name": "METHOD",
"field_value_expression": "DELETE"
},
{
"field_name": "Authorization",
"field_value_expression": "${Header-Authorization}"
},
{
"field_name": "Stripe-Version",
"field_value_expression": "${Header-Stripe-Version}"
}
],
"request_to_log": "Request = [DELETE https://api.stripe.com/v1/customers/$maskedCustomerID/sources/$maskedSourceID]",
"transaction_response_fields": [
{
"field_name": "_",
"field_value_expression": "
## Create masked response body
#{if} (!$StringUtils.equals($last_status_code, '200'))
#{set}( $maskedResponseBody = $last_message_body )
#{else}
## mask message body
#{set}( $maskedResponseBody = $last_message_body )
#{end}

#{if} ($StringUtils.equals($last_status_code, '404')
|| $StringUtils.equals($last_status_code, '200'))
## Either
## 1. the Source does not exist
## 2. the Source was successfully deleted
## is considered success.
#{set}( $transactionEvent = 'Success' )
#{else}
#{set}( $transactionEvent = 'Error' )
#{set}($blockInputs = [$last_message_body, $last_status_code])
#evaluate(${Block-Error-Handler})
#{stop}
#{end}
"
},
{
"in_transaction_log": "true",
"field_name": "ResponseBody",
"field_value_expression": "$maskedResponseBody"
},
{
"in_transaction_log": "true",
"field_name": "ResponseCode",
"field_value_expression": "$last_status_code"
}
],
"response_fsm_event_expression": "$transactionEvent"
},
{
"transaction_name": "GetBankAccountById",
"connector_type": "HTTPs",
"transaction_request_fields": [
{
"temporary": true,
"field_name": "_",
"field_value_expression": "
## mask customer and source IDs
#{set}( $maskedCustomerId = $ZUtility.mask($SecondTokenId) )
#{set}( $maskedSourceId = $ZUtility.mask($TokenId) )
"
},
{
"field_name": "URL",
"field_value_expression": "https://api.stripe.com/v1/customers/$SecondTokenId/sources/$TokenId"
},
{
"field_name": "METHOD",
"field_value_expression": "GET"
},
{
"field_name": "Authorization",
"field_value_expression": "${Header-Authorization}"
},
{
"field_name": "Stripe-Version",
"field_value_expression": "${Header-Stripe-Version}"
},
{
"field_name": "Retry-Enabled",
"field_value_expression": "Yes"
}
],
"request_to_log": "Request = [GET https://api.stripe.com/v1/customers/$maskedCustomerId/sources/$maskedSourceId]",
"transaction_response_fields": [
{
"field_name": "_",
"field_value_expression": "
## Create masked response body
#{if} (!$StringUtils.equals($last_status_code, '200'))
#{set}( $maskedResponseBody = $last_message_body )
#{else}
## mask message body
#{set}( $maskedResponseBody = $last_message_body )
#{end}

#{set}( $stripeSourceStatus = 'Unknown' )
#{set}( $transactionEvent = 'Success' )
#{if} ($StringUtils.equals($last_status_code, '404'))
## Source does not exist
#{set}( $stripeSourceStatus = 'NotFound' )
#{elseif} ($StringUtils.equals($last_status_code, '200'))
#{set}( $sourceResponseDoc = $ZUtility.parseJsonDocument($last_message_body) )

## Set status
#{set}( $stripeSourceStatus = $sourceResponseDoc.valueOf('/JsonRoot/status') )

#{else}
#{set}( $transactionEvent = 'Error' )
#{set}($blockInputs = [$last_message_body, $last_status_code])
#evaluate(${Block-Error-Handler})
#{stop}
#{end}
"
},
{
"in_transaction_log": "true",
"field_name": "ResponseBody",
"field_value_expression": "$maskedResponseBody"
},
{
"in_transaction_log": "true",
"field_name": "ResponseCode",
"field_value_expression": "$last_status_code"
}
],
"response_fsm_event_expression": "$transactionEvent"
},
{
"transaction_name": "CreateSource",
"connector_type": "HTTPs",
"transaction_request_fields": [
{
"temporary": true,
"field_name": "_",
"field_value_expression": "
#{set}( $createSourceRequestMap = {
'source[object]' : 'bank_account',
'source[country]' : 'US',
'source[currency]' : 'USD',
'source[account_number]' : $AchAccountNumber
} )

#{if} ($StringUtils.isNotBlank($AchAccountName))
#{set}( $createSourceRequestMap['source[account_holder_name]'] = $AchAccountName )
#{end}

#{if} ($StringUtils.isNotBlank($AchAbaCode))
#{set}( $createSourceRequestMap['source[routing_number]'] = $AchAbaCode )
#{end}

## account holder type
#{if} ($StringUtils.equals($AchAccountType, 'Checking')
|| $StringUtils.equals($AchAccountType, 'Saving'))
#{set}( $createSourceRequestMap['source[account_holder_type]'] = 'individual' )
#{elseif} ($StringUtils.equals($AchAccountType, 'BusinessChecking'))
#{set}( $createSourceRequestMap['source[account_holder_type]'] = 'company' )
#{else}
#{end}

#{set}( $requestBody = $ZUtility.encodeUrlParameters($createSourceRequestMap) )

#{set}( $createSourceRequestMap['source[account_number]'] = $ZUtility.mask($AchAccountNumber) )
#{set}( $maskedRequestBody = $ZUtility.encodeUrlParameters($createSourceRequestMap) )
"
},
{
"field_name": "URL",
"field_value_expression": "https://api.stripe.com/v1/customers/$stripeAccountId/sources"
},
{
"field_name": "METHOD",
"field_value_expression": "POST"
},
{
"field_name": "Authorization",
"field_value_expression": "${Header-Authorization}"
},
{
"field_name": "Content-Type",
"field_value_expression": "${Header-Content-Type}"
},
{
"field_name": "Stripe-Version",
"field_value_expression": "${Header-Stripe-Version}"
},
{
"field_name": "REQUEST_BODY",
"field_value_expression": "${requestBody}"
},
{
"field_name": "Retry-Enabled",
"field_value_expression": "Yes"
},
{
"field_name": "Idempotency-Key",
"field_value_expression": "#{if}($StringUtils.isNotBlank(${Framework-Idempotency-Key}))${Framework-Idempotency-Key}_createsrc#{else}$ZUtility.getUUID(255)#{end}"
}
],
"request_to_log": "Idempotency-Key=$!{Idempotency-Key},Request = $maskedRequestBody",
"transaction_response_fields": [
{
"field_name": "_",
"field_value_expression": "
## Create masked response body
#{if} (!$StringUtils.equals($last_status_code, '200'))
#{set}( $maskedResponseBody = $last_message_body )
#{else}
## mask message body
#{set}( $maskedResponseBody = $last_message_body )
#{end}

#{if} ($StringUtils.equals($last_status_code, '200'))
#set( $badBankAccountFlag = true )
#{set}( $zuoraResponseCode = 'Approved' )

#{set}( $transactionEvent = 'Success' )
#{set}( $sourceResponseDoc = $ZUtility.parseJsonDocument($last_message_body) )

## extract source id
#{set}( $stripeBankAccountId = $sourceResponseDoc.valueOf('/JsonRoot/id') )

#{else}
#{set}( $transactionEvent = 'Error' )
#{set}($blockInputs = [$last_message_body, $last_status_code])
#evaluate(${Block-Error-Handler})
#{stop}
#{end}
"
},
{
"in_transaction_log": "true",
"field_name": "ResponseBody",
"field_value_expression": "$maskedResponseBody"
},
{
"in_transaction_log": "true",
"field_name": "ResponseCode",
"field_value_expression": "$last_status_code"
}
],
"response_fsm_event_expression": "$transactionEvent"
},
{
"transaction_name": "CreateAndConfirmPaymentIntent",
"connector_type": "HTTPs",
"transaction_request_fields": [
{
"temporary": true,
"field_name": "_",
"field_value_expression": "
## The PaymentIntent Request Map
#{set}( $paymentIntentRequestMap = {
'payment_method_types[]' : 'ach_debit',
'confirm' : 'true'
} )

#{set}($blockInputs = [$PaymentAmount, $Currency])
#evaluate(${Block-Normalize-Amount})
#{set}( $paymentIntentRequestMap['amount'] = $macroReturn )
#{set}( $paymentIntentRequestMap['currency'] = $!Currency )

## {set}( $paymentIntentRequestMap['metadata[zpayment_number]'] = $!PaymentNumber )
#evaluate(${Block-Payment-Metadata})
$paymentIntentRequestMap.putAll($macroMetadataReturn)


#{if}($StringUtils.isNotBlank($!SecondTokenId) && !$badAccountFlag)
#{set}( $paymentIntentRequestMap['customer'] = $!SecondTokenId )
#{else}
#{set}( $paymentIntentRequestMap['customer'] = $stripeAccountId )
#{end}

#{if}($StringUtils.startsWith($paymentMethodId, 'pm_'))
#{set}( $paymentIntentRequestMap['payment_method_types[]'] = 'us_bank_account' )
#{set}( $paymentIntentRequestMap['payment_method'] = $TokenId )
#{elseif}($StringUtils.isNotBlank($!TokenId) && !$badBankAccountFlag)
#{set}( $paymentIntentRequestMap['source'] = $!TokenId )
#{else}
#{set}( $paymentIntentRequestMap['source'] = $stripeBankAccountId )
#{end}

## set RadarSessionId
#{if}($StringUtils.isNotBlank($!RadarSessionId))
#{set}( $paymentIntentRequestMap['radar_options[session]'] = $!RadarSessionId )
#{end}

#{if} ($StringUtils.isNotBlank($SoftDescriptor))
#{set}($paymentIntentRequestMap['statement_descriptor'] = $ZUtility.truncateMaxLength($SoftDescriptor, '22'))
#{end}

#{set}( $requestBody = $ZUtility.encodeUrlParameters($paymentIntentRequestMap) )

## Mask Bank Account ID
#{if}($StringUtils.startsWith($paymentMethodId, 'pm_'))
#{set}( $paymentIntentRequestMap['payment_method'] = $ZUtility.maskTokenId($!TokenId) )
#{elseif}($StringUtils.isNotBlank($!TokenId) && !$badBankAccountFlag)
#{set}( $paymentIntentRequestMap['source'] = $ZUtility.maskTokenId($!TokenId) )
#{else}
#{set}( $paymentIntentRequestMap['source'] = $ZUtility.maskTokenId($stripeBankAccountId) )
#{end}
#{set}( $maskedRequestBody = $ZUtility.encodeUrlParameters($paymentIntentRequestMap) )
"
},
{
"field_name": "URL",
"field_value_expression": "https://api.stripe.com/v1/payment_intents"
},
{
"field_name": "METHOD",
"field_value_expression": "POST"
},
{
"field_name": "Authorization",
"field_value_expression": "${Header-Authorization}"
},
{
"field_name": "Content-Type",
"field_value_expression": "${Header-Content-Type}"
},
{
"field_name": "Stripe-Version",
"field_value_expression": "${Header-Stripe-Version}"
},
{
"field_name": "REQUEST_BODY",
"field_value_expression": "${requestBody}"
},
{
"field_name": "Retry-Enabled",
"field_value_expression": "Yes"
},
{
"field_name": "Idempotency-Key",
"field_value_expression": "#{if}($StringUtils.isNotBlank(${Framework-Idempotency-Key}))${Framework-Idempotency-Key}_withl3#{else}$ZUtility.getUUID(255)#{end}"
}
],
"request_to_log": "Idempotency-Key=$!{Idempotency-Key},Request = [${maskedRequestBody}; URL = $!URL]",
"transaction_response_fields": [
{
"field_name": "_",
"field_value_expression": "
## Create masked response body
#{if} (!$StringUtils.equals($last_status_code, '200'))
#{set}( $maskedResponseBody = $last_message_body )
#{else}
## mask message body
#{set}( $maskedResponseBody = $last_message_body )
#{end}

#{if} (!$StringUtils.equals($last_status_code, '200'))
#{set}($blockInputs = [$last_message_body, $last_status_code])
#evaluate(${Block-Error-Handler})
#{stop}
#{else}
#{set}( $gatewayResponseCode = '200' )
#{set}( $gatewayResponseMessage = 'Approved' )
#{end}

## Parse Response JSON Document
#{set}( $createPiResponseDoc = $ZUtility.parseJsonDocument($last_message_body) )

#{set}( $paymentIntentId = $createPiResponseDoc.valueOf('/JsonRoot/id') )
#{set}( $paymentIntentStatus = $createPiResponseDoc.valueOf('/JsonRoot/status') )

## read data from first charge object
#{set}( $gatewayReferenceId = $createPiResponseDoc.valueOf('//charges/data/ArrayItem[1]/id') )
##{set}( $dsTransactionId = $createPiResponseDoc.valueOf('//charges/data/ArrayItem[1]/payment_method_details/card/ds_transaction_id') )
##{set}( $networkTransactionId = $createPiResponseDoc.valueOf('//charges/data/ArrayItem[1]/payment_method_details/card/network_transaction_id') )

## The payment intent status could be one of following
## 1, succeeded
## 2, processing
## 3, canceled
## 4, requires_payment_method
## 5, requires_confirmation
## 6, requires_action
## 7, requires_capture
## It will be considered Approved when the payment intent status is either 'processing'
## or 'succeeded'.
#{if} ($StringUtils.equals($paymentIntentStatus, 'succeeded') || $StringUtils.equals($paymentIntentStatus, 'processing'))
#{set}( $zuoraResponseCode = 'Approved' )
#{else}
#{set}( $zuoraResponseCode = 'Failed' )
#{end}
"
},
{
"in_transaction_log": "true",
"field_name": "ResponseBody",
"field_value_expression": "$maskedResponseBody"
},
{
"in_transaction_log": "true",
"field_name": "ResponseCode",
"field_value_expression": "$last_status_code"
}
],
"response_fsm_event_expression": "Success"
}
],
"operation_states": [
{
"start_state": "BEGIN",
"transaction_event": "",
"end_state": "IsNewTokenFormat"
},
{
"start_state": "IsNewTokenFormat",
"transaction_event": "Success",
"end_state": "CreateAndConfirmPaymentIntent"
},
{
"start_state": "IsNewTokenFormat",
"transaction_event": "Error",
"end_state": "IfCustomerIdIsPresent"
},
{
"start_state": "IfCustomerIdIsPresent",
"transaction_event": "Success",
"end_state": "GetCustomerStatusById"
},
{
"start_state": "IfCustomerIdIsPresent",
"transaction_event": "Error",
"end_state": "CreateOrUpdateAccount"
},
{
"start_state": "GetCustomerStatusById",
"transaction_event": "Success",
"end_state": "CheckIfCustomerIsGood"
},
{
"start_state": "GetCustomerStatusById",
"transaction_event": "Error",
"end_state": "CreateOrUpdateAccount"
},
{
"start_state": "CheckIfCustomerIsGood",
"transaction_event": "Success",
"end_state": "IfDefaultSourceIsPresent"
},
{
"start_state": "CheckIfCustomerIsGood",
"transaction_event": "Error",
"end_state": "CreateOrUpdateAccount"
},
{
"start_state": "CreateOrUpdateAccount",
"transaction_event": "Success",
"end_state": "IfDefaultSourceIsPresent"
},
{
"start_state": "IfDefaultSourceIsPresent",
"transaction_event": "Success",
"end_state": "CheckMismatch"
},
{
"start_state": "IfDefaultSourceIsPresent",
"transaction_event": "Error",
"end_state": "CreateSource"
},
{
"start_state": "CheckMismatch",
"transaction_event": "Success",
"end_state": "GetBankAccountById"
},
{
"start_state": "CheckMismatch",
"transaction_event": "Error",
"end_state": "DeleteExistingBankAccount"
},
{
"start_state": "DeleteExistingBankAccount",
"transaction_event": "Success",
"end_state": "CreateSource"
},
{
"start_state": "GetBankAccountById",
"transaction_event": "Success",
"end_state": "CreateAndConfirmPaymentIntent"
},
{
"start_state": "GetBankAccountById",
"transaction_event": "Error",
"end_state": "CreateSource"
},
{
"start_state": "CreateSource",
"transaction_event": "Success",
"end_state": "CreateAndConfirmPaymentIntent"
}
],
"operation_response_fields": [
{
"field_name": "ZuoraResponseCode",
"field_value_expression": "$!zuoraResponseCode"
},
{
"field_name": "GatewayResponseCode",
"field_value_expression": "$!gatewayResponseCode"
},
{
"field_name": "GatewayResponseMessage",
"field_value_expression": "$!gatewayResponseMessage"
},
{
"field_name": "GatewayReferenceId",
"field_value_expression": "$!gatewayReferenceId"
},
{
"field_name": "GatewaySecondReferenceId",
"field_value_expression": "#{if}($StringUtils.equals($!hasCustomerId, 'Error') && $StringUtils.isNotBlank($!stripeAccountId))$!stripeAccountId#{else}#{end}"
},
{
"field_name": "GatewayThirdReferenceId",
"field_value_expression": "#{if}($StringUtils.isBlank($!TokenId) && $StringUtils.isNotBlank($!stripeBankAccountId))$!stripeBankAccountId#{else}#{end}"
}
]
},
{
"payment_method_type": "ACH",
"operation_type": "Refund",
"support_idempotent_retry": true,
"transactions": [
{
"transaction_name": "createRefund",
"connector_type": "HTTPs",
"transaction_request_fields": [
{
"temporary": true,
"field_name": "_",
"field_value_expression": "
#{set}( $refundRequestMap = {
'metadata[zrefund_number]' : $!RefundNumber
} )

## set field according to reference id prefix
#{if}($StringUtils.startsWith($ReferenceId, 'pi_'))
#{set}( $refundRequestMap['payment_intent'] = $ReferenceId )
#{else}
#{set}( $refundRequestMap['charge'] = $ReferenceId )
#{end}

#{set}($blockInputs = [$RefundAmount, $Currency])
#evaluate(${Block-Normalize-Amount})
#{set}( $refundRequestMap['amount'] = $macroReturn )

#{set}( $requestBody = $ZUtility.encodeUrlParameters($refundRequestMap) )
"
},
{
"field_name": "URL",
"field_value_expression": "https://api.stripe.com/v1/refunds"
},
{
"field_name": "METHOD",
"field_value_expression": "POST"
},
{
"field_name": "Authorization",
"field_value_expression": "${Header-Authorization}"
},
{
"field_name": "Content-Type",
"field_value_expression": "${Header-Content-Type}"
},
{
"field_name": "Stripe-Version",
"field_value_expression": "${Header-Stripe-Version}"
},
{
"field_name": "REQUEST_BODY",
"field_value_expression": "${requestBody}"
},
{
"field_name": "Retry-Enabled",
"field_value_expression": "Yes"
},
{
"field_name": "Idempotency-Key",
"field_value_expression": "#{if}($StringUtils.isNotBlank(${Framework-Idempotency-Key}))${Framework-Idempotency-Key}#{else}$ZUtility.getUUID(255)#{end}"
}
],
"request_to_log": "Idempotency-Key=$!{Idempotency-Key},Request = [${requestBody}; URL = $!URL]",
"transaction_response_fields": [
{
"field_name": "_",
"field_value_expression": "
## Create masked response body
#{if} (!$StringUtils.equals($last_status_code, '200'))
#{set}( $maskedResponseBody = $last_message_body )
#{else}
## mask message body
#{set}( $maskedResponseBody = $last_message_body )
#{end}

#{if} (!$StringUtils.equals($last_status_code, '200'))
#{set}($blockInputs = [$last_message_body, $last_status_code])
#evaluate(${Block-Error-Handler})
#{stop}
#{else}
#{set}( $gatewayResponseCode = '200' )
#{set}( $gatewayResponseMessage = 'Approved' )
#{end}

## Parse Response JSON Document
#{set}( $refundResponseDoc = $ZUtility.parseJsonDocument($last_message_body) )

#{set}( $refundId = $refundResponseDoc.valueOf('/JsonRoot/id') )
#{set}( $refundStatus = $refundResponseDoc.valueOf('/JsonRoot/status') )

## the refund status could be one of following 4:
## 1. pending
## 2. succeeded
## 3. failed
## 4. canceled
## It will be considered Approved when the refund status is either 'pending'
## or 'succeeded'.
#{if} ($StringUtils.equals($refundStatus, 'succeeded') || $StringUtils.equals($refundStatus, 'pending'))
#{set}( $zuoraResponseCode = 'Approved' )
#{else}
#{set}( $zuoraResponseCode = 'Failed' )
#{end}
"
},
{
"in_transaction_log": "true",
"field_name": "ResponseBody",
"field_value_expression": "$maskedResponseBody"
},
{
"in_transaction_log": "true",
"field_name": "ResponseCode",
"field_value_expression": "$last_status_code"
}
],
"response_fsm_event_expression": "Success"
}
],
"operation_states": [
{
"start_state": "BEGIN",
"transaction_event": "",
"end_state": "createRefund"
}
],
"operation_response_fields": [
{
"field_name": "ZuoraResponseCode",
"field_value_expression": "$!zuoraResponseCode"
},
{
"field_name": "GatewayResponseCode",
"field_value_expression": "$!gatewayResponseCode"
},
{
"field_name": "GatewayResponseMessage",
"field_value_expression": "$!gatewayResponseMessage"
},
{
"field_name": "GatewayReferenceId",
"field_value_expression": "$!refundId"
}
]
},
{
"payment_method_type": "CreditCard",
"operation_type": "ThreeDS2RequestToken",
"transactions": [
{
"transaction_name": "CreateDelayedPaymentIntent",
"connector_type": "HTTPs",
"transaction_request_fields": [
{
"temporary": true,
"field_name": "_",
"field_value_expression": "
## The PaymentIntent Request Map
#{set}( $paymentIntentRequestMap = {
'confirm' : 'false',
'confirmation_method' : 'manual'
} )

#{set}($blockInputs = [$!threeDs_authorizationAmount, $!threeDs_currency])
#evaluate(${Block-Normalize-Amount})
#{set}( $paymentIntentRequestMap['amount'] = $macroReturn )
#{set}( $paymentIntentRequestMap['currency'] = $!threeDs_currency )

#{if}( $StringUtils.isNotBlank($!PaymentDescription) )
#{set}( $paymentIntentRequestMap['description'] = $!PaymentDescription )
#{end}

#{set}( $requestBody = $ZUtility.encodeUrlParameters($paymentIntentRequestMap) )

#{set}($blockInputs = [$paymentIntentRequestMap])
#evaluate(${Block-Create-Mask-Request-Map})
#{set}( $maskedRequestBody = $ZUtility.encodeUrlParameters($macroReturn) )
"
},
{
"field_name": "URL",
"field_value_expression": "https://api.stripe.com/v1/payment_intents"
},
{
"field_name": "METHOD",
"field_value_expression": "POST"
},
{
"field_name": "Authorization",
"field_value_expression": "${Header-Authorization}"
},
{
"field_name": "Content-Type",
"field_value_expression": "${Header-Content-Type}"
},
{
"field_name": "Stripe-Version",
"field_value_expression": "${Header-Stripe-Version}"
},
{
"field_name": "REQUEST_BODY",
"field_value_expression": "${requestBody}"
}
],
"request_to_log": "Request = [${maskedRequestBody}; URL = $!URL]",
"transaction_response_fields": [
{
"field_name": "_",
"field_value_expression": "
## Create masked response body
#{if} (!$StringUtils.equals($last_status_code, '200'))
#{set}( $maskedResponseBody = $last_message_body )
#{else}
## mask message body
#{set}( $maskedResponseBody = $last_message_body )
#{end}

#{if} (!$StringUtils.equals($last_status_code, '200'))
#{set}($blockInputs = [$last_message_body, $last_status_code])
#evaluate(${Block-Error-Handler})
#{stop}
#{else}
#{set}( $gatewayResponseCode = '200' )
#{set}( $gatewayResponseMessage = 'Approved' )
#{end}

## Parse Response JSON Document
#{set}( $createPiResponseDoc = $ZUtility.parseJsonDocument($last_message_body) )

#{set}( $paymentIntentId = $createPiResponseDoc.valueOf('/JsonRoot/id') )
#{set}( $paymentIntentStatus = $createPiResponseDoc.valueOf('/JsonRoot/status') )

#{set}( $threeDS2DataMap = {
'paymentIntentId' : $paymentIntentId,
'paymentIntentStatus' : $paymentIntentStatus
} )

## encode 3DS2 data map
#{set}( $threeDS2ResponseData = $ZUtility.encodeUrlParameters($threeDS2DataMap) )
#{if} ($StringUtils.equals($paymentIntentStatus, 'requires_payment_method'))
#{set}( $zuoraResponseCode = 'Approved' )
#{else}
#{set}( $zuoraResponseCode = 'Error' )
#{end}
"
},
{
"in_transaction_log": "true",
"field_name": "ResponseBody",
"field_value_expression": "$maskedResponseBody"
},
{
"in_transaction_log": "true",
"field_name": "ResponseCode",
"field_value_expression": "$last_status_code"
}
],
"response_fsm_event_expression": "Success"
}
],
"operation_states": [
{
"start_state": "BEGIN",
"transaction_event": "",
"end_state": "CreateDelayedPaymentIntent"
}
],
"operation_response_fields": [
{
"field_name": "ZuoraResponseCode",
"field_value_expression": "$!zuoraResponseCode"
},
{
"field_name": "GatewayResponseCode",
"field_value_expression": "$!gatewayResponseCode"
},
{
"field_name": "GatewayResponseMessage",
"field_value_expression": "$!gatewayResponseMessage"
},
{
"field_name": "ThreeDS2ResponseData",
"field_value_expression": "$!threeDS2ResponseData"
}
]
},
{
"payment_method_type": "CreditCardReferenceTransaction",
"operation_type": "ThreeDS2RequestToken",
"transactions": [
{
"transaction_name": "CreateDelayedPaymentIntent",
"connector_type": "HTTPs",
"transaction_request_fields": [
{
"temporary": true,
"field_name": "_",
"field_value_expression": "
## The PaymentIntent Request Map
#{set}( $paymentIntentRequestMap = {
'confirm' : 'false',
'confirmation_method' : 'manual'
} )

#{set}($blockInputs = [$!threeDs_authorizationAmount, $!threeDs_currency])
#evaluate(${Block-Normalize-Amount})
#{set}( $paymentIntentRequestMap['amount'] = $macroReturn )
#{set}( $paymentIntentRequestMap['currency'] = $!threeDs_currency )

#{if}( $StringUtils.isNotBlank($!gwOptions_PaymentDescription) )
#{set}( $paymentIntentRequestMap['description'] = $gwOptions_PaymentDescription )
#{elseif}( $StringUtils.isNotBlank($!PaymentDescription) )
#{set}( $paymentIntentRequestMap['description'] = $PaymentDescription )
#{end}

#{set}( $requestBody = $ZUtility.encodeUrlParameters($paymentIntentRequestMap) )

#{set}($blockInputs = [$paymentIntentRequestMap])
#evaluate(${Block-Create-Mask-Request-Map})
#{set}( $maskedRequestBody = $ZUtility.encodeUrlParameters($macroReturn) )
"
},
{
"field_name": "URL",
"field_value_expression": "https://api.stripe.com/v1/payment_intents"
},
{
"field_name": "METHOD",
"field_value_expression": "POST"
},
{
"field_name": "Authorization",
"field_value_expression": "${Header-Authorization}"
},
{
"field_name": "Content-Type",
"field_value_expression": "${Header-Content-Type}"
},
{
"field_name": "Stripe-Version",
"field_value_expression": "${Header-Stripe-Version}"
},
{
"field_name": "REQUEST_BODY",
"field_value_expression": "${requestBody}"
}
],
"request_to_log": "Request = [${maskedRequestBody}; URL = $!URL]",
"transaction_response_fields": [
{
"field_name": "_",
"field_value_expression": "
## Create masked response body
#{if} (!$StringUtils.equals($last_status_code, '200'))
#{set}( $maskedResponseBody = $last_message_body )
#{else}
## mask message body
#{set}( $maskedResponseBody = $last_message_body )
#{end}

#{if} (!$StringUtils.equals($last_status_code, '200'))
#{set}($blockInputs = [$last_message_body, $last_status_code])
#evaluate(${Block-Error-Handler})
#{stop}
#{else}
#{set}( $gatewayResponseCode = '200' )
#{set}( $gatewayResponseMessage = 'Approved' )
#{end}

## Parse Response JSON Document
#{set}( $createPiResponseDoc = $ZUtility.parseJsonDocument($last_message_body) )

#{set}( $paymentIntentId = $createPiResponseDoc.valueOf('/JsonRoot/id') )
#{set}( $paymentIntentStatus = $createPiResponseDoc.valueOf('/JsonRoot/status') )

#{set}( $threeDS2DataMap = {
'paymentIntentId' : $paymentIntentId,
'paymentIntentStatus' : $paymentIntentStatus
} )

## encode 3DS2 data map
#{set}( $threeDS2ResponseData = $ZUtility.encodeUrlParameters($threeDS2DataMap) )
#{if} ($StringUtils.equals($paymentIntentStatus, 'requires_payment_method'))
#{set}( $zuoraResponseCode = 'Approved' )
#{else}
#{set}( $zuoraResponseCode = 'Error' )
#{end}
"
},
{
"in_transaction_log": "true",
"field_name": "ResponseBody",
"field_value_expression": "$maskedResponseBody"
},
{
"in_transaction_log": "true",
"field_name": "ResponseCode",
"field_value_expression": "$last_status_code"
}
],
"response_fsm_event_expression": "Success"
}
],
"operation_states": [
{
"start_state": "BEGIN",
"transaction_event": "",
"end_state": "CreateDelayedPaymentIntent"
}
],
"operation_response_fields": [
{
"field_name": "ZuoraResponseCode",
"field_value_expression": "$!zuoraResponseCode"
},
{
"field_name": "GatewayResponseCode",
"field_value_expression": "$!gatewayResponseCode"
},
{
"field_name": "GatewayResponseMessage",
"field_value_expression": "$!gatewayResponseMessage"
},
{
"field_name": "ThreeDS2ResponseData",
"field_value_expression": "$!threeDS2ResponseData"
}
]
},
{
"payment_method_type": "BankTransfer",
"operation_type": "Validate",
"transactions": [
{
"transaction_name": "checkTokenPresence",
"connector_type": "Test",
"transaction_request_fields": [],
"request_to_log": "Checking if Token is being created or verified.",
"transaction_response_fields": [],
"response_fsm_event_expression": "#{if}(($TokenId && !$!TokenId.equals(\"\")) || ($SecondTokenId && !$!SecondTokenId.equals(\"\")))Success#{else}Error#{end}"
},
{
"transaction_name": "VerifyTokenFormat",
"connector_type": "Test",
"transaction_request_fields": [
{
"temporary": true,
"field_name": "_",
"field_value_expression": "
##
## Zuora will not validate the token through gateway, instead
## Zuora only validate the format of token here.
##
## The customer id MUST start with 'cus_'.
## The payment method id MUST start with:
## 1, 'pm_' - a Stripe PaymentMethod
## 2, 'ba_' - a Stripe BankAccount
## 3, 'card_' - a Stripe Card
## 4, 'src_' - a Stripe Source
##

#{set}( $customerId = $!TokenId )
#{set}( $paymentMethodId = $!SecondTokenId )

#{if}(!$StringUtils.startsWithAny($paymentMethodId, 'pm_', 'ba_', 'card_', 'src_'))
#{set}( $zuoraResponseCode = 'Failed' )
#{set}( $gatewayResponseCode = '400' )
#{set}( $gatewayResponseMessage = 'Invalid payment method id' )
#{elseif}(!$StringUtils.startsWith($customerId, 'cus_'))
#{set}( $zuoraResponseCode = 'Failed' )
#{set}( $gatewayResponseCode = '400' )
#{set}( $gatewayResponseMessage = 'Invalid customer id' )
#{else}
#{set}( $zuoraResponseCode = 'Approved' )
#{end}

## The Request Map
#{set}( $ccRefRequestMap = {
'customer' : $customerId,
'payment_method' : $ZUtility.maskTokenId($paymentMethodId)
} )
#{set}( $maskedRequestBody = $ZUtility.encodeUrlParameters($ccRefRequestMap) )
"
}
],
"request_to_log": "Request = [${maskedRequestBody}]",
"transaction_response_fields": [
{
"in_transaction_log": "true",
"field_name": "ResponseMessage",
"field_value_expression": "$!gatewayResponseMessage"
},
{
"in_transaction_log": "true",
"field_name": "ResponseCode",
"field_value_expression": "$!gatewayResponseCode"
}
],
"response_fsm_event_expression": "Success"
},
{
"transaction_name": "CreateCustomer",
"connector_type": "HTTPs",
"transaction_request_fields": [
{
"temporary": true,
"field_name": "_",
"field_value_expression": "
## create Customer request map
#{set}( $customerRequestMap = {} )

## populate Customer request map
#{if}($StringUtils.isNotBlank($!Email))
#{set}( $customerRequestMap[\"email\"] = \"$!Email\" )
#{else}#{end}

#{set}( $name = \"\" )
#{if}($StringUtils.isNotBlank($!FirstName))
#{set}( $name = $!FirstName )
#{else}#{end}
#{if}($StringUtils.isNotBlank($!LastName))
#{set}( $name = $name + \" \" + $!LastName )
#{else}#{end}
#{if}($StringUtils.isNotBlank($name))
#{set}( $customerRequestMap[\"name\"] = $name.trim() )
#{else}#{end}

#{if}($StringUtils.isNotBlank($!City))
#{set}( $customerRequestMap[\"address[city]\"] = \"$!City\" )
#{else}#{end}
#{if}($StringUtils.isNotBlank($!Country))
#{set}( $customerRequestMap[\"address[country]\"] = \"$!Country\" )
#{else}#{end}

#{set}( $street = \"\" )
#{if}($StringUtils.isNotBlank($!StreetNumber))
#{set}( $street = $!StreetNumber )
#{else}#{end}
#{if}($StringUtils.isNotBlank($!StreetName))
#{set}( $street = $street + \" \" + $!StreetName )
#{else}#{end}
#{if}($StringUtils.isNotBlank($street))
#{set}( $customerRequestMap[\"address[line1]\"] = $street.trim() )
#{else}#{end}

#{if}($StringUtils.isNotBlank($!PostalCode))
#{set}( $customerRequestMap[\"address[postal_code]\"] = \"$!PostalCode\" )
#{else}#{end}
#{if}($StringUtils.isNotBlank($!State))
#{set}( $customerRequestMap[\"address[state]\"] = \"$!State\" )
#{else}#{end}

#{set}( $requestBody = $ZUtility.encodeUrlParameters($customerRequestMap) )

#{set}($blockInputs = [$customerRequestMap])
#evaluate(${Block-Create-Mask-Request-Map})
#{set}( $maskedRequestBody = $ZUtility.encodeUrlParameters($macroReturn) )
"
},
{
"field_name": "URL",
"field_value_expression": "https://api.stripe.com/v1/customers"
},
{
"field_name": "METHOD",
"field_value_expression": "POST"
},
{
"field_name": "Authorization",
"field_value_expression": "${Header-Authorization}"
},
{
"field_name": "Content-Type",
"field_value_expression": "${Header-Content-Type}"
},
{
"field_name": "Stripe-Version",
"field_value_expression": "${Header-Stripe-Version}"
},
{
"field_name": "REQUEST_BODY",
"field_value_expression": "${requestBody}"
}
],
"request_to_log": "Request = [${maskedRequestBody}; URL = $!URL]",
"transaction_response_fields": [
{
"field_name": "_",
"field_value_expression": "
## create masked response body
#{if}($!StringUtils.equals($last_status_code, '200'))
#{set}( $maskedResponseBody = $last_message_body )
#{else}
## mask message body
#{set}( $maskedResponseBody = $last_message_body )
#{end}

#{if}(!$StringUtils.equals($last_status_code, '200'))
#{set}( $blockInputs = [$last_message_body, $last_status_code] )
#evaluate(${Block-Error-Handler})
#{stop}
#{else}
#{set}( $gatewayResponseCode = '200' )
#{set}( $gatewayResponseMessage = 'Approved' )
#{end}

## parse JSON response
#{set}( $createCustomerResponseDoc = $ZUtility.parseJsonDocument($last_message_body) )
#{set}( $customerId = $createCustomerResponseDoc.valueOf('/JsonRoot/id') )

#{if} ($StringUtils.equals($last_status_code, '200'))
#{set}( $zuoraResponseCode = 'Approved' )
#{else}
#{set}( $zuoraResponseCode = 'Failed' )
#{set}( $gatewayResponseCode = '402' )
#{set}( $gatewayResponseMessage = 'Unexpected status from gateway.' )
#{end}
"
},
{
"in_transaction_log": true,
"field_name": "ResponseBody",
"field_value_expression": "$maskedResponseBody"
},
{
"in_transaction_log": true,
"field_name": "ResponseCode",
"field_value_expression": "$last_status_code"
}
],
"response_fsm_event_expression": "Success"
},
{
"transaction_name": "CreateSetupIntent",
"connector_type": "HTTPs",
"transaction_request_fields": [
{
"temporary": true,
"field_name": "_",
"field_value_expression": "
## set up mandate data
#{if}($StringUtils.isNotBlank($!IPAddress))
#{set}( $mandateIPAddress = $!IPAddress)
#{elseif}($StringUtils.isNotBlank($!browser_IpAddress))
#{set}( $mandateIPAddress = $!browser_IpAddress )
#{elseif}($StringUtils.isNotBlank($!$gwOptions_ipAddress))
#{set}( $mandateIPAddress = $!$gwOptions_ipAddress )
#{end}

#{if}($StringUtils.isNotBlank($!browser_UserAgent))
#{set}( $mandateUserAgent = $ZUtility.decodeBase64($!browser_UserAgent) )
#{elseif}($StringUtils.isNotBlank($!gwOptions_UserAgent))
#{set}( $mandateUserAgent = $!gwOptions_UserAgent )
#{end}

#{if}($StringUtils.isNotBlank($ZUtility.getMilliSecTime()))
#{set}( $mandateAcceptedAt = $ZUtility.round($ZUtility.divide($ZUtility.getMilliSecTime(), \"1000\"), 0) )
#{end}

## create SetupIntent request map
#{set}( $setupIntentRequestMap = {
'expand[]': 'mandate',
'payment_method_types[]': $!bankTransferTypeMap.get($!BankTransferType),
'usage': 'off_session',
'confirm': 'true',
'mandate_data[customer_acceptance][type]': 'online',
'customer': $customerId
} )

#{if}($StringUtils.isNotBlank($mandateIPAddress))
#{set}( $setupIntentRequestMap[\"mandate_data[customer_acceptance][online][ip_address]\"] = $mandateIPAddress )
#{end}
#{if}($StringUtils.isNotBlank($mandateUserAgent))
#{set}( $setupIntentRequestMap[\"mandate_data[customer_acceptance][online][user_agent]\"] = $mandateUserAgent )
#{end}
#{if}($StringUtils.isNotBlank($mandateAcceptedAt))
#{set}( $setupIntentRequestMap[\"mandate_data[customer_acceptance][accepted_at]\"] = $mandateAcceptedAt )
#{end}

## construct payment method data
#{if}($!BankTransferType.equals(\"SEPA\"))
#evaluate(${Block-Construct-SEPA-PaymentMethodData})
#{elseif}($!BankTransferType.equals(\"DirectDebitUK\"))
#evaluate(${Block-Construct-BACS-PaymentMethodData})
#{elseif}($!BankTransferType.equals('PAD'))
#evaluate(${Block-Construct-PAD-PaymentMethodData})
#{end}
$setupIntentRequestMap.putAll($macroReturn)

#evaluate(${Block-Payment-Metadata})
$setupIntentRequestMap.putAll($macroMetadataReturn)

#{set}( $requestBody = $ZUtility.encodeUrlParameters($setupIntentRequestMap) )

#{set}($blockInputs = [$setupIntentRequestMap])
#evaluate(${Block-Create-Mask-Request-Map})
#{set}( $maskedRequestBody = $ZUtility.encodeUrlParameters($macroReturn) )
"
},
{
"field_name": "URL",
"field_value_expression": "https://api.stripe.com/v1/setup_intents"
},
{
"field_name": "METHOD",
"field_value_expression": "POST"
},
{
"field_name": "Authorization",
"field_value_expression": "${Header-Authorization}"
},
{
"field_name": "Content-Type",
"field_value_expression": "${Header-Content-Type}"
},
{
"field_name": "Stripe-Version",
"field_value_expression": "${Header-Stripe-Version}"
},
{
"field_name": "REQUEST_BODY",
"field_value_expression": "${requestBody}"
}
],
"request_to_log": "Request = [${maskedRequestBody}; URL = $!URL]",
"transaction_response_fields": [
{
"field_name": "_",
"field_value_expression": "
## create masked response body
#{if}($!StringUtils.equals($last_status_code, '200'))
#{set}( $maskedResponseBody = $last_message_body )
#{else}
## mask message body
#{set}( $maskedResponseBody = $last_message_body )
#{end}

#{if}(!$StringUtils.equals($last_status_code, '200'))
#{set}( $blockInputs = [$last_message_body, $last_status_code] )
#evaluate(${Block-Error-Handler})
#{stop}
#{else}
#{set}( $gatewayResponseCode = '200' )
#{set}( $gatewayResponseMessage = 'Approved' )
#{end}

## parse JSON response
#{set}( $createSiResponseDoc = $ZUtility.parseJsonDocument($last_message_body) )
#{set}( $setupIntentId = $createSiResponseDoc.valueOf('/JsonRoot/id') )
#{set}( $setupIntentStatus = $createSiResponseDoc.valueOf('/JsonRoot/status') )
#{set}( $setupIntentPaymentMethodId = $createSiResponseDoc.valueOf('/JsonRoot/payment_method') )
#{if}($!BankTransferType.equals(\"SEPA\"))
#{set}( $setupIntentMandateId = $createSiResponseDoc.valueOf('/JsonRoot/mandate/payment_method_details/sepa_debit/reference') )
#{elseif}($!BankTransferType.equals(\"DirectDebitUK\"))
#{set}( $setupIntentMandateId = $createSiResponseDoc.valueOf('/JsonRoot/mandate/payment_method_details/bacs_debit/reference') )
#{elseif}($!BankTransferType.equals('PAD'))
#{set}( $setupIntentMandateId = $createSiResponseDoc.valueOf('/JsonRoot/mandate/id') )
#{end}

#{if}($!BankTransferType.equals('PAD') && $StringUtils.equals($setupIntentStatus, 'requires_action'))
#{set}( $zuoraResponseCode = 'Approved' )
#{elseif} ($StringUtils.equals($setupIntentStatus, 'succeeded'))
#{set}( $zuoraResponseCode = 'Approved' )
#{else}
#{set}( $zuoraResponseCode = 'Failed' )
#{set}( $gatewayResponseCode = '402' )
#{set}( $gatewayResponseMessage = 'Unexpected status from gateway.' )
#{end}
"
},
{
"in_transaction_log": true,
"field_name": "ResponseBody",
"field_value_expression": "$maskedResponseBody"
},
{
"in_transaction_log": true,
"field_name": "ResponseCode",
"field_value_expression": "$last_status_code"
}
],
"response_fsm_event_expression": "Success"
}
],
"operation_states": [
{
"start_state": "BEGIN",
"transaction_event": "",
"end_state": "checkTokenPresence"
},
{
"start_state": "checkTokenPresence",
"transaction_event": "Success",
"end_state": "VerifyTokenFormat"
},
{
"start_state": "checkTokenPresence",
"transaction_event": "Error",
"end_state": "CreateCustomer"
},
{
"start_state": "CreateCustomer",
"transaction_event": "Success",
"end_state": "CreateSetupIntent"
}
],
"operation_response_fields": [
{
"field_name": "ZuoraResponseCode",
"field_value_expression": "$!zuoraResponseCode"
},
{
"field_name": "GatewayResponseCode",
"field_value_expression": "$!gatewayResponseCode"
},
{
"field_name": "GatewayResponseMessage",
"field_value_expression": "$!gatewayResponseMessage"
},
{
"field_name": "GatewayReferenceId",
"field_value_expression": "$!setupIntentMandateId"
},
{
"field_name": "GatewaySecondReferenceId",
"field_value_expression": "$!customerId"
},
{
"field_name": "GatewayThirdReferenceId",
"field_value_expression": "$!setupIntentPaymentMethodId"
},
{
"field_name": "GatewayResponseToken1",
"field_value_expression": "$!customerId"
},
{
"field_name": "GatewayResponseToken2",
"field_value_expression": "$!setupIntentPaymentMethodId"
},
{
"field_name": "GatewayResponseToken3",
"field_value_expression": "$!setupIntentMandateId"
}
]
},
{
"payment_method_type": "BankTransfer",
"operation_type": "Payment",
"support_idempotent_retry": true,
"transactions": [
{
"transaction_name": "CreateAndConfirmPaymentIntent",
"connector_type": "HTTPs",
"transaction_request_fields": [
{
"temporary": true,
"field_name": "_",
"field_value_expression": "
#{set}( $paymentIntentRequestMap = {
'confirm': 'true',
'payment_method_types[]': $!bankTransferTypeMap.get($!BankTransferType),
'customer': $!TokenId,
'payment_method': $!SecondTokenId
} )
#{set}( $blockInputs = [$PaymentAmount, $Currency] )
#{evaluate}(${Block-Normalize-Amount})
#{set}( $paymentIntentRequestMap['amount'] = $macroReturn )
#{set}( $paymentIntentRequestMap['currency'] = $!Currency )
## {set}( $paymentIntentRequestMap['metadata[zpayment_number]'] = $!PaymentNumber )
$paymentIntentRequestMap.putAll($macroReturn)

#evaluate(${Block-Payment-Metadata})
$paymentIntentRequestMap.putAll($macroMetadataReturn)

## set RadarSessionId
#{if}($StringUtils.isNotBlank($!RadarSessionId))
#{set}( $paymentIntentRequestMap['radar_options[session]'] = $!RadarSessionId )
#{end}

## check for SEPA payment method to avoid issue with payment_method_data[ip]
#{if}(!$!StringUtils.equals($!BankTransferType, \"SEPA\") && !$!StringUtils.equals($!BankTransferType, \"DirectDebitUK\"))
#evaluate(${Block-Add-IPAddress})
#{if}(!$macroReturn.isEmpty())
$paymentIntentRequestMap.putAll($macroReturn)
#{else}#{end}
#{else}#{end}
#{if}($!StringUtils.equals($!BankTransferType, 'PAD'))
$paymentIntentRequestMap.put('mandate', $!MandateID)
#{end}

#{if} ($StringUtils.isNotBlank($SoftDescriptor))
#{set}($paymentIntentRequestMap['statement_descriptor'] = $ZUtility.truncateMaxLength($SoftDescriptor, '22'))
#{end}

#{set}( $requestBody = $ZUtility.encodeUrlParameters($paymentIntentRequestMap) )
#{set}( $blockInputs = [$paymentIntentRequestMap] )
#evaluate(${Block-Create-Mask-Request-Map})
#{set}( $maskedRequestBody = $ZUtility.encodeUrlParameters($macroReturn) )
"
},
{
"field_name": "URL",
"field_value_expression": "https://api.stripe.com/v1/payment_intents"
},
{
"field_name": "METHOD",
"field_value_expression": "POST"
},
{
"field_name": "Authorization",
"field_value_expression": "${Header-Authorization}"
},
{
"field_name": "Content-Type",
"field_value_expression": "${Header-Content-Type}"
},
{
"field_name": "Stripe-Version",
"field_value_expression": "${Header-Stripe-Version}"
},
{
"field_name": "REQUEST_BODY",
"field_value_expression": "${requestBody}"
},
{
"field_name": "Retry-Enabled",
"field_value_expression": "Yes"
},
{
"field_name": "Idempotency-Key",
"field_value_expression": "#{if}($StringUtils.isNotBlank(${Framework-Idempotency-Key}))${Framework-Idempotency-Key}_paymentintent#{else}$ZUtility.getUUID(255)#{end}"
}
],
"request_to_log": "Idempotency-Key=$!{Idempotency-Key},Request = [${maskedRequestBody}; URL = $!URL]",
"transaction_response_fields": [
{
"field_name": "_",
"field_value_expression": "
## Create masked response body
#{if} (!$StringUtils.equals($last_status_code, '200'))
#{set}( $maskedResponseBody = $last_message_body )
#{else}
## mask message body
#{set}( $maskedResponseBody = $last_message_body )
#{end}
#{if} (!$StringUtils.equals($last_status_code, '200'))
#{set}($blockInputs = [$last_message_body, $last_status_code])
#evaluate(${Block-Error-Handler})
#{stop}
#{else}
#{set}( $gatewayResponseCode = '200' )
#{set}( $gatewayResponseMessage = 'Approved' )
#{end}
## Parse Response JSON Document
#{set}( $createPiResponseDoc = $ZUtility.parseJsonDocument($last_message_body) )
#{set}( $paymentIntentId = $createPiResponseDoc.valueOf('/JsonRoot/id') )
#{set}( $paymentIntentStatus = $createPiResponseDoc.valueOf('/JsonRoot/status') )

## The payment intent status could be one of following
## 1, succeeded
## 2, processing
## 3, canceled
## 4, requires_payment_method
## 5, requires_confirmation
## 6, requires_action
## 7, requires_capture
## It will be considered Approved when the payment intent status is either 'processing'
## or 'succeeded'.
#{if} ($StringUtils.equals($paymentIntentStatus, 'succeeded') || $StringUtils.equals($paymentIntentStatus, 'processing'))
#{set}( $zuoraResponseCode = 'Approved' )
#{else}
#{set}( $zuoraResponseCode = 'Failed' )
#{end}
"
},
{
"in_transaction_log": "true",
"field_name": "ResponseBody",
"field_value_expression": "$maskedResponseBody"
},
{
"in_transaction_log": "true",
"field_name": "ResponseCode",
"field_value_expression": "$last_status_code"
}
],
"response_fsm_event_expression": "Success"
},
{
"transaction_request_fields": [],
"transaction_name": "CheckExistingPayment",
"connector_type": "Test",
"request_to_log": "existingPaymentIntentId = $!ReferenceId",
"transaction_response_fields": [],
"response_fsm_event_expression": "#{if}($StringUtils.isNotBlank($ReferenceId))Success#{else}Error#{end}"
},
{
"transaction_name": "ConfirmPaymentIntent",
"connector_type": "HTTPs",
"transaction_request_fields": [
{
"field_name": "URL",
"field_value_expression": "https://api.stripe.com/v1/payment_intents/$ReferenceId/confirm"
},
{
"field_name": "METHOD",
"field_value_expression": "POST"
},
{
"field_name": "Authorization",
"field_value_expression": "${Header-Authorization}"
},
{
"field_name": "Content-Type",
"field_value_expression": "${Header-Content-Type}"
},
{
"field_name": "Stripe-Version",
"field_value_expression": "${Header-Stripe-Version}"
},
{
"field_name": "REQUEST_BODY",
"field_value_expression": ""
},
{
"field_name": "Retry-Enabled",
"field_value_expression": "Yes"
},
{
"field_name": "Idempotency-Key",
"field_value_expression": "#{if}($StringUtils.isNotBlank(${Framework-Idempotency-Key}))${Framework-Idempotency-Key}_confirm#{else}$ZUtility.getUUID(255)#{end}"
}
],
"request_to_log": "Idempotency-Key=$!{Idempotency-Key},Request = [URL = $!URL]",
"transaction_response_fields": [
{
"field_name": "_",
"field_value_expression": "
## Create masked response body
#{if} (!$StringUtils.equals($last_status_code, '200'))
#{set}( $maskedResponseBody = $last_message_body )
#{else}
## mask message body
#{set}( $maskedResponseBody = $last_message_body )
#{end}
#{if} (!$StringUtils.equals($last_status_code, '200'))
#{set}($blockInputs = [$last_message_body, $last_status_code])
#evaluate(${Block-Error-Handler})
## check error code
#{if}($StringUtils.equals($stripeErrorCode, 'payment_intent_unexpected_state'))
#evaluate(${Block-Last-Payment-Error-Handler})
#{end}
#{stop}
#{else}
#{set}( $gatewayResponseCode = '200' )
#{set}( $gatewayResponseMessage = 'Approved' )
#{end}
## Parse Response JSON Document
#{set}( $createPiResponseDoc = $ZUtility.parseJsonDocument($last_message_body) )
#{set}( $paymentIntentId = $createPiResponseDoc.valueOf('/JsonRoot/id') )
#{set}( $paymentIntentStatus = $createPiResponseDoc.valueOf('/JsonRoot/status') )
## read data from first charge object
#{set}( $gatewayReferenceId = $createPiResponseDoc.valueOf('//charges/data/ArrayItem[1]/id') )
#{if} ($StringUtils.equals($paymentIntentStatus, 'succeeded'))
#{set}( $zuoraResponseCode = 'Approved' )
#{else}
#{set}( $zuoraResponseCode = 'Failed' )
#{end}
"
},
{
"in_transaction_log": "true",
"field_name": "ResponseBody",
"field_value_expression": "$maskedResponseBody"
},
{
"in_transaction_log": "true",
"field_name": "ResponseCode",
"field_value_expression": "$last_status_code"
}
],
"response_fsm_event_expression": "#{if}($StringUtils.equals($paymentIntentStatus, 'succeeded'))Success#{else}Error#{end}"
},
{
"transaction_name": "RetrieveExistingPaymentIntent",
"connector_type": "HTTPs",
"transaction_request_fields": [
{
"field_name": "URL",
"field_value_expression": "https://api.stripe.com/v1/payment_intents/$ReferenceId"
},
{
"field_name": "METHOD",
"field_value_expression": "GET"
},
{
"field_name": "Authorization",
"field_value_expression": "${Header-Authorization}"
},
{
"field_name": "Content-Type",
"field_value_expression": "${Header-Content-Type}"
},
{
"field_name": "Stripe-Version",
"field_value_expression": "${Header-Stripe-Version}"
},
{
"field_name": "Retry-Enabled",
"field_value_expression": "Yes"
}
],
"request_to_log": "Request = [${maskedRequestBody}; URL = $!URL]",
"transaction_response_fields": [
{
"field_name": "_",
"field_value_expression": "
## Create masked response body
#{if} (!$StringUtils.equals($last_status_code, '200'))
#{set}( $maskedResponseBody = $last_message_body )
#{else}
## mask message body
#{set}( $maskedResponseBody = $last_message_body )
#{end}
#{if} (!$StringUtils.equals($last_status_code, '200'))
#{set}($blockInputs = [$last_message_body, $last_status_code])
#evaluate(${Block-Error-Handler})
#{stop}
#{else}
#{set}( $gatewayResponseCode = '200' )
#{set}( $gatewayResponseMessage = 'Approved' )
#{end}
## Parse Response JSON Document
#{set}( $createPiResponseDoc = $ZUtility.parseJsonDocument($last_message_body) )
#{set}( $paymentIntentId = $createPiResponseDoc.valueOf('/JsonRoot/id') )
#{set}( $paymentIntentStatus = $createPiResponseDoc.valueOf('/JsonRoot/status') )
## read data from first charge object
#{set}( $gatewayReferenceId = $createPiResponseDoc.valueOf('//charges/data/ArrayItem[1]/id') )
#{if} ($StringUtils.equals($paymentIntentStatus, 'succeeded'))
#{set}( $zuoraResponseCode = 'Approved' )
#{else}
#{set}( $zuoraResponseCode = 'Failed' )
#{end}
"
},
{
"in_transaction_log": "true",
"field_name": "ResponseBody",
"field_value_expression": "$maskedResponseBody"
},
{
"in_transaction_log": "true",
"field_name": "ResponseCode",
"field_value_expression": "$last_status_code"
}
],
"response_fsm_event_expression": "#{if}($StringUtils.equals($paymentIntentStatus, 'succeeded'))Success#{else}Error#{end}"
}
],
"operation_states": [
{
"start_state": "BEGIN",
"transaction_event": "",
"end_state": "CheckExistingPayment"
},
{
"start_state": "CheckExistingPayment",
"transaction_event": "Success",
"end_state": "RetrieveExistingPaymentIntent"
},
{
"start_state": "CheckExistingPayment",
"transaction_event": "Error",
"end_state": "CreateAndConfirmPaymentIntent"
},
{
"start_state": "RetrieveExistingPaymentIntent",
"transaction_event": "Error",
"end_state": "ConfirmPaymentIntent"
}
],
"operation_response_fields": [
{
"field_name": "ZuoraResponseCode",
"field_value_expression": "$!zuoraResponseCode"
},
{
"field_name": "GatewayResponseCode",
"field_value_expression": "$!gatewayResponseCode"
},
{
"field_name": "GatewayResponseMessage",
"field_value_expression": "$!gatewayResponseMessage"
},
{
"field_name": "GatewayReferenceId",
"field_value_expression": "$!paymentIntentId"
}
]
},
{
"payment_method_type": "BankTransfer",
"operation_type": "Refund",
"support_idempotent_retry": true,
"transactions": [
{
"transaction_name": "createRefund",
"connector_type": "HTTPs",
"transaction_request_fields": [
{
"temporary": true,
"field_name": "_",
"field_value_expression": "
#{set}( $refundRequestMap = {
'metadata[zrefund_number]' : $!RefundNumber
} )

## set field according to reference id prefix
#{if}($StringUtils.startsWith($ReferenceId, 'pi_'))
#{set}( $refundRequestMap['payment_intent'] = $ReferenceId )
#{else}
#{set}( $refundRequestMap['charge'] = $ReferenceId )
#{end}

#{set}($blockInputs = [$RefundAmount, $Currency])
#evaluate(${Block-Normalize-Amount})
#{set}( $refundRequestMap['amount'] = $macroReturn )
#{set}( $requestBody = $ZUtility.encodeUrlParameters($refundRequestMap) )
"
},
{
"field_name": "URL",
"field_value_expression": "https://api.stripe.com/v1/refunds"
},
{
"field_name": "METHOD",
"field_value_expression": "POST"
},
{
"field_name": "Authorization",
"field_value_expression": "${Header-Authorization}"
},
{
"field_name": "Content-Type",
"field_value_expression": "${Header-Content-Type}"
},
{
"field_name": "Stripe-Version",
"field_value_expression": "${Header-Stripe-Version}"
},
{
"field_name": "REQUEST_BODY",
"field_value_expression": "${requestBody}"
},
{
"field_name": "Retry-Enabled",
"field_value_expression": "Yes"
},
{
"field_name": "Idempotency-Key",
"field_value_expression": "#{if}($StringUtils.isNotBlank(${Framework-Idempotency-Key}))${Framework-Idempotency-Key}#{else}$ZUtility.getUUID(255)#{end}"
}
],
"request_to_log": "Idempotency-Key=$!{Idempotency-Key},Request = [${requestBody}; URL = $!URL]",
"transaction_response_fields": [
{
"field_name": "_",
"field_value_expression": "
## Create masked response body
#{if} (!$StringUtils.equals($last_status_code, '200'))
#{set}( $maskedResponseBody = $last_message_body )
#{else}
## mask message body
#{set}( $maskedResponseBody = $last_message_body )
#{end}
#{if} (!$StringUtils.equals($last_status_code, '200'))
#{set}($blockInputs = [$last_message_body, $last_status_code])
#evaluate(${Block-Error-Handler})
#{stop}
#{else}
#{set}( $gatewayResponseCode = '200' )
#{set}( $gatewayResponseMessage = 'Approved' )
#{end}
## Parse Response JSON Document
#{set}( $refundResponseDoc = $ZUtility.parseJsonDocument($last_message_body) )
#{set}( $refundId = $refundResponseDoc.valueOf('/JsonRoot/id') )
#{set}( $refundStatus = $refundResponseDoc.valueOf('/JsonRoot/status') )

## the refund status could be one of following 4:
## 1. pending
## 2. succeeded
## 3. failed
## 4. canceled
## It will be considered Approved when the refund status is either 'pending'
## or 'succeeded'.
#{if} ($StringUtils.equals($refundStatus, 'succeeded') || $StringUtils.equals($refundStatus, 'pending'))
#{set}( $zuoraResponseCode = 'Approved' )
#{else}
#{set}( $zuoraResponseCode = 'Failed' )
#{end}
"
},
{
"in_transaction_log": "true",
"field_name": "ResponseBody",
"field_value_expression": "$maskedResponseBody"
},
{
"in_transaction_log": "true",
"field_name": "ResponseCode",
"field_value_expression": "$last_status_code"
}
],
"response_fsm_event_expression": "Success"
}
],
"operation_states": [
{
"start_state": "BEGIN",
"transaction_event": "",
"end_state": "createRefund"
}
],
"operation_response_fields": [
{
"field_name": "ZuoraResponseCode",
"field_value_expression": "$!zuoraResponseCode"
},
{
"field_name": "GatewayResponseCode",
"field_value_expression": "$!gatewayResponseCode"
},
{
"field_name": "GatewayResponseMessage",
"field_value_expression": "$!gatewayResponseMessage"
},
{
"field_name": "GatewayReferenceId",
"field_value_expression": "$!refundId"
}
]
},
{
"payment_method_type": "Ideal",
"operation_type": "Payment",
"support_idempotent_retry": true,
"transactions": [
{
"transaction_name":"CheckOnSessionPayment",
"transaction_type":"InternalProcessing",
"connector_type":"Test",
"transaction_request_fields": [],
"request_to_log":"ReferenceId = $!ReferenceId",
"transaction_response_fields": [
{
"in_transaction_log": false,
"field_name": "zuoraResponseCode",
"field_value_expression": "Approved"
}
],
"response_fsm_event_expression": "#{if}($StringUtils.isNotBlank($!ReferenceId))Success#{else}Error#{end}"
},
{
"transaction_name": "UpdatePaymentIntentWithPaymentNumber",
"connector_type": "HTTPs",
"transaction_request_fields": [
{
"temporary": true,
"field_name": "_",
"field_value_expression": "
## The PaymentIntent Request Map
#{set}( $paymentIntentRequestMap = {} )
#{set}( $paymentIntentRequestMap['metadata[zpayment_number]'] =  $StringUtils.join($!TenantId, '_', $!PaymentNumber) )
#{set}( $requestBody = $ZUtility.encodeUrlParameters($paymentIntentRequestMap) )

#{set}( $blockInputs = [$paymentIntentRequestMap] )
#evaluate(${Block-Create-Mask-Request-Map})
#{set}( $maskedRequestBody = $ZUtility.encodeUrlParameters($macroReturn) )
"
},
{
"field_name": "URL",
"field_value_expression": "https://api.stripe.com/v1/payment_intents/$!ReferenceId"
},
{
"field_name": "METHOD",
"field_value_expression": "POST"
},
{
"field_name": "Authorization",
"field_value_expression": "${Header-Authorization}"
},
{
"field_name": "Content-Type",
"field_value_expression": "${Header-Content-Type}"
},
{
"field_name": "Stripe-Version",
"field_value_expression": "${Header-Stripe-Version-2020}"
},
{
"field_name": "REQUEST_BODY",
"field_value_expression": "${requestBody}"
}
],
"request_to_log": "Idempotency-Key=$!{Idempotency-Key},Request = [${maskedRequestBody}; URL = $!URL]",
"transaction_response_fields": [
{
"field_name": "_",
"field_value_expression": "
## Create response body
#{if} (!$StringUtils.equals($last_status_code, '200'))
#{set}( $responseBody = $last_message_body )
#{else}
#{set}( $responseBody = $last_message_body )
#{end}
#{if} (!$StringUtils.equals($!last_status_code, '200'))
#{set}($blockInputs = [$last_message_body, $last_status_code])
#evaluate(${Block-Error-Handler})
#{stop}
#{end}

## Parse Response JSON Document
#{set}( $createPiResponseDoc = $ZUtility.parseJsonDocument($!last_message_body) )
#{set}( $paymentIntentId = $createPiResponseDoc.valueOf('/JsonRoot/id') )
#{set}( $paymentIntentStatus = $createPiResponseDoc.valueOf('/JsonRoot/status') )
"
},
{
"in_transaction_log": "true",
"field_name": "ResponseBody",
"field_value_expression": "$!responseBody"
},
{
"in_transaction_log": "true",
"field_name": "ResponseCode",
"field_value_expression": "$!last_status_code"
}
],
"response_fsm_event_expression": "Success"
},
{
"transaction_name": "RetrieveExistingPaymentIntent",
"connector_type": "HTTPs",
"transaction_request_fields": [
{
"field_name": "URL",
"field_value_expression": "https://api.stripe.com/v1/payment_intents/$!ReferenceId"
},
{
"field_name": "METHOD",
"field_value_expression": "GET"
},
{
"field_name": "Authorization",
"field_value_expression": "${Header-Authorization}"
},
{
"field_name": "Content-Type",
"field_value_expression": "${Header-Content-Type}"
},
{
"field_name": "Stripe-Version",
"field_value_expression": "${Header-Stripe-Version-2020}"
}
],
"request_to_log": "Request = [${maskedRequestBody}; URL = $!URL]",
"transaction_response_fields": [
{
"field_name": "_",
"field_value_expression": "
## Create response body
#{if} (!$StringUtils.equals($last_status_code, '200'))
#{set}( $responseBody = $last_message_body )
#{else}
#{set}( $responseBody = $last_message_body )
#{end}

#{if} (!$StringUtils.equals($last_status_code, '200'))
#{set}($blockInputs = [$last_message_body, $last_status_code])
#evaluate(${Block-Error-Handler})
#{stop}
#{end}

## Parse Response JSON Document
#{set}( $createPiResponseDoc = $ZUtility.parseJsonDocument($last_message_body) )

#{set}( $paymentIntentId = $createPiResponseDoc.valueOf('/JsonRoot/id') )
#{set}( $paymentIntentStatus = $createPiResponseDoc.valueOf('/JsonRoot/status') )

## read data from first charge object
#{set}( $gatewayReferenceId = $createPiResponseDoc.valueOf('//charges/data/ArrayItem[1]/id') )
#{if} (!$StringUtils.isBlank($gatewayReferenceId) && $StringUtils.startsWith($gatewayReferenceId, 'py_'))
#{set}( $gatewaySecondReferenceId = $paymentIntentId )
#{end}

#{set}( $gatewayCustomerId = $createPiResponseDoc.valueOf('/JsonRoot/customer') )
#{set}( $gatewayPaymentMethodId = $createPiResponseDoc.valueOf('/JsonRoot/payment_method') )
#{set}( $idealMandateId = $createPiResponseDoc.valueOf('//charges/data/ArrayItem[1]/payment_method_details/ideal/generated_sepa_debit_mandate') )

#{if} ($StringUtils.equals($paymentIntentStatus, 'succeeded'))
#{set}( $zuoraResponseCode = 'Approved' )
#{set}( $gatewayResponseCode = '200' )
#{set}( $gatewayResponseMessage = 'Approved' )
#{else}
#{set}( $zuoraResponseCode = 'Failed' )
#{end}
"
},
{
"in_transaction_log": "true",
"field_name": "ResponseBody",
"field_value_expression": "$!responseBody"
},
{
"in_transaction_log": "true",
"field_name": "ResponseCode",
"field_value_expression": "$!last_status_code"
}
],
"response_fsm_event_expression": "#{if}($StringUtils.equals($paymentIntentStatus, 'succeeded'))Success#{else}Error#{end}"
}
],
"operation_states": [
{
"start_state": "BEGIN",
"transaction_event": "",
"end_state": "CheckOnSessionPayment"
},
{
"start_state": "CheckOnSessionPayment",
"transaction_event": "Success",
"end_state": "UpdatePaymentIntentWithPaymentNumber"
},
{
"start_state": "UpdatePaymentIntentWithPaymentNumber",
"transaction_event": "Success",
"end_state": "RetrieveExistingPaymentIntent"
}
],
"operation_response_fields": [
{
"field_name": "ZuoraResponseCode",
"field_value_expression": "$!zuoraResponseCode"
},
{
"field_name": "GatewayResponseCode",
"field_value_expression": "$!gatewayResponseCode"
},
{
"field_name": "GatewayResponseMessage",
"field_value_expression": "$!gatewayResponseMessage"
},
{
"field_name": "GatewayReferenceId",
"field_value_expression": "$!gatewayReferenceId"
},
{
"field_name": "GatewaySecondReferenceId",
"field_value_expression": "$!gatewaySecondReferenceId"
},
{
"field_name": "ResponseMandateId",
"field_value_expression": "$!idealMandateId"
}
]
},
{
"payment_method_type": "Ideal",
"operation_type": "ThreeDS2SubmitChallengeResult",
"transactions": [
{
"transaction_name": "CheckOnSessionPayment",
"connector_type": "Test",
"transaction_request_fields": [],
"request_to_log": "Is on-session payment? = $!threeDs_doPayment",
"transaction_response_fields": [],
"response_fsm_event_expression": "#{if}($StringUtils.equalsIgnoreCase($!threeDs_doPayment, 'true'))Success#{else}Error#{end}"
},
{
"transaction_name": "RetrieveSetupIntent",
"connector_type": "HTTPs",
"transaction_request_fields": [
{
"temporary": true,
"field_name": "_",
"field_value_expression": "
#{if}($StringUtils.isNotEmpty($threeDs_setupIntentId))
#{set}( $setupIntentId = $threeDs_setupIntentId) )
#{else}
#{set}( $setupIntentId = 'missing_id') )
#{end}

## The SetupIntent Request Map
#{set}( $setupIntentRequestMap = {
'expand[]' : 'latest_attempt'
} )

#{set}( $requestBody = $ZUtility.encodeUrlParameters($setupIntentRequestMap) )
"
},
{
"field_name": "URL",
"field_value_expression": "https://api.stripe.com/v1/setup_intents/$!setupIntentId"
},
{
"field_name": "METHOD",
"field_value_expression": "POST"
},
{
"field_name": "Authorization",
"field_value_expression": "${Header-Authorization}"
},
{
"field_name": "Content-Type",
"field_value_expression": "${Header-Content-Type}"
},
{
"field_name": "Stripe-Version",
"field_value_expression": "${Header-Stripe-Version-2020}"
},
{
"field_name": "REQUEST_BODY",
"field_value_expression": "${requestBody}"
}
],
"request_to_log": "Request = [${requestBody}];URL=$URL",
"transaction_response_fields": [
{
"field_name": "_",
"field_value_expression": "
## Create response body
#{if} (!$StringUtils.equals($last_status_code, '200'))
#{set}( $responseBody = $last_message_body )
#{else}
#{set}( $responseBody = $last_message_body )
#{end}

#{if} (!$StringUtils.equals($last_status_code, '200'))
#{set}($blockInputs = [$last_message_body, $last_status_code])
#evaluate(${Block-Error-Handler})
#{stop}
#{end}

## Parse Response JSON Document
#{set}( $retrieveSiResponseDoc = $ZUtility.parseJsonDocument($last_message_body) )

#{set}( $setupIntentId = $retrieveSiResponseDoc.valueOf('/JsonRoot/id') )
#{set}( $setupIntentStatus = $retrieveSiResponseDoc.valueOf('/JsonRoot/status') )
#{set}( $setupIntentCustomerId = $retrieveSiResponseDoc.valueOf('/JsonRoot/customer') )
#{set}( $setupIntentGeneratedSepaDebitId = $retrieveSiResponseDoc.valueOf('/JsonRoot/latest_attempt/payment_method_details/ideal/generated_sepa_debit') )
#{set}( $setupIntentGeneratedSepaDebitMandateId = $retrieveSiResponseDoc.valueOf('/JsonRoot/latest_attempt/payment_method_details/ideal/generated_sepa_debit_mandate') )
#{set}( $setupIntentBankName = $retrieveSiResponseDoc.valueOf('/JsonRoot/latest_attempt/payment_method_details/ideal/bank') )
#{set}( $setupIntentIbanLastFour = $retrieveSiResponseDoc.valueOf('/JsonRoot/latest_attempt/payment_method_details/ideal/iban_last4') )
#{set}( $setupIntentVerifiedAccountHolderName = $retrieveSiResponseDoc.valueOf('/JsonRoot/latest_attempt/payment_method_details/ideal/verified_name') )

#{set}( $threeDS2DataMap = {
'setupIntentId' : $!setupIntentId,
'setupIntentStatus' : $!setupIntentStatus,
'setupIntentCustomerId' : $!setupIntentCustomerId,
'setupIntentGeneratedSepaDebitId' : $!setupIntentGeneratedSepaDebitId,
'setupIntentGeneratedSepaDebitMandateId' : $!setupIntentGeneratedSepaDebitMandateId,
'setupIntentBankName' : $!setupIntentBankName,
'setupIntentIbanLastFour' : $!setupIntentIbanLastFour,
'setupIntentVerifiedAccountHolderName' : $!setupIntentVerifiedAccountHolderName
} )

#{if} ($!StringUtils.equals($!setupIntentStatus, 'succeeded'))
#{set}( $zuoraResponseCode = 'Approved' )
#{set}( $gatewayResponseCode = '200' )
#{set}( $gatewayResponseMessage = 'Approved' )
#{end}

## encode 3DS2 data map
#{set}( $threeDS2ResponseData = $ZUtility.encodeUrlParameters($threeDS2DataMap) )
"
},
{
"in_transaction_log": "true",
"field_name": "ResponseBody",
"field_value_expression": "$!responseBody"
},
{
"in_transaction_log": "true",
"field_name": "ResponseCode",
"field_value_expression": "$!last_status_code"
}
],
"response_fsm_event_expression": "#{if}($StringUtils.equals($!setupIntentStatus, 'succeeded'))Success#{else}Error#{end}"
},
{
"transaction_name": "RetrievePaymentIntent",
"connector_type": "HTTPs",
"transaction_request_fields": [
{
"temporary": true,
"field_name": "_",
"field_value_expression": "
#{if}($StringUtils.isNotEmpty($!threeDs_paymentIntentId))
#{set}( $paymentIntentId = $threeDs_paymentIntentId) )
#{else}
#{set}( $paymentIntentId = 'missing_id') )
#{end}

## The paymentIntent Request Map
#{set}( $paymentIntentRequestMap = {
'expand[]' : 'latest_attempt'
} )

##{set}( $requestBody = $ZUtility.encodeUrlParameters($paymentIntentRequestMap) )
"
},
{
"field_name": "URL",
"field_value_expression": "https://api.stripe.com/v1/payment_intents/$!paymentIntentId"
},
{
"field_name": "METHOD",
"field_value_expression": "GET"
},
{
"field_name": "Authorization",
"field_value_expression": "${Header-Authorization}"
},
{
"field_name": "Content-Type",
"field_value_expression": "${Header-Content-Type}"
},
{
"field_name": "Stripe-Version",
"field_value_expression": "${Header-Stripe-Version-2020}"
},
{
"field_name": "REQUEST_BODY",
"field_value_expression": "${requestBody}"
}
],
"request_to_log": "Request = [];URL=$URL",
"transaction_response_fields": [
{
"field_name": "_",
"field_value_expression": "
## Create response body
#{if} (!$StringUtils.equals($last_status_code, '200'))
#{set}( $responseBody = $last_message_body )
#{else}
#{set}( $responseBody = $last_message_body )
#{end}

#{if} (!$StringUtils.equals($last_status_code, '200'))
#{set}($blockInputs = [$last_message_body, $last_status_code])
#evaluate(${Block-Error-Handler})
#{stop}
#{end}

## Parse Response JSON Document
#{set}( $retrieveSiResponseDoc = $ZUtility.parseJsonDocument($last_message_body) )

#{set}( $paymentIntentId = $retrieveSiResponseDoc.valueOf('/JsonRoot/id') )
#{set}( $paymentIntentStatus = $retrieveSiResponseDoc.valueOf('/JsonRoot/status') )
#{set}( $paymentIntentCustomerId = $retrieveSiResponseDoc.valueOf('/JsonRoot/customer') )
#{set}( $paymentIntentGeneratedSepaDebitId = $retrieveSiResponseDoc.valueOf('/JsonRoot/charges/data/ArrayItem[1]/payment_method_details/ideal/generated_sepa_debit') )
#{set}( $paymentIntentGeneratedSepaDebitMandateId = $retrieveSiResponseDoc.valueOf('/JsonRoot/charges/data/ArrayItem[1]/payment_method_details/ideal/generated_sepa_debit_mandate') )
#{set}( $paymentIntentBankName = $retrieveSiResponseDoc.valueOf('/JsonRoot/charges/data/ArrayItem[1]/payment_method_details/ideal/bank') )
#{set}( $paymentIntentIbanLastFour = $retrieveSiResponseDoc.valueOf('/JsonRoot/charges/data/ArrayItem[1]/payment_method_details/ideal/iban_last4') )
#{set}( $paymentIntentVerifiedAccountHolderName = $retrieveSiResponseDoc.valueOf('/JsonRoot/charges/data/ArrayItem[1]/payment_method_details/ideal/verified_name') )

#{set}( $threeDS2DataMap = {
'paymentIntentId' : $!paymentIntentId,
'paymentIntentStatus' : $!paymentIntentStatus,
'paymentIntentCustomerId' : $!paymentIntentCustomerId,
'paymentIntentGeneratedSepaDebitId' : $!paymentIntentGeneratedSepaDebitId,
'paymentIntentGeneratedSepaDebitMandateId' : $!paymentIntentGeneratedSepaDebitMandateId,
'paymentIntentBankName' : $!paymentIntentBankName,
'paymentIntentIbanLastFour' : $!paymentIntentIbanLastFour,
'paymentIntentVerifiedAccountHolderName' : $!paymentIntentVerifiedAccountHolderName
} )

#{if} ($!StringUtils.equals($paymentIntentStatus, 'succeeded'))
#{set}( $zuoraResponseCode = 'Approved' )
#{set}( $gatewayResponseCode = '200' )
#{set}( $gatewayResponseMessage = 'Approved' )
#{end}

## encode 3DS2 data map
#{set}( $threeDS2ResponseData = $ZUtility.encodeUrlParameters($threeDS2DataMap) )
"
},
{
"in_transaction_log": "true",
"field_name": "ResponseBody",
"field_value_expression": "$!responseBody"
},
{
"in_transaction_log": "true",
"field_name": "ResponseCode",
"field_value_expression": "$!last_status_code"
}
],
"response_fsm_event_expression": "#{if}($StringUtils.equals($paymentIntentStatus, 'succeeded'))Success#{else}Error#{end}"
}
],
"operation_states": [
{
"start_state": "BEGIN",
"transaction_event": "",
"end_state": "CheckOnSessionPayment"
},
{
"start_state": "CheckOnSessionPayment",
"transaction_event": "Success",
"end_state": "RetrievePaymentIntent"
},
{
"start_state": "CheckOnSessionPayment",
"transaction_event": "Error",
"end_state": "RetrieveSetupIntent"
}
],
"operation_response_fields": [
{
"field_name": "ZuoraResponseCode",
"field_value_expression": "$!zuoraResponseCode"
},
{
"field_name": "GatewayResponseCode",
"field_value_expression": "$!gatewayResponseCode"
},
{
"field_name": "GatewayResponseMessage",
"field_value_expression": "$!gatewayResponseMessage"
},
{
"field_name": "GatewayReferenceId",
"field_value_expression": "#{if}($StringUtils.isNotBlank($!$!setupIntentId))$!setupIntentId#{else}$!paymentIntentId#{end}"
},
{
"field_name": "ThreeDS2ResponseData",
"field_value_expression": "$!threeDS2ResponseData"
}
]
},
{
"payment_method_type": "Ideal",
"operation_type": "ThreeDS2EnrollCheck",
"transactions": [
{
"transaction_name": "CheckOnSessionPayment",
"connector_type": "Test",
"transaction_request_fields": [],
"request_to_log": "Is on-session iDEAL payment? = $!threeDs_doPayment",
"transaction_response_fields": [],
"response_fsm_event_expression": "#{if}($StringUtils.equalsIgnoreCase($!threeDs_doPayment, 'true'))Success#{else}Error#{end}"
},
{
"transaction_name": "ShouldStorePaymentMethod",
"connector_type": "Test",
"transaction_request_fields": [],
"request_to_log": "Should store iDEAL payment method? = $!threeDs_storePaymentMethod",
"transaction_response_fields": [],
"response_fsm_event_expression": "#{if}($StringUtils.equalsIgnoreCase($!threeDs_storePaymentMethod, 'true'))Success#{else}Error#{end}"
},
{
"transaction_name": "CreateAutoCustomer",
"connector_type": "HTTPs",
"transaction_request_fields": [
{
"temporary": true,
"field_name": "_",
"field_value_expression": "
## The Create Customer Request Map
#{set}( $createCustomerRequestMap = {
'description' : \"Auto customer by on session payment by $StringUtils.join($!TenantId, '_', $!AccountNumber)\"
} )

#{set}( $requestBody = $ZUtility.encodeUrlParameters($createCustomerRequestMap) )
"
},
{
"field_name": "URL",
"field_value_expression": "https://api.stripe.com/v1/customers"
},
{
"field_name": "METHOD",
"field_value_expression": "POST"
},
{
"field_name": "Authorization",
"field_value_expression": "${Header-Authorization}"
},
{
"field_name": "Content-Type",
"field_value_expression": "${Header-Content-Type}"
},
{
"field_name": "Stripe-Version",
"field_value_expression": "${Header-Stripe-Version-2020}"
},
{
"field_name": "REQUEST_BODY",
"field_value_expression": "${requestBody}"
}
],
"request_to_log": "Request = [${requestBody}; URL = $!URL]",
"transaction_response_fields": [
{
"field_name": "_",
"field_value_expression": "
## Create response body
#{if} (!$StringUtils.equals($last_status_code, '200'))
#{set}( $responseBody = $last_message_body )
#{else}
#{set}( $responseBody = $last_message_body )
#{end}

#{if} (!$StringUtils.equals($last_status_code, '200'))
#{set}($blockInputs = [$last_message_body, $last_status_code])
#evaluate(${Block-Error-Handler})
#{stop}
#{else}
#{set}( $gatewayResponseCode = '200' )
#{set}( $gatewayResponseMessage = 'Approved' )
#{end}

## Parse Response JSON Document
#{set}( $createPiResponseDoc = $ZUtility.parseJsonDocument($!last_message_body) )

#{set}( $gatewayCustomerId = $createPiResponseDoc.valueOf('/JsonRoot/id') )
"
},
{
"in_transaction_log": "true",
"field_name": "ResponseBody",
"field_value_expression": "$!responseBody"
},
{
"in_transaction_log": "true",
"field_name": "ResponseCode",
"field_value_expression": "$!last_status_code"
}
],
"response_fsm_event_expression": "#{if}($StringUtils.isNotBlank($gatewayCustomerId))Success#{else}Error#{end}"
},
{
"transaction_name": "CreateSetupIntent",
"connector_type": "HTTPs",
"transaction_request_fields": [
{
"temporary": true,
"field_name": "_",
"field_value_expression": "
## The SetupIntent Request Map
#{set}( $setupIntentRequestMap = {
'payment_method_types[]': 'ideal',
'customer': $!gatewayCustomerId,
'payment_method': $!threeDs_idealPaymentMethodId,
'return_url': $!threeDs_idealReturnUrl,
'confirm' : 'true'
} )

## construct mandate params
#evaluate(${Block-Construct-Ideal-Mandate-Data-Map})
$setupIntentRequestMap.putAll($macroIdealMandateReturn)

#{set}( $requestBody = $ZUtility.encodeUrlParameters($!setupIntentRequestMap) )

#{set}($blockInputs = [$setupIntentRequestMap])
#evaluate(${Block-Create-Mask-Request-Map})
#{set}( $maskedRequestBody = $ZUtility.encodeUrlParameters($macroReturn) )
"
},
{
"field_name": "URL",
"field_value_expression": "https://api.stripe.com/v1/setup_intents"
},
{
"field_name": "METHOD",
"field_value_expression": "POST"
},
{
"field_name": "Authorization",
"field_value_expression": "${Header-Authorization}"
},
{
"field_name": "Content-Type",
"field_value_expression": "${Header-Content-Type}"
},
{
"field_name": "Stripe-Version",
"field_value_expression": "${Header-Stripe-Version-2020}"
},
{
"field_name": "REQUEST_BODY",
"field_value_expression": "${requestBody}"
}
],
"request_to_log": "Request = [${maskedRequestBody}];url = [$!URL]",
"transaction_response_fields": [
{
"field_name": "_",
"field_value_expression": "
## Create response body
#{if} (!$StringUtils.equals($!last_status_code, '200'))
#{set}( $responseBody = $!last_message_body )
#{else}
#{set}( $responseBody = $!last_message_body )
#{end}

#{if} (!$StringUtils.equals($last_status_code, '200'))
#{set}($blockInputs = [$last_message_body, $last_status_code])
#evaluate(${Block-Error-Handler})
#{stop}
#{else}
#{set}( $gatewayResponseCode = '200' )
#{set}( $gatewayResponseMessage = 'Approved' )
#{end}

## Parse Response JSON Document
#{set}( $createSiResponseDoc = $ZUtility.parseJsonDocument($last_message_body) )

#{set}( $setupIntentId = $createSiResponseDoc.valueOf('/JsonRoot/id') )
#{set}( $setupIntentClientSecret = $createSiResponseDoc.valueOf('/JsonRoot/client_secret') )
#{set}( $setupIntentStatus = $createSiResponseDoc.valueOf('/JsonRoot/status') )
#{set}( $actionType = $createSiResponseDoc.valueOf('/JsonRoot/next_action/type') )
#{set}( $stripeRedirectUrl = $createSiResponseDoc.valueOf('/JsonRoot/next_action/redirect_to_url/url') )
#{set}( $zuoraReturnUrl = $createSiResponseDoc.valueOf('/JsonRoot/next_action/redirect_to_url/return_url') )

#{if} ($StringUtils.equals($!actionType, 'redirect_to_url'))
#{set}( $zuoraResponseCode = 'Approved' )
#{else}
#{set}( $zuoraResponseCode = 'Failed' )
#{end}

#{set}( $threeDS2DataMap = {
'setupIntentId' : $setupIntentId,
'setupIntentStatus' : $setupIntentStatus,
'clientSecret' : $setupIntentClientSecret,
'actionType': $actionType,
'stripeRedirectUrl': $stripeRedirectUrl,
'zuoraReturnUrl': $zuoraReturnUrl
} )

## encode 3DS2 data map
#{set}( $threeDS2ResponseData = $ZUtility.encodeUrlParameters($threeDS2DataMap) )
"
},
{
"in_transaction_log": "true",
"field_name": "ResponseBody",
"field_value_expression": "$!responseBody"
},
{
"in_transaction_log": "true",
"field_name": "ResponseCode",
"field_value_expression": "$!last_status_code"
}
],
"response_fsm_event_expression": "#{if}($StringUtils.equals($zuoraResponseCode, 'Approved'))Success#{else}Error#{end}"
},
{
"transaction_name": "CreatePaymentIntent",
"connector_type": "HTTPs",
"transaction_request_fields": [
{
"temporary": true,
"field_name": "_",
"field_value_expression": "
## The PaymentIntent Request Map
#{set} ( $paymentIntentRequestMap = {
'payment_method_types[]': 'ideal'
} )

#{set}($blockInputs = [$!threeDs_authorizationAmount, $!threeDs_currency])
#evaluate(${Block-Normalize-Amount})
#{set} ( $paymentIntentRequestMap['amount'] = $macroReturn )
#{set} ( $paymentIntentRequestMap['currency'] = $!threeDs_currency )

#{if}( $StringUtils.isNotBlank($!PaymentDescription) )
#{set}( $paymentIntentRequestMap['description'] = $!PaymentDescription )
#{end}

## construct parameters for storing payment method
#{if} ( $StringUtils.equalsIgnoreCase($!threeDs_storePaymentMethod, 'true') )
#{set}( $paymentIntentRequestMap['customer'] = $!gatewayCustomerId )
#{set}( $paymentIntentRequestMap['setup_future_usage'] = 'off_session' )
#{end}

#{set}( $requestBody = $ZUtility.encodeUrlParameters($paymentIntentRequestMap) )

#{set}($blockInputs = [$paymentIntentRequestMap])
#evaluate(${Block-Create-Mask-Request-Map})
#{set}( $maskedRequestBody = $ZUtility.encodeUrlParameters($macroReturn) )
"
},
{
"field_name": "URL",
"field_value_expression": "https://api.stripe.com/v1/payment_intents"
},
{
"field_name": "METHOD",
"field_value_expression": "POST"
},
{
"field_name": "Authorization",
"field_value_expression": "${Header-Authorization}"
},
{
"field_name": "Content-Type",
"field_value_expression": "${Header-Content-Type}"
},
{
"field_name": "Stripe-Version",
"field_value_expression": "${Header-Stripe-Version-2020}"
},
{
"field_name": "REQUEST_BODY",
"field_value_expression": "${requestBody}"
}
],
"request_to_log": "Request = [${maskedRequestBody}; URL = $!URL]",
"transaction_response_fields": [
{
"field_name": "_",
"field_value_expression": "
## Create response body
#{if} (!$StringUtils.equals($last_status_code, '200'))
#{set}( $responseBody = $last_message_body )
#{else}
#{set}( $responseBody = $last_message_body )
#{end}

#{if} (!$StringUtils.equals($last_status_code, '200'))
#{set}($blockInputs = [$last_message_body, $last_status_code])
#evaluate(${Block-Error-Handler})
#{stop}
#{end}

## Parse Response JSON Document
#{set}( $createPiResponseDoc = $ZUtility.parseJsonDocument($last_message_body) )

#{set}( $paymentIntentId = $createPiResponseDoc.valueOf('/JsonRoot/id') )
#{set}( $paymentIntentStatus = $createPiResponseDoc.valueOf('/JsonRoot/status') )
#{set}( $clientSecret = $createPiResponseDoc.valueOf('/JsonRoot/client_secret') )

#{set}( $threeDS2DataMap = {
'paymentIntentId' : $paymentIntentId,
'paymentIntentStatus' : $paymentIntentStatus,
'clientSecret': $clientSecret
} )

## encode 3DS2 data map
#{set}( $threeDS2ResponseData = $ZUtility.encodeUrlParameters($threeDS2DataMap) )
#{if} ($StringUtils.equals($paymentIntentStatus, 'requires_payment_method'))
#{set}( $zuoraResponseCode = 'Approved' )
#{else}
#{set}( $zuoraResponseCode = 'Failed' )
#{end}
"
},
{
"in_transaction_log": "true",
"field_name": "ResponseBody",
"field_value_expression": "$!responseBody"
},
{
"in_transaction_log": "true",
"field_name": "ResponseCode",
"field_value_expression": "$!last_status_code"
}
],
"response_fsm_event_expression": "#{if}($StringUtils.equals($zuoraResponseCode, 'Approved'))Success#{else}Error#{end}"
},
{
"transaction_name": "ConfirmPaymentIntent",
"connector_type": "HTTPs",
"transaction_request_fields": [
{
"temporary": true,
"field_name": "_",
"field_value_expression": "
## The PaymentIntent Request Map
#{set} ( $paymentIntentRequestMap = {
'payment_method': $!threeDs_idealPaymentMethodId,
'return_url': $!threeDs_idealReturnUrl
} )

## construct mandate params
#{if} ( $StringUtils.equalsIgnoreCase($!threeDs_storePaymentMethod, 'true') )
#evaluate(${Block-Construct-Ideal-Mandate-Data-Map})
$paymentIntentRequestMap.putAll($macroIdealMandateReturn)
#{end}

#{set}( $requestBody = $ZUtility.encodeUrlParameters($paymentIntentRequestMap) )

#{set}($blockInputs = [$paymentIntentRequestMap])
#evaluate(${Block-Create-Mask-Request-Map})
#{set}( $maskedRequestBody = $ZUtility.encodeUrlParameters($macroReturn) )
"
},
{
"field_name": "URL",
"field_value_expression": "https://api.stripe.com/v1/payment_intents/$!paymentIntentId/confirm"
},
{
"field_name": "METHOD",
"field_value_expression": "POST"
},
{
"field_name": "Authorization",
"field_value_expression": "${Header-Authorization}"
},
{
"field_name": "Content-Type",
"field_value_expression": "${Header-Content-Type}"
},
{
"field_name": "Stripe-Version",
"field_value_expression": "${Header-Stripe-Version-2020}"
},
{
"field_name": "REQUEST_BODY",
"field_value_expression": "${requestBody}"
}
],
"request_to_log": "Request = [${maskedRequestBody}; URL = $!URL]",
"transaction_response_fields": [
{
"field_name": "_",
"field_value_expression": "
## Create response body
#{if} (!$StringUtils.equals($last_status_code, '200'))
#{set}( $responseBody = $last_message_body )
#{else}
#{set}( $responseBody = $last_message_body )
#{end}

#{if} (!$StringUtils.equals($last_status_code, '200'))
#{set}($blockInputs = [$last_message_body, $last_status_code])
#evaluate(${Block-Error-Handler})
#{stop}
#{else}
#{set}( $gatewayResponseCode = '200' )
#{set}( $gatewayResponseMessage = 'Approved' )
#{end}

## Parse Response JSON Document
#{set}( $createPiResponseDoc = $ZUtility.parseJsonDocument($last_message_body) )

#{set}( $paymentIntentId = $createPiResponseDoc.valueOf('/JsonRoot/id') )
#{set}( $paymentIntentClientSecret = $createPiResponseDoc.valueOf('/JsonRoot/client_secret') )
#{set}( $paymentIntentStatus = $createPiResponseDoc.valueOf('/JsonRoot/status') )
#{set}( $actionType = $createPiResponseDoc.valueOf('/JsonRoot/next_action/type') )
#{set}( $stripeRedirectUrl = $createPiResponseDoc.valueOf('/JsonRoot/next_action/redirect_to_url/url') )
#{set}( $zuoraReturnUrl = $createPiResponseDoc.valueOf('/JsonRoot/next_action/redirect_to_url/return_url') )

#{set}( $threeDS2DataMap = {
'paymentIntentId' : $paymentIntentId,
'clientSecret' : $paymentIntentClientSecret,
'paymentIntentStatus' : $paymentIntentStatus,
'actionType': $actionType,
'stripeRedirectUrl': $stripeRedirectUrl,
'zuoraReturnUrl': $zuoraReturnUrl
} )

## encode 3DS2 data map
#{set}( $threeDS2ResponseData = $ZUtility.encodeUrlParameters($threeDS2DataMap) )
#{if} ($StringUtils.equals($!actionType, 'redirect_to_url'))
#{set}( $zuoraResponseCode = 'Approved' )
#{else}
#{set}( $zuoraResponseCode = 'Failed' )
#{end}
"
},
{
"in_transaction_log": "true",
"field_name": "ResponseBody",
"field_value_expression": "$!responseBody"
},
{
"in_transaction_log": "true",
"field_name": "ResponseCode",
"field_value_expression": "$!last_status_code"
}
],
"response_fsm_event_expression": "#{if}($StringUtils.equals($zuoraResponseCode, 'Approved'))Success#{else}Error#{end}"
}
],
"operation_states": [
{
"start_state": "BEGIN",
"transaction_event": "",
"end_state": "ShouldStorePaymentMethod"
},
{
"start_state": "ShouldStorePaymentMethod",
"transaction_event": "Success",
"end_state": "CreateAutoCustomer"
},
{
"start_state": "ShouldStorePaymentMethod",
"transaction_event": "Error",
"end_state": "CreatePaymentIntent"
},
{
"start_state": "CreateAutoCustomer",
"transaction_event": "Success",
"end_state": "CheckOnSessionPayment"
},
{
"start_state": "CheckOnSessionPayment",
"transaction_event": "Success",
"end_state": "CreatePaymentIntent"
},
{
"start_state": "CreatePaymentIntent",
"transaction_event": "Success",
"end_state": "ConfirmPaymentIntent"
},
{
"start_state": "CheckOnSessionPayment",
"transaction_event": "Error",
"end_state": "CreateSetupIntent"
}
],
"operation_response_fields": [
{
"field_name": "ZuoraResponseCode",
"field_value_expression": "$!zuoraResponseCode"
},
{
"field_name": "GatewayResponseCode",
"field_value_expression": "$!gatewayResponseCode"
},
{
"field_name": "GatewayResponseMessage",
"field_value_expression": "$!gatewayResponseMessage"
},
{
"field_name": "ThreeDS2ResponseData",
"field_value_expression": "$!threeDS2ResponseData"
}
]
}
]
}
