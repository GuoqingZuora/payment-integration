{
  "gateway_type": "CyberSource",
  "gateway_version": "2",
  "display_name": "CyberSource v2",
  "gateway_revision": 1,
  "status": "Published",
  "request_language": "Raw",
  "card_types": [
    "Visa",
    "MasterCard",
    "AmericanExpress",
    "Discover",
    "Diners",
    "JCB"
  ],
  "idempotency_support": {
    "key_spec": "UUIDv4",
    "retry_window_opened_at": 300,
    "retry_window_closed_at": 144000
  },
  "mit_support_list": [
    {
      "payment_method_type": "CreditCard",
      "brand": "Visa",
      "profile_types": ["Recurring"]
    },
    {
      "payment_method_type": "CreditCard",
      "brand": "Mastercard",
      "profile_types": ["Recurring"]
    },
    {
      "payment_method_type": "CreditCard",
      "brand": "AmericanExpress",
      "profile_types": ["Recurring"]
    },
    {
      "payment_method_type": "CreditCard",
      "brand": "Discover",
      "profile_types": ["Recurring"]
    },
    {
      "payment_method_type": "CreditCard",
      "brand": "Diners",
      "profile_types": ["Recurring"]
    },
    {
      "payment_method_type": "CreditCard",
      "brand": "JCB",
      "profile_types": ["Recurring"]
    }
  ],
  "moto_support_list": [
    {
      "payment_method_type": "CreditCard",
      "allow_create_scp": true
    }
  ],
  "global_fields": [
    {
      "field_name": "Header-Content-Type",
      "field_value_expression": "application/json"
    },
    {
      "field_name": "Header-v-c-merchant-id",
      "field_value_expression": "$!organizationId"
    },
    {
      "field_name": "Header-v-c-date",
      "field_value_expression": "$!ZUtility.getTime(\"0\", \"EEE, dd MMM yyyy HH:mm:ss z\", \"GMT\")"
    },
    {
      "field_name": "Header-Host",
      "field_value_expression": "#{if}($IsTest)apitest.cybersource.com#{else}api.cybersource.com#{end}"
    },
    {
      "field_name": "Header-digest",
      "field_value_expression": "$!ZUtility.getDigest($!requestBody, \"SHA-256\")"
    },
    {
      "field_name": "Header-signature",
      "field_value_expression": "
      #[[
      ## Construct signature string according to CyberSource requirements
      #{set}($algorithm = 'HmacSHA256')
      #{set}($headers = 'host v-c-date request-target digest v-c-merchant-id')
      #{set}($keyId = $!SharedKey)
      #{set}($signature = $ZUtility.generateHmacSignature($!sharedsecret, $signatureString, $algorithm))
      
      ## Build Authorization header value
      Signature keyId=\"${keyId}\", algorithm=\"${algorithm}\", headers=\"${headers}\", signature=\"${signature}\"
      ]]#
      "
    },
    {
      "field_name": "Block-Error-Handler",
      "field_value_expression": "
      #[[
      #{set}($inputResponseBody = $blockInputs[0])
      #{set}($inputResponseCode = $blockInputs[1])

      #{set}( $zuoraResponseCode = 'Failed' )
      #{set}( $gatewayResponseCode = $inputResponseCode )

      ## deal with 4xx error
      #{if}($StringUtils.startsWith($inputResponseCode, '4'))
      #{if}($StringUtils.equalsAny($inputResponseCode, '409', '429')
      || ($StringUtils.isNotBlank(${Framework-Idempotent-Retry-Times})
      && $ZUtility.parseStringToInt(${Framework-Idempotent-Retry-Times}) > 0
      && $StringUtils.equals($inputResponseCode, '401'))
      )
      #{set}( $zuoraResponseCode = 'Unknown' )
      #{end}

      #{set}( $errorResponseDoc = $ZUtility.parseJsonDocument($inputResponseBody) )

      ## extract error information
      #{set}( $cyberSourceErrorReason = $errorResponseDoc.valueOf('//reason') )
      #{set}( $cyberSourceErrorMessage = $errorResponseDoc.valueOf('//message') )
      #{set}( $cyberSourceTransactionId = $errorResponseDoc.valueOf('//id') )

      #{set}( $gatewayResponseMessage = \"[$cyberSourceErrorReason] $cyberSourceErrorMessage\" )
      #{set}( $gatewayReferenceId = $cyberSourceTransactionId )
      ## deal with 5xx error
      #{elseif}($inputResponseCode && ($inputResponseCode.length() == 3) && $StringUtils.startsWith($inputResponseCode, '5'))
      #{set}( $zuoraResponseCode = 'Unknown' )
      #{else}
      #{set}( $gatewayResponseMessage = 'Something is wrong on CyberSource end.' )
      #{end}
    ]]#
  "
    },
    {
      "field_name": "Block-Construct-Card-PaymentInformation",
      "field_value_expression": "
      #[[
      #{set}( $macroReturn = {
      'paymentInformation': {
        'card': {
          'number': $!CreditCardNumber,
          'expirationMonth': $!CreditCardExpirationMonth,
          'expirationYear': $!CreditCardExpirationYear
        }
      }
      } )

      ## set card security code
      #{if}($StringUtils.isNotBlank($!CreditCardSecurityCode))
      #{set}( $macroReturn['paymentInformation']['card']['securityCode'] = $!CreditCardSecurityCode )
      #{end}
      ]]#
      "
    },
    {
      "field_name": "Block-Construct-OrderInformation",
      "field_value_expression": "
      #[[
      #{set}( $macroReturn = {
      'orderInformation': {
        'amountDetails': {
          'totalAmount': $!DefaultAuthAmount,
          'currency': $!Currency
        }
      }
      } )

      ## set billing information if available
      #{if}($StringUtils.isNotBlank($!CreditCardHolderName) || $StringUtils.isNotBlank($!FirstName) || $StringUtils.isNotBlank($!LastName))
      #{set}( $macroReturn['orderInformation']['billTo'] = {} )
      
      #{if}($StringUtils.isNotBlank($!FirstName))
      #{set}( $macroReturn['orderInformation']['billTo']['firstName'] = $!FirstName )
      #{end}
      
      #{if}($StringUtils.isNotBlank($!LastName))
      #{set}( $macroReturn['orderInformation']['billTo']['lastName'] = $!LastName )
      #{end}
      
      #{if}($StringUtils.isNotBlank($!CreditCardAddress1))
      #{set}( $macroReturn['orderInformation']['billTo']['address1'] = $!CreditCardAddress1 )
      #{end}
      
      #{if}($StringUtils.isNotBlank($!CreditCardCity))
      #{set}( $macroReturn['orderInformation']['billTo']['locality'] = $!CreditCardCity )
      #{end}
      
      #{if}($StringUtils.isNotBlank($!CreditCardState))
      #{set}( $macroReturn['orderInformation']['billTo']['administrativeArea'] = $!CreditCardState )
      #{end}
      
      #{if}($StringUtils.isNotBlank($!CreditCardPostalCode))
      #{set}( $macroReturn['orderInformation']['billTo']['postalCode'] = $!CreditCardPostalCode )
      #{end}
      
      #{if}($StringUtils.isNotBlank($!CreditCardCountry))
      #{set}( $macroReturn['orderInformation']['billTo']['country'] = $!CreditCardCountry )
      #{end}
      
      #{if}($StringUtils.isNotBlank($!Email))
      #{set}( $macroReturn['orderInformation']['billTo']['email'] = $!Email )
      #{end}
      #{end}
      ]]#
      "
    },
    {
      "field_name": "Block-Construct-ClientReferenceInformation",
      "field_value_expression": "
      #[[
      #{set}( $macroReturn = {
      'clientReferenceInformation': {
        'code': $ZUtility.getUUID(32)
      }
      } )

      ## set payment number as reconciliation ID
      #{if}($StringUtils.isNotBlank($!PaymentNumber))
      #{set}( $macroReturn['clientReferenceInformation']['reconciliationId'] = $!PaymentNumber )
      #{end}

      ## set transaction ID
      #{if}($StringUtils.isNotBlank($!TransactionId))
      #{set}( $macroReturn['clientReferenceInformation']['transactionId'] = $!TransactionId )
      #{end}
      ]]#
      "
    },
    {
      "field_name": "Block-Construct-ProcessingInformation",
      "field_value_expression": "
      #[[
      #{set}( $macroReturn = {
      'processingInformation': {
        'capture': false,
        'commerceIndicator': 'internet'
      }
      } )

      ## set processor ID if available
      #{if}($StringUtils.isNotBlank($!ProcessorId))
      #{set}( $macroReturn['processingInformation']['processorId'] = $!ProcessorId )
      #{end}
      ]]#
      "
    }
  ],
  "operations": [
    {
      "payment_method_type": "CreditCard",
      "operation_type": "Payment",
      "transactions": [
        {
          "transaction_name": "ProcessPayment",
          "connector_type": "HTTPs",
          "transaction_request_fields": [
            {
              "temporary": true,
              "field_name": "_",
              "field_value_expression": "
              ## construct payment request
              #{set}( $paymentRequestMap = {} )

              ## add client reference information
              #evaluate(${Block-Construct-ClientReferenceInformation})
              $paymentRequestMap.putAll($macroReturn)

              ## add payment information
              #evaluate(${Block-Construct-Card-PaymentInformation})
              $paymentRequestMap.putAll($macroReturn)

              ## add order information
              #evaluate(${Block-Construct-OrderInformation})
              $paymentRequestMap.putAll($macroReturn)

              ## add processing information
              #evaluate(${Block-Construct-ProcessingInformation})
              $paymentRequestMap.putAll($macroReturn)

              #{set}( $requestBody = $ZUtility.mapToJSON($paymentRequestMap) )
              "
            },
            {
              "field_name": "URL",
              "field_value_expression": "#{if}($IsTest)https://apitest.cybersource.com#{else}https://api.cybersource.com#{end}/pts/v2/payments"
            },
            {
              "field_name": "METHOD",
              "field_value_expression": "POST"
            },
            {
              "field_name": "Content-Type",
              "field_value_expression": "${Header-Content-Type}"
            },
            {
              "field_name": "signature",
              "field_value_expression": "${Header-signature}"
            },
            {
              "field_name": "v-c-merchant-id",
              "field_value_expression": "${Header-v-c-merchant-id}"
            },
            {
              "field_name": "host",
              "field_value_expression": "${Header-Host}"
            },
            {
              "field_name": "digest",
              "field_value_expression": "SHA-256=${Header-digest}"
            },
            {
              "field_name": "v-c-date",
              "field_value_expression": "${Header-v-c-date}"
            },
            {
              "field_name": "REQUEST_BODY",
              "field_value_expression": "${requestBody}"
            }
          ],
          "request_to_log": "Request = [${requestBody}; URL = $!URL]",
          "transaction_response_fields": [
            {
              "field_name": "_",
              "field_value_expression": "
              ## Create response body
              #{if} (!$StringUtils.equals($last_status_code, '201'))
              #{set}( $responseBody = $last_message_body )
              #{else}
              #{set}( $responseBody = $last_message_body )
              #{end}

              #{if} (!$StringUtils.equals($last_status_code, '201'))
              #{set}($blockInputs = [$last_message_body, $last_status_code])
              #evaluate(${Block-Error-Handler})
              #{stop}
              #{else}
              #{set}( $gatewayResponseCode = '201' )
              #{set}( $gatewayResponseMessage = 'Approved' )
              #{end}

              ## Parse Response JSON Document
              #{set}( $paymentResponseDoc = $ZUtility.parseJsonDocument($last_message_body) )

              #{set}( $transactionId = $paymentResponseDoc.valueOf('/JsonRoot/id') )
              #{set}( $transactionStatus = $paymentResponseDoc.valueOf('/JsonRoot/status') )
              #{set}( $processorTransactionId = $paymentResponseDoc.valueOf('/JsonRoot/processorInformation/transactionId') )
              #{set}( $authorizationCode = $paymentResponseDoc.valueOf('/JsonRoot/processorInformation/authorizationCode') )
              #{set}( $networkTransactionId = $paymentResponseDoc.valueOf('/JsonRoot/processorInformation/networkTransactionId') )

              #{if} ($StringUtils.equals($transactionStatus, 'AUTHORIZED'))
              #{set}( $zuoraResponseCode = 'Approved' )
              #{else}
              #{set}( $zuoraResponseCode = 'Failed' )
              #{end}

              #{set}( $gatewayReferenceId = $transactionId )
              "
            },
            {
              "in_transaction_log": "true",
              "field_name": "ResponseBody",
              "field_value_expression": "$!responseBody"
            },
            {
              "in_transaction_log": "true",
              "field_name": "ResponseCode",
              "field_value_expression": "$!last_status_code"
            }
          ],
          "response_fsm_event_expression": "#{if}($StringUtils.equals($zuoraResponseCode, 'Approved'))Success#{else}Error#{end}"
        }
      ],
      "operation_states": [
        {
          "start_state": "BEGIN",
          "transaction_event": "",
          "end_state": "ProcessPayment"
        },
        {
          "start_state": "ProcessPayment",
          "transaction_event": "Success",
          "end_state": "END"
        },
        {
          "start_state": "ProcessPayment",
          "transaction_event": "Error",
          "end_state": "END"
        }
      ],
      "operation_response_fields": [
        {
          "field_name": "ZuoraResponseCode",
          "field_value_expression": "$!zuoraResponseCode"
        },
        {
          "field_name": "GatewayResponseCode",
          "field_value_expression": "$!gatewayResponseCode"
        },
        {
          "field_name": "GatewayResponseMessage",
          "field_value_expression": "$!gatewayResponseMessage"
        },
        {
          "field_name": "GatewayReferenceId",
          "field_value_expression": "$!gatewayReferenceId"
        },
        {
          "field_name": "MITReceivedTXID",
          "field_value_expression": "$!networkTransactionId"
        }
      ]
    },
    {
      "payment_method_type": "CreditCard",
      "operation_type": "Validate",
      "transactions": [
        {
          "transaction_name": "checkAmountForValidation",
          "transaction_type": "InternalProcessing",
          "connector_type": "Test",
          "transaction_request_fields": [
            {
              "temporary": true,
              "field_name": "isZeroAmount",
              "field_value_expression": "#{if}($StringUtils.equals($!DefaultAuthAmount, '0') || $StringUtils.equals($!DefaultAuthAmount, '0.00'))true#{else}false#{end}"
            }
          ],
          "request_to_log": "Check if amount is zero for validation: Amount = $!DefaultAuthAmount",
          "transaction_response_fields": [],
          "response_fsm_event_expression": "#{if}($StringUtils.equals($isZeroAmount, 'true'))Success#{else}Error#{end}"
        },
        {
          "transaction_name": "ProcessZeroAmountValidation",
          "connector_type": "HTTPs",
          "transaction_request_fields": [
            {
              "temporary": true,
              "field_name": "_",
              "field_value_expression": "
              ## construct validation request with zero amount
              #{set}( $validationRequestMap = {} )

              ## add client reference information
              #evaluate(${Block-Construct-ClientReferenceInformation})
              $validationRequestMap.putAll($macroReturn)

              ## add payment information
              #evaluate(${Block-Construct-Card-PaymentInformation})
              $validationRequestMap.putAll($macroReturn)

              ## add order information with zero amount
              #{set}( $macroReturn = {
              'orderInformation': {
                'amountDetails': {
                  'totalAmount': $!DefaultAuthAmount,
                  'currency': $!Currency
                }
              }
              } )

              ## set billing information if available
              #{if}($StringUtils.isNotBlank($!CreditCardHolderName) || $StringUtils.isNotBlank($!FirstName) || $StringUtils.isNotBlank($!LastName))
              #{set}( $macroReturn['orderInformation']['billTo'] = {} )
              
              #{if}($StringUtils.isNotBlank($!FirstName))
              #{set}( $macroReturn['orderInformation']['billTo']['firstName'] = $!FirstName )
              #{end}
              
              #{if}($StringUtils.isNotBlank($!LastName))
              #{set}( $macroReturn['orderInformation']['billTo']['lastName'] = $!LastName )
              #{end}
              
              #{if}($StringUtils.isNotBlank($!CreditCardAddress1))
              #{set}( $macroReturn['orderInformation']['billTo']['address1'] = $!CreditCardAddress1 )
              #{end}
              
              #{if}($StringUtils.isNotBlank($!CreditCardCity))
              #{set}( $macroReturn['orderInformation']['billTo']['locality'] = $!CreditCardCity )
              #{end}
              
              #{if}($StringUtils.isNotBlank($!CreditCardState))
              #{set}( $macroReturn['orderInformation']['billTo']['administrativeArea'] = $!CreditCardState )
              #{end}
              
              #{if}($StringUtils.isNotBlank($!CreditCardPostalCode))
              #{set}( $macroReturn['orderInformation']['billTo']['postalCode'] = $!CreditCardPostalCode )
              #{end}
              
              #{if}($StringUtils.isNotBlank($!CreditCardCountry))
              #{set}( $macroReturn['orderInformation']['billTo']['country'] = $!CreditCardCountry )
              #{end}
              
              #{if}($StringUtils.isNotBlank($!Email))
              #{set}( $macroReturn['orderInformation']['billTo']['email'] = $!Email )
              #{end}
              #{end}

              $validationRequestMap.putAll($macroReturn)

              ## add processing information
              #evaluate(${Block-Construct-ProcessingInformation})
              $validationRequestMap.putAll($macroReturn)

              ## override capture setting for validation - authorize only, do not capture
              #{if}(!$validationRequestMap.containsKey('processingInformation'))
              #{set}( $validationRequestMap['processingInformation'] = {} )
              #{end}
              #{set}( $validationRequestMap['processingInformation']['capture'] = false )

              #{set}( $requestBody = $ZUtility.mapToJSON($validationRequestMap) )
              "
            },
            {
              "field_name": "URL",
              "field_value_expression": "#{if}($IsTest)https://apitest.cybersource.com#{else}https://api.cybersource.com#{end}/pts/v2/payments"
            },
            {
              "field_name": "METHOD",
              "field_value_expression": "POST"
            },
            {
              "field_name": "Content-Type",
              "field_value_expression": "${Header-Content-Type}"
            },
            {
              "field_name": "signature",
              "field_value_expression": "${Header-signature}"
            },
            {
              "field_name": "v-c-merchant-id",
              "field_value_expression": "${Header-v-c-merchant-id}"
            },
            {
              "field_name": "host",
              "field_value_expression": "${Header-Host}"
            },
            {
              "field_name": "digest",
              "field_value_expression": "SHA-256=${Header-digest}"
            },
            {
              "field_name": "v-c-date",
              "field_value_expression": "${Header-v-c-date}"
            },
            {
              "field_name": "REQUEST_BODY",
              "field_value_expression": "${requestBody}"
            }
          ],
          "request_to_log": "Request = [${requestBody}; URL = $!URL]",
          "transaction_response_fields": [
            {
              "field_name": "_",
              "field_value_expression": "
              ## Create response body
              #{if} (!$StringUtils.equals($last_status_code, '201'))
              #{set}( $responseBody = $last_message_body )
              #{else}
              #{set}( $responseBody = $last_message_body )
              #{end}

              #{if} (!$StringUtils.equals($last_status_code, '201'))
              #{set}($blockInputs = [$last_message_body, $last_status_code])
              #evaluate(${Block-Error-Handler})
              #{stop}
              #{else}
              #{set}( $gatewayResponseCode = '201' )
              #{set}( $gatewayResponseMessage = 'Validation Approved' )
              #{end}

              ## Parse Response JSON Document
              #{set}( $validationResponseDoc = $ZUtility.parseJsonDocument($last_message_body) )

              #{set}( $transactionId = $validationResponseDoc.valueOf('/JsonRoot/id') )
              #{set}( $transactionStatus = $validationResponseDoc.valueOf('/JsonRoot/status') )
              #{set}( $processorTransactionId = $validationResponseDoc.valueOf('/JsonRoot/processorInformation/transactionId') )
              #{set}( $authorizationCode = $validationResponseDoc.valueOf('/JsonRoot/processorInformation/authorizationCode') )
              #{set}( $networkTransactionId = $validationResponseDoc.valueOf('/JsonRoot/processorInformation/networkTransactionId') )

              #{if} ($StringUtils.equals($transactionStatus, 'AUTHORIZED'))
              #{set}( $zuoraResponseCode = 'Approved' )
              #{else}
              #{set}( $zuoraResponseCode = 'Failed' )
              #{end}

              #{set}( $gatewayReferenceId = $transactionId )
              "
            },
            {
              "in_transaction_log": "true",
              "field_name": "ResponseBody",
              "field_value_expression": "$!responseBody"
            },
            {
              "in_transaction_log": "true",
              "field_name": "ResponseCode",
              "field_value_expression": "$!last_status_code"
            }
          ],
          "response_fsm_event_expression": "#{if}($StringUtils.equals($zuoraResponseCode, 'Approved'))Success#{else}Error#{end}"
        },
        {
          "transaction_name": "ProcessNonZeroAmountAuth",
          "connector_type": "HTTPs",
          "transaction_request_fields": [
            {
              "temporary": true,
              "field_name": "_",
              "field_value_expression": "
              ## construct payment request with actual amount
              #{set}( $paymentRequestMap = {} )

              ## add client reference information
              #evaluate(${Block-Construct-ClientReferenceInformation})
              $paymentRequestMap.putAll($macroReturn)

              ## add payment information
              #evaluate(${Block-Construct-Card-PaymentInformation})
              $paymentRequestMap.putAll($macroReturn)

              ## add order information
              #evaluate(${Block-Construct-OrderInformation})
              $paymentRequestMap.putAll($macroReturn)

              ## add processing information
              #evaluate(${Block-Construct-ProcessingInformation})
              $paymentRequestMap.putAll($macroReturn)

              ## override capture setting for validation - authorize only, do not capture
              #{if}(!$paymentRequestMap.containsKey('processingInformation'))
              #{set}( $paymentRequestMap['processingInformation'] = {} )
              #{end}
              #{set}( $paymentRequestMap['processingInformation']['capture'] = false )

              #{set}( $requestBody = $ZUtility.mapToJSON($paymentRequestMap) )
              "
            },
            {
              "field_name": "URL",
              "field_value_expression": "#{if}($IsTest)https://apitest.cybersource.com#{else}https://api.cybersource.com#{end}/pts/v2/payments"
            },
            {
              "field_name": "METHOD",
              "field_value_expression": "POST"
            },
            {
              "field_name": "Content-Type",
              "field_value_expression": "${Header-Content-Type}"
            },
            {
              "field_name": "signature",
              "field_value_expression": "${Header-signature}"
            },
            {
              "field_name": "v-c-merchant-id",
              "field_value_expression": "${Header-v-c-merchant-id}"
            },
            {
              "field_name": "host",
              "field_value_expression": "${Header-Host}"
            },
            {
              "field_name": "digest",
              "field_value_expression": "SHA-256=${Header-digest}"
            },
            {
              "field_name": "v-c-date",
              "field_value_expression": "${Header-v-c-date}"
            },
            {
              "field_name": "REQUEST_BODY",
              "field_value_expression": "${requestBody}"
            }
          ],
          "request_to_log": "Request = [${requestBody}; URL = $!URL]",
          "transaction_response_fields": [
            {
              "field_name": "_",
              "field_value_expression": "
              ## Create response body
              #{if} (!$StringUtils.equals($last_status_code, '201'))
              #{set}( $responseBody = $last_message_body )
              #{else}
              #{set}( $responseBody = $last_message_body )
              #{end}

              #{if} (!$StringUtils.equals($last_status_code, '201'))
              #{set}($blockInputs = [$last_message_body, $last_status_code])
              #evaluate(${Block-Error-Handler})
              #{stop}
              #{else}
              #{set}( $gatewayResponseCode = '201' )
              #{set}( $gatewayResponseMessage = 'Authorization Approved' )
              #{end}

              ## Parse Response JSON Document
              #{set}( $authResponseDoc = $ZUtility.parseJsonDocument($last_message_body) )

              #{set}( $authTransactionId = $authResponseDoc.valueOf('/JsonRoot/id') )
              #{set}( $transactionStatus = $authResponseDoc.valueOf('/JsonRoot/status') )
              #{set}( $processorTransactionId = $authResponseDoc.valueOf('/JsonRoot/processorInformation/transactionId') )
              #{set}( $authorizationCode = $authResponseDoc.valueOf('/JsonRoot/processorInformation/authorizationCode') )
              #{set}( $networkTransactionId = $authResponseDoc.valueOf('/JsonRoot/processorInformation/networkTransactionId') )

              #{if} ($StringUtils.equals($transactionStatus, 'AUTHORIZED'))
              #{set}( $zuoraResponseCode = 'Approved' )
              #{else}
              #{set}( $zuoraResponseCode = 'Failed' )
              #{end}

              #{set}( $gatewayReferenceId = $authTransactionId )
              "
            },
            {
              "in_transaction_log": "true",
              "field_name": "ResponseBody",
              "field_value_expression": "$!responseBody"
            },
            {
              "in_transaction_log": "true",
              "field_name": "ResponseCode",
              "field_value_expression": "$!last_status_code"
            }
          ],
          "response_fsm_event_expression": "#{if}($StringUtils.equals($zuoraResponseCode, 'Approved'))Success#{else}Error#{end}"
        },
        {
          "transaction_name": "VoidNonZeroAmountAuth",
          "connector_type": "HTTPs",
          "transaction_request_fields": [
            {
              "temporary": true,
              "field_name": "_",
              "field_value_expression": "
              ## construct void request
              #{set}( $voidRequestMap = {
              'clientReferenceInformation': {
                'code': $ZUtility.getUUID(32)
              }
              } )

              ## set payment number as reconciliation ID
              #{if}($StringUtils.isNotBlank($!PaymentNumber))
              #{set}( $voidRequestMap['clientReferenceInformation']['reconciliationId'] = $!PaymentNumber )
              #{end}

              #{set}( $requestBody = $ZUtility.mapToJSON($voidRequestMap) )
              "
            },
            {
              "field_name": "URL",
              "field_value_expression": "#{if}($IsTest)https://apitest.cybersource.com#{else}https://api.cybersource.com#{end}/pts/v2/payments/${authTransactionId}/voids"
            },
            {
              "field_name": "METHOD",
              "field_value_expression": "POST"
            },
            {
              "field_name": "Content-Type",
              "field_value_expression": "${Header-Content-Type}"
            },
            {
              "field_name": "signature",
              "field_value_expression": "${Header-signature}"
            },
            {
              "field_name": "v-c-merchant-id",
              "field_value_expression": "${Header-v-c-merchant-id}"
            },
            {
              "field_name": "host",
              "field_value_expression": "${Header-Host}"
            },
            {
              "field_name": "digest",
              "field_value_expression": "SHA-256=${Header-digest}"
            },
            {
              "field_name": "v-c-date",
              "field_value_expression": "${Header-v-c-date}"
            },
            {
              "field_name": "REQUEST_BODY",
              "field_value_expression": "${requestBody}"
            }
          ],
          "request_to_log": "Void Request = [${requestBody}; URL = $!URL]",
          "transaction_response_fields": [
            {
              "field_name": "_",
              "field_value_expression": "
              ## Create response body
              #{if} (!$StringUtils.equals($last_status_code, '201'))
              #{set}( $responseBody = $last_message_body )
              #{else}
              #{set}( $responseBody = $last_message_body )
              #{end}

              #{if} (!$StringUtils.equals($last_status_code, '201'))
              #{set}($blockInputs = [$last_message_body, $last_status_code])
              #evaluate(${Block-Error-Handler})
              #{stop}
              #{else}
              #{set}( $gatewayResponseCode = '201' )
              #{set}( $gatewayResponseMessage = 'Validation Completed - Authorization Voided' )
              #{end}

              ## Parse Response JSON Document
              #{set}( $voidResponseDoc = $ZUtility.parseJsonDocument($last_message_body) )

              #{set}( $voidTransactionId = $voidResponseDoc.valueOf('/JsonRoot/id') )
              #{set}( $voidStatus = $voidResponseDoc.valueOf('/JsonRoot/status') )

              #{if} ($StringUtils.equals($voidStatus, 'VOIDED'))
              #{set}( $zuoraResponseCode = 'Approved' )
              #{else}
              #{set}( $zuoraResponseCode = 'Failed' )
              #{end}

              #{set}( $gatewayReferenceId = $voidTransactionId )
              "
            },
            {
              "in_transaction_log": "true",
              "field_name": "ResponseBody",
              "field_value_expression": "$!responseBody"
            },
            {
              "in_transaction_log": "true",
              "field_name": "ResponseCode",
              "field_value_expression": "$!last_status_code"
            }
          ],
          "response_fsm_event_expression": "#{if}($StringUtils.equals($zuoraResponseCode, 'Approved'))Success#{else}Error#{end}"
        }
      ],
      "operation_states": [
        {
          "start_state": "BEGIN",
          "transaction_event": "",
          "end_state": "checkAmountForValidation"
        },
        {
          "start_state": "checkAmountForValidation",
          "transaction_event": "Success",
          "end_state": "ProcessZeroAmountValidation"
        },
        {
          "start_state": "checkAmountForValidation",
          "transaction_event": "Error",
          "end_state": "ProcessNonZeroAmountAuth"
        },
        {
          "start_state": "ProcessZeroAmountValidation",
          "transaction_event": "Success",
          "end_state": "END"
        },
        {
          "start_state": "ProcessZeroAmountValidation",
          "transaction_event": "Error",
          "end_state": "END"
        },
        {
          "start_state": "ProcessNonZeroAmountAuth",
          "transaction_event": "Success",
          "end_state": "VoidNonZeroAmountAuth"
        },
        {
          "start_state": "ProcessNonZeroAmountAuth",
          "transaction_event": "Error",
          "end_state": "END"
        },
        {
          "start_state": "VoidNonZeroAmountAuth",
          "transaction_event": "Success",
          "end_state": "END"
        },
        {
          "start_state": "VoidNonZeroAmountAuth",
          "transaction_event": "Error",
          "end_state": "END"
        }
      ],
      "operation_response_fields": [
        {
          "field_name": "ZuoraResponseCode",
          "field_value_expression": "$!zuoraResponseCode"
        },
        {
          "field_name": "GatewayResponseCode",
          "field_value_expression": "$!gatewayResponseCode"
        },
        {
          "field_name": "GatewayResponseMessage",
          "field_value_expression": "$!gatewayResponseMessage"
        },
        {
          "field_name": "GatewayReferenceId",
          "field_value_expression": "$!gatewayReferenceId"
        },
        {
          "field_name": "AuthTransactionId",
          "field_value_expression": "$!authTransactionId"
        },
        {
          "field_name": "MITReceivedTXID",
          "field_value_expression": "$!networkTransactionId"
        }
      ]
    }
  ],
  "attributes": [
    {
      "display_order": 1,
      "name": "organizationId",
      "tip_label": "PaymentGateway.CyberSource.organizationId.tipLabel",
      "file_suffix": null,
      "gw_block_type": "Credential",
      "picklist_label_values": null,
      "label": "PaymentGateway.CyberSource.organizationId.label",
      "hidden": false,
      "is_required": true,
      "read_only": false,
      "need_encryption": false,
      "default_value": null,
      "tip_description": "Your CyberSource organization ID (merchant ID)",
      "system_config_key": null,
      "max_field_length": 256,
      "min_field_length": -1,
      "gw_field_type": "Text",
      "data_source": null
    },
    {
      "display_order": 2,
      "name": "SharedKey",
      "tip_label": "PaymentGateway.CyberSource.SharedKey.tipLabel",
      "file_suffix": null,
      "gw_block_type": "Credential",
      "picklist_label_values": null,
      "label": "PaymentGateway.CyberSource.SharedKey.label",
      "hidden": false,
      "is_required": true,
      "read_only": false,
      "need_encryption": true,
      "default_value": null,
      "tip_description": "CyberSource shared key for HMAC signature generation",
      "system_config_key": null,
      "max_field_length": 256,
      "min_field_length": -1,
      "gw_field_type": "Text",
      "data_source": null
    },
    {
      "display_order": 3,
      "name": "sharedsecret",
      "tip_label": "PaymentGateway.CyberSource.sharedsecret.tipLabel",
      "file_suffix": null,
      "gw_block_type": "Credential",
      "picklist_label_values": null,
      "label": "PaymentGateway.CyberSource.sharedsecret.label",
      "hidden": false,
      "is_required": true,
      "read_only": false,
      "need_encryption": true,
      "default_value": null,
      "tip_description": "CyberSource shared secret key for HMAC signature generation",
      "system_config_key": null,
      "max_field_length": 256,
      "min_field_length": -1,
      "gw_field_type": "Text",
      "data_source": null
    }
  ]
}
